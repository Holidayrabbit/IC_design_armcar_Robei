module sonic_digital(
	Clk,
	Rst_n,
	temp_data,
	color_data,
	sel,
	led_data);

	//---Ports declearation: generated by Robei---
	input Clk;
	input Rst_n;
	input [7:0] temp_data;
	input [7:0] color_data;
	output [3:0] sel;
	output [7:0] led_data;

	wire Clk;
	wire Rst_n;
	wire [7:0] temp_data;
	wire [7:0] color_data;
	reg [3:0] sel;
	reg [7:0] led_data;

	//----Code starts here: integrated by Robei-----
			
				reg [3:0] temp_decade;
			reg [3:0] temp_unit;
				    parameter CNT_clk_1KHz=166_666,
				              CNT_clk_4KHz=41_666;
				    parameter ZERO=8'b0011_1111,   // 8'h3f
				              ONE=8'b0000_0110,    // 8'h06
				              TWO=8'b0101_1011,    //8'h5b
				              THREE=8'b0100_1111,    //8'h4f
				              FOUR=8'b0110_0110,    //8'h66
				              FIVE=8'b0110_1101,    //8'h6d
				              SIX=8'b0111_1101,     //8'h7d
				              SEVEN=8'b0000_0111,    //8'h07
				              EIGHT=8'b0111_1111,    //8'h7f
				              NINE=8'b0110_1111,     //8'h6f					  
							  A=8'b0111_0111,    //8'h77
				              B=8'b0111_1100,    //8'h7c
				              C=8'b0011_1001,     //8'h39
				              D=8'b0101_1110,    //8'h5e
				              E=8'b0111_1001,    //8'h79
				              F=8'b0111_0001;     //8'h71
								
				always @(posedge Clk or negedge Rst_n)begin
		
					if(!Rst_n)begin
				           temp_decade<=0;
				           temp_unit<=0;
				       end
				    else begin
							temp_decade<=temp_data/10;
							temp_unit<=temp_data%10;	
					end
				end
				
				
				  
				reg [15:0] cnt_sel;
				reg [2:0]  cnt_timer;
				   // timer
				   always @(posedge Clk or negedge Rst_n)begin
				       if(!Rst_n)begin
				           cnt_sel<=16'b0;
				           cnt_timer<=3'b000;
				       end
				       else if (cnt_sel==CNT_clk_4KHz)begin     
				           cnt_sel<=16'b0;
				           if(cnt_timer<3'd2)
				               cnt_timer<=cnt_timer+1;
				           else
				               cnt_timer<=3'b000;           
				       end
				       else begin
				           cnt_sel<=cnt_sel+1;
				           cnt_timer<=cnt_timer;
				       end
				   end
				  //sel
				  always@(*)begin
				      if(!Rst_n)
				          sel<=4'b1111;
				      else
				          case(cnt_timer)
				              3'd0:begin
				                  sel<=4'b1110; 
				              end
				              3'd1:begin
				                  sel<=4'b1101;
				              end
				              3'd2:begin
				                  sel<=4'b0111;
				              end
	  
				              default:    ;
				          endcase
				  end 
				   
				   // led_data
				   always @(posedge Clk or negedge Rst_n)begin
				       if(!Rst_n)
				           led_data<=8'b0000_0000;
						
				       else if (sel==4'b0111)
				          case(color_data)
				            8'd1:    led_data<=A;
				            8'd2:    led_data<=B;
				            8'd3:    led_data<=C;
				            8'd4:    led_data<=D;
				            8'd5:    led_data<=E;
				            8'd6:    led_data<=F;
				            default:    led_data<=8'h00;
				         endcase				
						
		
				        else if (sel==4'b1101)
				          case(temp_unit)
				            4'd0:    led_data<=ZERO;
				            4'd1:    led_data<=ONE;
				            4'd2:    led_data<=TWO;
				            4'd3:    led_data<=THREE;
				            4'd4:    led_data<=FOUR;
				            4'd5:    led_data<=FIVE;
				            4'd6:    led_data<=SIX;
				            4'd7:    led_data<=SEVEN;
				            4'd8:    led_data<=EIGHT;
				            4'd9:    led_data<=NINE;
				         default:    led_data<=8'h00;
				         endcase
				         else if (sel==4'b1110)
				          case(temp_decade)
				            4'd0:    led_data<=ZERO;
				            4'd1:    led_data<=ONE;
				            4'd2:    led_data<=TWO;
				            4'd3:    led_data<=THREE;
				            4'd4:    led_data<=FOUR;
				            4'd5:    led_data<=FIVE;
				            4'd6:    led_data<=SIX;
				            4'd7:    led_data<=SEVEN;
				            4'd8:    led_data<=EIGHT;
				            4'd9:    led_data<=NINE;
				         default:    led_data<=8'h00;
				         endcase        
				        else
				            led_data<=8'h00;
				   end
endmodule    //sonic_digital

