<!DOCTYPE Robei>
<Module X="0" Parent="0" Color="#d3d3d3" Type="module" Code="&#xa;   reg                  SDA_DO;                         // serial data - output&#xa;   reg                  SDA_OE;                         // serial data - output enable&#xa;&#xa;   wire                 SDA_DriveEnable;                // serial data output enable&#xa;   reg                  SDA_DriveEnableDlyd;            // serial data output enable - delayed&#xa;&#xa;   wire [02:00]         ChipAddress;                    // hardwired chip address&#xa;&#xa;   reg  [03:00]         BitCounter;                     // serial bit counter&#xa;&#xa;   reg                  START_Rcvd;                     // START bit received flag&#xa;   reg                  STOP_Rcvd;                      // STOP bit received flag&#xa;   reg                  CTRL_Rcvd;                      // control byte received flag&#xa;   reg                  ADHI_Rcvd;                      // byte address hi received flag&#xa;   reg                  ADLO_Rcvd;                      // byte address lo received flag&#xa;   reg                  MACK_Rcvd;                      // master acknowledge received flag&#xa;&#xa;   reg                  WrCycle;                        // memory write cycle&#xa;   reg                  RdCycle;                        // memory read cycle&#xa;&#xa;   reg  [07:00]         ShiftRegister;                  // input data shift register&#xa;&#xa;   reg  [07:00]         ControlByte;                    // control byte register&#xa;   wire                 RdWrBit;                        // read/write control bit&#xa;&#xa;   reg  [12:00]         StartAddress;                   // memory access starting address&#xa;   reg  [04:00]         PageAddress;                    // memory page address&#xa;&#xa;   reg  [07:00]         WrDataByte [0:31];              // memory write data buffer&#xa;   wire [07:00]         RdDataByte;                     // memory read data&#xa;&#xa;   reg  [15:00]         WrCounter;                      // write buffer counter&#xa;&#xa;   reg  [04:00]         WrPointer;                      // write buffer pointer&#xa;   reg  [12:00]         RdPointer;                      // read address pointer&#xa;&#xa;   reg                  WriteActive;                    // memory write cycle active&#xa;&#xa;   reg  [07:00]         MemoryBlock [0:8191];           // EEPROM data memory array&#xa;&#xa;   integer              LoopIndex;                      // iterative loop index&#xa;&#xa;   integer              tAA;                            // timing parameter&#xa;   integer              tWC;                            // timing parameter&#xa;&#xa;&#xa;// *******************************************************************************************************&#xa;// **   INITIALIZATION                                                                                  **&#xa;// *******************************************************************************************************&#xa;&#xa;//----------------------------&#xa;//------鍐欐暟鎹棿闅旀敼鍔�----------&#xa;   initial tAA = 900;                                   // SCL to SDA output delay&#xa;   initial tWC = 500;                                   // memory write cycle time&#xa;&#xa;//   initial tAA = 900;                                   // SCL to SDA output delay&#xa;//   initial tWC = 5000000;                               // memory write cycle time&#xa;&#x9;&#xa;&#x9;&#xa;   initial begin&#xa;      SDA_DO = 0;&#xa;      SDA_OE = 0;&#xa;   end&#xa;&#xa;   initial begin&#xa;      START_Rcvd = 0;&#xa;      STOP_Rcvd  = 0;&#xa;      CTRL_Rcvd  = 0;&#xa;      ADHI_Rcvd  = 0;&#xa;      ADLO_Rcvd  = 0;&#xa;      MACK_Rcvd  = 0;&#xa;   end&#xa;&#xa;   initial begin&#xa;      BitCounter  = 0;&#xa;      ControlByte = 0;&#xa;   end&#xa;&#xa;   initial begin&#xa;      WrCycle = 0;&#xa;      RdCycle = 0;&#xa;&#xa;      WriteActive = 0;&#xa;   end&#xa;&#xa;   assign ChipAddress = {A2,A1,A0};&#xa;&#xa;&#xa;// *******************************************************************************************************&#xa;// **   CORE LOGIC                                                                                      **&#xa;// *******************************************************************************************************&#xa;// -------------------------------------------------------------------------------------------------------&#xa;//      1.01:  START Bit Detection&#xa;// -------------------------------------------------------------------------------------------------------&#xa;&#xa;   always @(negedge SDA) begin&#xa;      if (SCL == 1) begin&#xa;         START_Rcvd &lt;= 1;&#xa;         STOP_Rcvd  &lt;= 0;&#xa;         CTRL_Rcvd  &lt;= 0;&#xa;         ADHI_Rcvd  &lt;= 0;&#xa;         ADLO_Rcvd  &lt;= 0;&#xa;         MACK_Rcvd  &lt;= 0;&#xa;&#xa;         WrCycle &lt;= #1 0;&#xa;         RdCycle &lt;= #1 0;&#xa;&#xa;         BitCounter &lt;= 0;&#xa;      end&#xa;   end&#xa;&#xa;// -------------------------------------------------------------------------------------------------------&#xa;//      1.02:  STOP Bit Detection&#xa;// -------------------------------------------------------------------------------------------------------&#xa;&#xa;   always @(posedge SDA) begin&#xa;      if (SCL == 1) begin&#xa;         START_Rcvd &lt;= 0;&#xa;         STOP_Rcvd  &lt;= 1;&#xa;         CTRL_Rcvd  &lt;= 0;&#xa;         ADHI_Rcvd  &lt;= 0;&#xa;         ADLO_Rcvd  &lt;= 0;&#xa;         MACK_Rcvd  &lt;= 0;&#xa;&#xa;         WrCycle &lt;= #1 0;&#xa;         RdCycle &lt;= #1 0;&#xa;&#xa;         BitCounter &lt;= 10;&#xa;      end&#xa;   end&#xa;&#xa;// -------------------------------------------------------------------------------------------------------&#xa;//      1.03:  Input Shift Register&#xa;// -------------------------------------------------------------------------------------------------------&#xa;&#xa;   always @(posedge SCL) begin&#xa;      ShiftRegister[00] &lt;= SDA;&#xa;      ShiftRegister[01] &lt;= ShiftRegister[00];&#xa;      ShiftRegister[02] &lt;= ShiftRegister[01];&#xa;      ShiftRegister[03] &lt;= ShiftRegister[02];&#xa;      ShiftRegister[04] &lt;= ShiftRegister[03];&#xa;      ShiftRegister[05] &lt;= ShiftRegister[04];&#xa;      ShiftRegister[06] &lt;= ShiftRegister[05];&#xa;      ShiftRegister[07] &lt;= ShiftRegister[06];&#xa;   end&#xa;&#xa;// -------------------------------------------------------------------------------------------------------&#xa;//      1.04:  Input Bit Counter&#xa;// -------------------------------------------------------------------------------------------------------&#xa;&#xa;   always @(posedge SCL) begin&#xa;      if (BitCounter &lt; 10) BitCounter &lt;= BitCounter + 1;&#xa;   end&#xa;&#xa;// -------------------------------------------------------------------------------------------------------&#xa;//      1.05:  Control Byte Register&#xa;// -------------------------------------------------------------------------------------------------------&#xa;&#xa;   always @(negedge SCL) begin&#xa;      if (START_Rcvd &amp; (BitCounter == 8)) begin&#xa;         if (!WriteActive &amp; (ShiftRegister[07:01] == {4'b1010,ChipAddress[02:00]})) begin&#xa;            if (ShiftRegister[00] == 0) WrCycle &lt;= 1;&#xa;            if (ShiftRegister[00] == 1) RdCycle &lt;= 1;&#xa;&#xa;            ControlByte &lt;= ShiftRegister[07:00];&#xa;&#xa;            CTRL_Rcvd &lt;= 1;&#xa;         end&#xa;&#xa;         START_Rcvd &lt;= 0;&#xa;      end&#xa;   end&#xa;&#xa;   assign RdWrBit = ControlByte[00];&#xa;&#xa;// -------------------------------------------------------------------------------------------------------&#xa;//      1.06:  Byte Address Register&#xa;// -------------------------------------------------------------------------------------------------------&#xa;&#xa;   always @(negedge SCL) begin&#xa;      if (CTRL_Rcvd &amp; (BitCounter == 8)) begin&#xa;         if (RdWrBit == 0) begin&#xa;            StartAddress[12:08] &lt;= ShiftRegister[04:00];&#xa;            RdPointer[12:08]    &lt;= ShiftRegister[04:00];&#xa;&#xa;            ADHI_Rcvd &lt;= 1;&#xa;         end&#xa;&#xa;         WrCounter &lt;= 0;&#xa;         WrPointer &lt;= 0;&#xa;&#xa;         CTRL_Rcvd &lt;= 0;&#xa;      end&#xa;   end&#xa;&#xa;   always @(negedge SCL) begin&#xa;      if (ADHI_Rcvd &amp; (BitCounter == 8)) begin&#xa;         if (RdWrBit == 0) begin&#xa;            StartAddress[07:00] &lt;= ShiftRegister[07:00];&#xa;            RdPointer[07:00]    &lt;= ShiftRegister[07:00];&#xa;&#xa;            ADLO_Rcvd &lt;= 1;&#xa;         end&#xa;&#xa;         WrCounter &lt;= 0;&#xa;         WrPointer &lt;= 0;&#xa;&#xa;         ADHI_Rcvd &lt;= 0;&#xa;      end&#xa;   end&#xa;&#xa;// -------------------------------------------------------------------------------------------------------&#xa;//      1.07:  Write Data Buffer&#xa;// -------------------------------------------------------------------------------------------------------&#xa;&#xa;   always @(negedge SCL) begin&#xa;      if (ADLO_Rcvd &amp; (BitCounter == 8)) begin&#xa;         if (RdWrBit == 0) begin&#xa;            WrDataByte[WrPointer] &lt;= ShiftRegister[07:00];&#xa;&#xa;            WrCounter &lt;= WrCounter + 1;&#xa;            WrPointer &lt;= WrPointer + 1;&#xa;         end&#xa;      end&#xa;   end&#xa;&#xa;// -------------------------------------------------------------------------------------------------------&#xa;//      1.08:  Acknowledge Generator&#xa;// -------------------------------------------------------------------------------------------------------&#xa;&#xa;   always @(negedge SCL) begin&#xa;      if (!WriteActive) begin&#xa;         if (BitCounter == 8) begin&#xa;            if (WrCycle | (START_Rcvd &amp; (ShiftRegister[07:01] == {4'b1010,ChipAddress[02:00]}))) begin&#xa;               SDA_DO &lt;= 0;&#xa;               SDA_OE &lt;= 1;&#xa;            end &#xa;         end&#xa;         if (BitCounter == 9) begin&#xa;            BitCounter &lt;= 0;&#xa;&#xa;            if (!RdCycle) begin&#xa;               SDA_DO &lt;= 0;&#xa;               SDA_OE &lt;= 0;&#xa;            end&#xa;         end&#xa;      end&#xa;   end &#xa;&#xa;// -------------------------------------------------------------------------------------------------------&#xa;//      1.09:  Acknowledge Detect&#xa;// -------------------------------------------------------------------------------------------------------&#xa;&#xa;   always @(posedge SCL) begin&#xa;      if (RdCycle &amp; (BitCounter == 8)) begin&#xa;         if ((SDA == 0) &amp; (SDA_OE == 0)) MACK_Rcvd &lt;= 1;&#xa;      end&#xa;   end&#xa;&#xa;   always @(negedge SCL) MACK_Rcvd &lt;= 0;&#xa;&#xa;// -------------------------------------------------------------------------------------------------------&#xa;//      1.10:  Write Cycle Timer&#xa;// -------------------------------------------------------------------------------------------------------&#xa;&#xa;   always @(posedge STOP_Rcvd) begin&#xa;      if (WrCycle &amp; (WP == 0) &amp; (WrCounter > 0)) begin&#xa;         WriteActive = 1;&#xa;         #(tWC);&#xa;         WriteActive = 0;&#xa;      end&#xa;   end&#xa;&#xa;   always @(posedge STOP_Rcvd) begin&#xa;      #(1.0);&#xa;      STOP_Rcvd = 0;&#xa;   end&#xa;&#xa;// -------------------------------------------------------------------------------------------------------&#xa;//      1.11:  Write Cycle Processor&#xa;// -------------------------------------------------------------------------------------------------------&#xa;&#xa;   always @(negedge WriteActive) begin&#xa;      for (LoopIndex = 0; LoopIndex &lt; WrCounter; LoopIndex = LoopIndex + 1) begin&#xa;         PageAddress = StartAddress[04:00] + LoopIndex;&#xa;&#xa;         MemoryBlock[{StartAddress[12:05],PageAddress[04:00]}] = WrDataByte[LoopIndex[04:00]];&#xa;      end&#xa;   end&#xa;&#xa;// -------------------------------------------------------------------------------------------------------&#xa;//      1.12:  Read Data Multiplexor&#xa;// -------------------------------------------------------------------------------------------------------&#xa;&#xa;   always @(negedge SCL) begin&#xa;      if (BitCounter == 8) begin&#xa;         if (WrCycle &amp; ADLO_Rcvd) begin&#xa;            RdPointer &lt;= StartAddress + WrPointer + 1;&#xa;         end&#xa;         if (RdCycle) begin&#xa;            RdPointer &lt;= RdPointer + 1;&#xa;         end&#xa;      end&#xa;   end&#xa;&#xa;   assign RdDataByte = MemoryBlock[RdPointer[12:00]];&#xa;&#xa;// -------------------------------------------------------------------------------------------------------&#xa;//      1.13:  Read Data Processor&#xa;// -------------------------------------------------------------------------------------------------------&#xa;&#xa;   always @(negedge SCL) begin&#xa;      if (RdCycle) begin&#xa;         if (BitCounter == 8) begin&#xa;            SDA_DO &lt;= 0;&#xa;            SDA_OE &lt;= 0;&#xa;         end&#xa;         else if (BitCounter == 9) begin&#xa;            SDA_DO &lt;= RdDataByte[07];&#xa;&#xa;            if (MACK_Rcvd) SDA_OE &lt;= 1;&#xa;         end&#xa;         else begin&#xa;            SDA_DO &lt;= RdDataByte[7-BitCounter];&#xa;         end&#xa;      end&#xa;   end&#xa;&#xa;// -------------------------------------------------------------------------------------------------------&#xa;//      1.14:  SDA Data I/O Buffer&#xa;// -------------------------------------------------------------------------------------------------------&#xa;&#xa;   bufif1 (SDA, 1'b0, SDA_DriveEnableDlyd);&#xa;&#xa;   assign SDA_DriveEnable = !SDA_DO &amp; SDA_OE;&#xa;   always @(SDA_DriveEnable) SDA_DriveEnableDlyd &lt;= #(tAA) SDA_DriveEnable;&#xa;&#xa;&#xa;// *******************************************************************************************************&#xa;// **   DEBUG LOGIC                                                                                     **&#xa;// *******************************************************************************************************&#xa;// -------------------------------------------------------------------------------------------------------&#xa;//      2.01:  Memory Data Bytes&#xa;// -------------------------------------------------------------------------------------------------------&#xa;&#xa;   wire [07:00] MemoryByte_000 = MemoryBlock[00];&#xa;   wire [07:00] MemoryByte_001 = MemoryBlock[01];&#xa;   wire [07:00] MemoryByte_002 = MemoryBlock[02];&#xa;   wire [07:00] MemoryByte_003 = MemoryBlock[03];&#xa;   wire [07:00] MemoryByte_004 = MemoryBlock[04];&#xa;   wire [07:00] MemoryByte_005 = MemoryBlock[05];&#xa;   wire [07:00] MemoryByte_006 = MemoryBlock[06];&#xa;   wire [07:00] MemoryByte_007 = MemoryBlock[07];&#xa;   wire [07:00] MemoryByte_008 = MemoryBlock[08];&#xa;   wire [07:00] MemoryByte_009 = MemoryBlock[09];&#xa;   wire [07:00] MemoryByte_00A = MemoryBlock[10];&#xa;   wire [07:00] MemoryByte_00B = MemoryBlock[11];&#xa;   wire [07:00] MemoryByte_00C = MemoryBlock[12];&#xa;   wire [07:00] MemoryByte_00D = MemoryBlock[13];&#xa;   wire [07:00] MemoryByte_00E = MemoryBlock[14];&#xa;   wire [07:00] MemoryByte_00F = MemoryBlock[15];&#xa;&#xa;// -------------------------------------------------------------------------------------------------------&#xa;//      2.02:  Write Data Buffer&#xa;// -------------------------------------------------------------------------------------------------------&#xa;&#xa;   wire [07:00] WriteData_00 = WrDataByte[00];&#xa;   wire [07:00] WriteData_01 = WrDataByte[01];&#xa;   wire [07:00] WriteData_02 = WrDataByte[02];&#xa;   wire [07:00] WriteData_03 = WrDataByte[03];&#xa;   wire [07:00] WriteData_04 = WrDataByte[04];&#xa;   wire [07:00] WriteData_05 = WrDataByte[05];&#xa;   wire [07:00] WriteData_06 = WrDataByte[06];&#xa;   wire [07:00] WriteData_07 = WrDataByte[07];&#xa;   wire [07:00] WriteData_08 = WrDataByte[08];&#xa;   wire [07:00] WriteData_09 = WrDataByte[09];&#xa;   wire [07:00] WriteData_0A = WrDataByte[10];&#xa;   wire [07:00] WriteData_0B = WrDataByte[11];&#xa;   wire [07:00] WriteData_0C = WrDataByte[12];&#xa;   wire [07:00] WriteData_0D = WrDataByte[13];&#xa;   wire [07:00] WriteData_0E = WrDataByte[14];&#xa;   wire [07:00] WriteData_0F = WrDataByte[15];&#xa;&#xa;   wire [07:00] WriteData_10 = WrDataByte[16];&#xa;   wire [07:00] WriteData_11 = WrDataByte[17];&#xa;   wire [07:00] WriteData_12 = WrDataByte[18];&#xa;   wire [07:00] WriteData_13 = WrDataByte[19];&#xa;   wire [07:00] WriteData_14 = WrDataByte[20];&#xa;   wire [07:00] WriteData_15 = WrDataByte[21];&#xa;   wire [07:00] WriteData_16 = WrDataByte[22];&#xa;   wire [07:00] WriteData_17 = WrDataByte[23];&#xa;   wire [07:00] WriteData_18 = WrDataByte[24];&#xa;   wire [07:00] WriteData_19 = WrDataByte[25];&#xa;   wire [07:00] WriteData_1A = WrDataByte[26];&#xa;   wire [07:00] WriteData_1B = WrDataByte[27];&#xa;   wire [07:00] WriteData_1C = WrDataByte[28];&#xa;   wire [07:00] WriteData_1D = WrDataByte[29];&#xa;   wire [07:00] WriteData_1E = WrDataByte[30];&#xa;   wire [07:00] WriteData_1F = WrDataByte[31];&#xa;&#xa;&#xa;// *******************************************************************************************************&#xa;// **   TIMING CHECKS                                                                                   **&#xa;// *******************************************************************************************************&#xa;&#xa;   wire TimingCheckEnable = (RESET == 0) &amp; (SDA_OE == 0);&#xa;   wire StopTimingCheckEnable = TimingCheckEnable &amp;&amp; SCL;&#xa;&#x9;&#xa;//--------------------------------&#xa;//-------浠跨湡鏃舵椂搴忕害鏉熼渶鏀瑰姩--------&#xa;//--------------------------------&#xa;   specify&#xa;      specparam&#xa;         tHI = 600,                                     // SCL pulse width - high&#xa;//         tLO = 1300,                                    // SCL pulse width - low&#xa;         tLO = 600, &#xa;&#x9;&#x9;&#x9;tSU_STA = 600,                                 // SCL to SDA setup time&#xa;         tHD_STA = 600,                                 // SCL to SDA hold time&#xa;         tSU_DAT = 100,                                 // SDA to SCL setup time&#xa;         tSU_STO = 600,                                 // SCL to SDA setup time&#xa;         tSU_WP = 600,                                  // WP to SDA setup time&#xa;         tHD_WP = 1300,                                 // WP to SDA hold time&#xa;//         tBUF = 1300;                                   // Bus free time&#xa;         tBUF = 600; &#xa;&#x9;&#x9;&#x9;&#xa;      $width (posedge SCL, tHI);&#xa;      $width (negedge SCL, tLO);&#xa;&#xa;      $width (posedge SDA &amp;&amp;&amp; SCL, tBUF);&#xa;&#xa;      $setup (posedge SCL, negedge SDA &amp;&amp;&amp; TimingCheckEnable, tSU_STA);&#xa;      $setup (SDA, posedge SCL &amp;&amp;&amp; TimingCheckEnable, tSU_DAT);&#xa;      $setup (posedge SCL, posedge SDA &amp;&amp;&amp; TimingCheckEnable, tSU_STO);&#xa;      $setup (WP, posedge SDA &amp;&amp;&amp; StopTimingCheckEnable, tSU_WP);&#xa;&#xa;      $hold  (negedge SDA &amp;&amp;&amp; TimingCheckEnable, negedge SCL, tHD_STA);&#xa;      $hold  (posedge SDA &amp;&amp;&amp; StopTimingCheckEnable, WP, tHD_WP);&#xa;   endspecify&#xa;&#xa;&#xa;&#xa;" Parameters="" Y="0" Class="module" File="Current/M24LC64.model" Include="" Height="600" Name="M24LC64" Comment="" Width="900">
 <Port X="-0.0222222" Parent="M24LC64" Color="#faebd7" Datatype="wire" Y="0.106667" Inout="input" Height="20" Name="A0" Datasize="1" Side="left" Function="" Width="20"/>
 <Port X="-0.0222222" Parent="M24LC64" Color="#00ffff" Datatype="wire" Y="0.231667" Inout="input" Height="20" Name="A1" Datasize="1" Side="left" Function="" Width="20"/>
 <Port X="-0.0222222" Parent="M24LC64" Color="#7fffd4" Datatype="wire" Y="0.356667" Inout="input" Height="20" Name="A2" Datasize="1" Side="left" Function="" Width="20"/>
 <Port X="-0.0222222" Parent="M24LC64" Color="#f0ffff" Datatype="wire" Y="0.481667" Inout="input" Height="20" Name="WP" Datasize="1" Side="left" Function="" Width="20"/>
 <Port X="-0.0222222" Parent="M24LC64" Color="#f5f5dc" Datatype="wire" Y="0.606667" Inout="input" Height="20" Name="SCL" Datasize="1" Side="left" Function="" Width="20"/>
 <Port X="-0.0222222" Parent="M24LC64" Color="#ffe4c4" Datatype="wire" Y="0.731667" Inout="input" Height="20" Name="RESET" Datasize="1" Side="left" Function="" Width="20"/>
 <Port X="0.977778" Parent="M24LC64" Color="#b8860b" Datatype="wire" Y="0.316667" Inout="inout" Height="20" Name="SDA" Datasize="1" Side="right" Function="" Width="20"/>
</Module>
