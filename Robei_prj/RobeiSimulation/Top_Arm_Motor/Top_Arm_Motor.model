<!DOCTYPE Robei>
<Module Height="600" Name="Top_Arm_Motor" Comment="" File="Current/Top_Arm_Motor.model" X="0" Y="0" Color="#d3d3d3" Code="&#xa;wire arm_tx_done;&#xa;&#xa;" Parent="0" Class="module" Include="" Type="module" Width="900" Parameters="">
 <Module Height="160" Name="uart_byte_rx1" Comment="" File="Current/uart_byte_rx.model" X="90.2982" Y="98.555" Color="#d3d3d3" Code="/*&#xa;在实际工业应用中，现场往往有非常强的电磁干扰，只采样一次就作为该数据的电&#xa;平状态是不可靠的。 很有可能恰好采集到被干扰的信号而导致结果出错，因此这里提出以下&#xa;改进型的单 bit 数据接收方式示意图，使用多次采样求概率的方式进行状态判定&#xa;将每一位数据再平均分成了 16 小段&#xa;&#xa;clk I 模块系统时钟 50MHz&#xa;reset_n I 模块异步复位信号&#xa;uart_rx I 串行数据输入&#xa;baud_set I 波特率选择信号&#xa;data_byte O 并行数据输出&#xa;rx_done O 接收结束信号&#xa;&#xa;*/&#xa;&#xa;&#xa;&#x9;wire reset=~reset_n;&#xa;&#xa;&#xa;&#x9;reg uart_rx_sync1;   //同步寄存器&#xa;&#x9;reg uart_rx_sync2;   //同步寄存器&#xa;&#xa;&#x9;reg uart_rx_reg1;    //数据寄存器&#xa;&#x9;reg uart_rx_reg2;    //数据寄存器&#xa;&#xa;&#x9;reg [15:0]bps_DR;    //分频计数最大值&#x9;&#xa;&#x9;reg [15:0]div_cnt;   //分频计数器&#xa;&#x9;reg bps_clk;   //波特率时钟&#x9;&#xa;&#x9;reg [7:0] bps_cnt;   //波特率时钟计数器&#x9;&#xa;&#x9;reg uart_state;//接收数据状态&#xa;&#xa;&#x9;wire uart_rx_nedge;  &#xa;&#xa;&#x9;reg [2:0]START_BIT;&#xa;&#x9;reg [2:0]STOP_BIT;&#xa;&#x9;reg [2:0]data_byte_pre [7:0];&#xa;&#xa;&#x9;//同步串行输入信号，消除亚稳态&#xa;&#x9;always@(posedge clk or posedge reset)&#xa;&#x9;if(reset)begin&#xa;&#x9;&#x9;uart_rx_sync1 &lt;= 1'b0;&#xa;&#x9;&#x9;uart_rx_sync2 &lt;= 1'b0;&#x9;&#xa;&#x9;end&#xa;&#x9;else begin&#xa;&#x9;&#x9;uart_rx_sync1 &lt;= uart_rx;&#xa;&#x9;&#x9;uart_rx_sync2 &lt;= uart_rx_sync1;&#x9;&#xa;&#x9;end&#xa;&#x9;&#xa;&#x9;//数据寄存器&#xa;&#x9;always@(posedge clk or posedge reset)&#xa;&#x9;if(reset)begin&#xa;&#x9;&#x9;uart_rx_reg1 &lt;= 1'b0;&#xa;&#x9;&#x9;uart_rx_reg2 &lt;= 1'b0;&#x9;&#xa;&#x9;end&#xa;&#x9;else begin&#xa;&#x9;&#x9;uart_rx_reg1 &lt;= uart_rx_sync2;&#xa;&#x9;&#x9;uart_rx_reg2 &lt;= uart_rx_reg1;&#x9;&#xa;&#x9;end&#xa;&#x9;&#xa;  //下降沿检测&#xa;&#x9;assign uart_rx_nedge = !uart_rx_reg1 &amp; uart_rx_reg2;&#xa;&#x9;&#xa;&#x9;always@(posedge clk or posedge reset)&#xa;&#x9;if(reset)&#xa;&#x9;&#x9;bps_DR &lt;= 16'd324;&#xa;&#x9;else begin&#xa;&#x9;&#x9;case(baud_set)&#xa;&#x9;&#x9;&#x9;0:bps_DR &lt;= 16'd324;&#xa;&#x9;&#x9;&#x9;1:bps_DR &lt;= 16'd162;&#xa;&#x9;&#x9;&#x9;2:bps_DR &lt;= 16'd80;&#xa;&#x9;&#x9;&#x9;3:bps_DR &lt;= 16'd53;&#xa;&#x9;&#x9;&#x9;4:bps_DR &lt;= 16'd26;&#xa;&#x9;&#x9;&#x9;default:bps_DR &lt;= 16'd324;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;endcase&#xa;&#x9;end&#xa;&#x9;&#xa;&#x9;//counter&#xa;&#x9;always@(posedge clk or posedge reset)&#xa;&#x9;if(reset)&#xa;&#x9;&#x9;div_cnt &lt;= 16'd0;&#xa;&#x9;else if(uart_state)begin&#xa;&#x9;&#x9;if(div_cnt == bps_DR)&#xa;&#x9;&#x9;&#x9;div_cnt &lt;= 16'd0;&#xa;&#x9;&#x9;else&#xa;&#x9;&#x9;&#x9;div_cnt &lt;= div_cnt + 1'b1;&#xa;&#x9;end&#xa;&#x9;else&#xa;&#x9;&#x9;div_cnt &lt;= 16'd0;&#xa;&#x9;&#x9;&#xa;&#x9;// bps_clk gen&#xa;&#x9;always@(posedge clk or posedge reset)&#xa;&#x9;if(reset)&#xa;&#x9;&#x9;bps_clk &lt;= 1'b0;&#xa;&#x9;else if(div_cnt == 16'd1)&#xa;&#x9;&#x9;bps_clk &lt;= 1'b1;&#xa;&#x9;else&#xa;&#x9;&#x9;bps_clk &lt;= 1'b0;&#xa;&#x9;&#xa;&#x9;//bps counter&#xa;&#x9;always@(posedge clk or posedge reset)&#xa;&#x9;if(reset)&#x9;&#xa;&#x9;&#x9;bps_cnt &lt;= 8'd0;&#xa;&#x9;else if(bps_cnt == 8'd159 | (bps_cnt == 8'd12 &amp;&amp; (START_BIT > 2)))&#xa;&#x9;&#x9;bps_cnt &lt;= 8'd0;&#xa;&#x9;else if(bps_clk)&#xa;&#x9;&#x9;bps_cnt &lt;= bps_cnt + 1'b1;&#xa;&#x9;else&#xa;&#x9;&#x9;bps_cnt &lt;= bps_cnt;&#xa;&#xa;&#x9;always@(posedge clk or posedge reset)&#xa;&#x9;if(reset)&#xa;&#x9;&#x9;rx_done &lt;= 1'b0;&#xa;&#x9;else if(bps_cnt == 8'd159)&#xa;&#x9;&#x9;rx_done &lt;= 1'b1;&#xa;&#x9;else&#xa;&#x9;&#x9;rx_done &lt;= 1'b0;&#x9;&#x9;&#xa;&#x9;&#x9;&#xa;&#x9;always@(posedge clk or posedge reset)&#xa;&#x9;if(reset)begin&#xa;&#x9;&#x9;START_BIT &lt;= 3'd0;&#xa;&#x9;&#x9;data_byte_pre[0] &lt;= 3'd0;&#xa;&#x9;&#x9;data_byte_pre[1] &lt;= 3'd0;&#xa;&#x9;&#x9;data_byte_pre[2] &lt;= 3'd0;&#xa;&#x9;&#x9;data_byte_pre[3] &lt;= 3'd0;&#xa;&#x9;&#x9;data_byte_pre[4] &lt;= 3'd0;&#xa;&#x9;&#x9;data_byte_pre[5] &lt;= 3'd0;&#xa;&#x9;&#x9;data_byte_pre[6] &lt;= 3'd0;&#xa;&#x9;&#x9;data_byte_pre[7] &lt;= 3'd0;&#xa;&#x9;&#x9;STOP_BIT &lt;= 3'd0;&#xa;&#x9;end&#xa;&#x9;else if(bps_clk)begin&#xa;&#x9;&#x9;case(bps_cnt)&#xa;&#x9;&#x9;&#x9;0:begin&#xa;        START_BIT &lt;= 3'd0;&#xa;        data_byte_pre[0] &lt;= 3'd0;&#xa;        data_byte_pre[1] &lt;= 3'd0;&#xa;        data_byte_pre[2] &lt;= 3'd0;&#xa;        data_byte_pre[3] &lt;= 3'd0;&#xa;        data_byte_pre[4] &lt;= 3'd0;&#xa;        data_byte_pre[5] &lt;= 3'd0;&#xa;        data_byte_pre[6] &lt;= 3'd0;&#xa;        data_byte_pre[7] &lt;= 3'd0;&#xa;        STOP_BIT &lt;= 3'd0;&#x9;&#x9;&#x9;&#xa;      end&#xa;&#x9;&#x9;&#x9;6 ,7 ,8 ,9 ,10,11:START_BIT &lt;= START_BIT + uart_rx_sync2;&#xa;&#x9;&#x9;&#x9;22,23,24,25,26,27:data_byte_pre[0] &lt;= data_byte_pre[0] + uart_rx_sync2;&#xa;&#x9;&#x9;&#x9;38,39,40,41,42,43:data_byte_pre[1] &lt;= data_byte_pre[1] + uart_rx_sync2;&#xa;&#x9;&#x9;&#x9;54,55,56,57,58,59:data_byte_pre[2] &lt;= data_byte_pre[2] + uart_rx_sync2;&#xa;&#x9;&#x9;&#x9;70,71,72,73,74,75:data_byte_pre[3] &lt;= data_byte_pre[3] + uart_rx_sync2;&#xa;&#x9;&#x9;&#x9;86,87,88,89,90,91:data_byte_pre[4] &lt;= data_byte_pre[4] + uart_rx_sync2;&#xa;&#x9;&#x9;&#x9;102,103,104,105,106,107:data_byte_pre[5] &lt;= data_byte_pre[5] + uart_rx_sync2;&#xa;&#x9;&#x9;&#x9;118,119,120,121,122,123:data_byte_pre[6] &lt;= data_byte_pre[6] + uart_rx_sync2;&#xa;&#x9;&#x9;&#x9;134,135,136,137,138,139:data_byte_pre[7] &lt;= data_byte_pre[7] + uart_rx_sync2;&#xa;&#x9;&#x9;&#x9;150,151,152,153,154,155:STOP_BIT &lt;= STOP_BIT + uart_rx_sync2;&#xa;&#x9;&#x9;&#x9;default:&#xa;      begin&#xa;        START_BIT &lt;= START_BIT;&#xa;        data_byte_pre[0] &lt;= data_byte_pre[0];&#xa;        data_byte_pre[1] &lt;= data_byte_pre[1];&#xa;        data_byte_pre[2] &lt;= data_byte_pre[2];&#xa;        data_byte_pre[3] &lt;= data_byte_pre[3];&#xa;        data_byte_pre[4] &lt;= data_byte_pre[4];&#xa;        data_byte_pre[5] &lt;= data_byte_pre[5];&#xa;        data_byte_pre[6] &lt;= data_byte_pre[6];&#xa;        data_byte_pre[7] &lt;= data_byte_pre[7];&#xa;        STOP_BIT &lt;= STOP_BIT;&#xa;      end&#xa;&#x9;&#x9;endcase&#xa;&#x9;end&#xa;&#xa;&#x9;always@(posedge clk or posedge reset)&#xa;&#x9;if(reset)&#xa;&#x9;&#x9;data_byte &lt;= 8'd0;&#xa;&#x9;else if(bps_cnt == 8'd159)begin&#xa;&#x9;&#x9;data_byte[0] &lt;= data_byte_pre[0][2];&#xa;&#x9;&#x9;data_byte[1] &lt;= data_byte_pre[1][2];&#xa;&#x9;&#x9;data_byte[2] &lt;= data_byte_pre[2][2];&#xa;&#x9;&#x9;data_byte[3] &lt;= data_byte_pre[3][2];&#xa;&#x9;&#x9;data_byte[4] &lt;= data_byte_pre[4][2];&#xa;&#x9;&#x9;data_byte[5] &lt;= data_byte_pre[5][2];&#xa;&#x9;&#x9;data_byte[6] &lt;= data_byte_pre[6][2];&#xa;&#x9;&#x9;data_byte[7] &lt;= data_byte_pre[7][2];&#xa;&#x9;end&#x9;&#xa;&#x9;&#xa;&#x9;always@(posedge clk or posedge reset)&#xa;&#x9;if(reset)&#xa;&#x9;&#x9;uart_state &lt;= 1'b0;&#xa;&#x9;else if(uart_rx_nedge)&#xa;&#x9;&#x9;uart_state &lt;= 1'b1;&#xa;&#x9;else if(rx_done || (bps_cnt == 8'd12 &amp;&amp; (START_BIT > 2)) || (bps_cnt == 8'd155 &amp;&amp; (STOP_BIT &lt; 3)))&#xa;&#x9;&#x9;uart_state &lt;= 1'b0;&#xa;&#x9;else&#xa;&#x9;&#x9;uart_state &lt;= uart_state;&#x9;&#x9;&#xa;" Parent="Top_Arm_Motor" Class="uart_byte_rx" Include="" Type="model" Width="160" Parameters="">
  <Port Height="20" Name="clk" Function="" Connect="" X="-0.125" Y="0.1" Color="#faebd7" Datatype="wire" Parent="uart_byte_rx1" Datasize="1" Side="left" Width="20" Inout="input"/>
  <Port Height="20" Name="reset_n" Function="" Connect="" X="-0.125" Y="0.2625" Color="#00ffff" Datatype="wire" Parent="uart_byte_rx1" Datasize="1" Side="left" Width="20" Inout="input"/>
  <Port Height="20" Name="baud_set" Function="" Connect="" X="-0.125" Y="0.425" Color="#7fffd4" Datatype="wire" Parent="uart_byte_rx1" Datasize="3" Side="left" Width="20" Inout="input"/>
  <Port Height="20" Name="uart_rx" Function="" Connect="" X="-0.125" Y="0.5875" Color="#f0ffff" Datatype="wire" Parent="uart_byte_rx1" Datasize="1" Side="left" Width="20" Inout="input"/>
  <Port Height="20" Name="data_byte" Function="" Connect="" X="0.875" Y="0.1875" Color="#f5f5dc" Datatype="reg" Parent="uart_byte_rx1" Datasize="8" Side="right" Width="20" Inout="output"/>
  <Port Height="20" Name="rx_done" Function="" Connect="" X="0.875" Y="0.4375" Color="#ffe4c4" Datatype="reg" Parent="uart_byte_rx1" Datasize="1" Side="right" Width="20" Inout="output"/>
 </Module>
 <Module Height="160" Name="Bus_arm_motor2" Comment="" File="Current/Bus_arm_motor.model" X="318.394" Y="109.908" Color="#d3d3d3" Code="&#x9;&#x9;/*&#xa;&#x9;&#x9;该模块负责串口指令的解析,分别输出对机械臂和电机的指令。&#xa;&#x9;&#x9;&#xa;&#x9;&#x9;定义串口指令：&#xa;&#x9;&#x9;帧头 0x55 和 0xA5 + 器件地址 + 功能码 + 数据（寄存器地址+有效数据） + 帧尾 0xF0   ，一共10字节&#xa;&#x9;&#x9;器件地址：机械臂0x00    电机0x34&#xa;&#x9;&#x9;功能码：第八位表示读或者写 低四位表示有效数据的长度&#xa;&#x9;&#x9;数据：&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;机械臂：XX 00 00 00 00&#x9;&#x9;&#x9;(XX高六位表示转动的舵机，低一位表示转动方向)&#x9;[47:40]&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;电机：&#x9;XX XX XX XX XX&#x9;&#x9;&#x9;（第一个字节表示寄存器地址，后面四个字节表示页写数据）&#xa;&#x9;&#x9;&#xa;&#x9;&#x9;综上，串口指令协议的长度为 10字节，我们所需做的就是对这10字节数据进行判断。&#xa;&#x9;&#x9;只要满足串口指令协议要求（即帧头 0x55+帧头 0xA5+19 字节内容+帧尾 0xF0），便代表是正确的串口指令。&#xa;&#x9;&#x9;随后从指令中提取出对应的起始地址、功能码、数据，并产生 cmd 有效信号（cmd_valid），发送个机械臂或者电机驱动模块。&#xa;&#x9;&#x9;&#xa;&#x9;&#x9;变量解释：&#xa;&#x9;&#x9;bus_rx_done（r_rx_done）来自buffer的信号，当buffer发送完毕，该信号变为1&#xa;&#x9;&#x9;&#xa;&#x9;&#x9;还需补充的内容：&#xa;&#x9;&#x9;buffer_empty&#xa;&#x9;&#x9;buffer_rd&#x9;&#x9;&#xa;&#x9;&#x9;*/&#xa;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;reg [7:0] data_str [9:0];&#x9;&#x9;//将从buffer收到的数据拼接成完整的串口帧&#xa;&#xa;&#xa;&#x9;&#x9;&#x9;always@(posedge Clk) begin&#xa;/*&#xa;&#x9;&#x9;&#x9;&#x9;if(buffer_empty)&#x9;&#x9;&#x9;//如果buffer空了就读取无效&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;cmd_valid &lt;= #1 0;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;*/&#xa;&#xa;&#x9;&#x9;&#x9;&#x9;if(bus_rx_done)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;//buffer_rd &lt;=  0;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;data_str[9] &lt;= #1 instruction_data;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;data_str[8] &lt;= #1 data_str[9];&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;data_str[7] &lt;= #1 data_str[8];           &#xa;&#x9;&#x9;&#x9;&#x9;&#x9;data_str[6] &lt;= #1 data_str[7];&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;data_str[5] &lt;= #1 data_str[6];&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;data_str[4] &lt;= #1 data_str[5];&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;data_str[3] &lt;= #1 data_str[4];&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;data_str[2] &lt;= #1 data_str[3];&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;data_str[1] &lt;= #1 data_str[2];&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;data_str[0] &lt;= #1 data_str[1];&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;//buffer_rd &lt;=  1;&#x9;//读取完一个字节就申请再读一个字节&#xa;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;end&#x9;&#x9;&#xa;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;reg r_rx_done;&#xa;&#xa;&#x9;&#x9;    always@(posedge Clk) begin&#xa;&#x9;&#x9;//&#x9;if(buffer_empty)&#x9;&#x9;cmd_valid &lt;= #1 0;&#x9;//如果buffer空了就读取无效&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;    &#xa;&#x9;&#x9;&#x9;r_rx_done &lt;= bus_rx_done;&#xa;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;    &#xa;&#x9;&#x9;    always@(posedge Clk or negedge Rst_n)&#x9;//复位全部置为0&#xa;&#x9;&#x9;    if(!Rst_n) &#xa;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;//&#x9;&#x9;buffer_rd &lt;=  0;&#x9;//初始时刻，请求读取&#xa;&#x9;&#x9;        motor_reg_address &lt;= #1 0;&#xa;&#x9;&#x9;&#x9;&#x9;arm_id &lt;= #1 0;&#xa;&#x9;&#x9;&#x9;&#x9;arm_cmd &lt;= #1 0;&#xa;&#x9;&#x9;&#x9;&#x9;motor_cmd_data&lt;= #1 0;&#xa;&#x9;&#x9;        cmd_valid &lt;= #1 0;&#xa;&#x9;&#x9;        motor_num_cmd &lt;= #1 0;&#xa;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;end &#xa;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;else if(r_rx_done)&#xa;&#x9;&#x9;&#x9;&#x9;begin&#x9;&#x9;&#x9;//串口数据包全部收到了，开始解析命令&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;if((data_str[0] == 8'h55) &amp;&amp; (data_str[1] == 8'hA5) &amp;&amp; (data_str[9] == 8'hF0))&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(data_str[2] == 8'h00)&#x9;&#x9;//表示操作机械臂&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;arm_id &lt;= #1 data_str[4][7:5];&#x9;&#x9;//第五个字节高三位&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;arm_cmd &lt;= #1 data_str[4][0];&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cmd_valid &lt;= #1 1;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else if(data_str[2] == 8'h34)&#x9;//表示操作电机&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;motor_id &lt;= #1 8'h34;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;motor_reg_address &lt;= #1 data_str[4];  //第五个字节&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;motor_cmd_data&lt;= #1 {data_str[5],data_str[6],data_str[7],data_str[8]};&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;motor_num_cmd &lt;= #1 data_str[3];&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cmd_valid &lt;= #1 1;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else &#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cmd_valid &lt;= #1 0;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;else&#x9;cmd_valid &lt;= #1 0;     " Parent="Top_Arm_Motor" Class="Bus_arm_motor" Include="" Type="model" Width="160" Parameters="">
  <Port Height="20" Name="Clk" Function="" Connect="" X="-0.125" Y="0.1" Color="#faebd7" Datatype="wire" Parent="Bus_arm_motor2" Datasize="1" Side="left" Width="20" Inout="input"/>
  <Port Height="20" Name="Rst_n" Function="" Connect="" X="-0.125" Y="0.2625" Color="#00ffff" Datatype="wire" Parent="Bus_arm_motor2" Datasize="1" Side="left" Width="20" Inout="input"/>
  <Port Height="20" Name="instruction_data" Function="" Connect="" X="-0.125" Y="0.425" Color="#7fffd4" Datatype="wire" Parent="Bus_arm_motor2" Datasize="8" Side="left" Width="20" Inout="input"/>
  <Port Height="20" Name="cmd_valid" Function="" Connect="" X="0.875" Y="0.04375" Color="#f5f5dc" Datatype="reg" Parent="Bus_arm_motor2" Datasize="1" Side="right" Width="20" Inout="output"/>
  <Port Height="20" Name="arm_id" Function="" Connect="" X="0.875" Y="0.15" Color="#ffe4c4" Datatype="reg" Parent="Bus_arm_motor2" Datasize="8" Side="right" Width="20" Inout="output"/>
  <Port Height="20" Name="arm_cmd" Function="" Connect="" X="0.875" Y="0.25625" Color="#b8860b" Datatype="reg" Parent="Bus_arm_motor2" Datasize="1" Side="right" Width="20" Inout="output"/>
  <Port Height="20" Name="motor_reg_address" Function="" Connect="" X="0.875" Y="0.3625" Color="#ffebcd" Datatype="reg" Parent="Bus_arm_motor2" Datasize="8" Side="right" Width="20" Inout="output"/>
  <Port Height="20" Name="motor_cmd_data" Function="" Connect="" X="0.875" Y="0.46875" Color="#0000ff" Datatype="reg" Parent="Bus_arm_motor2" Datasize="32" Side="right" Width="20" Inout="output"/>
  <Port Height="20" Name="motor_num_cmd" Function="" Connect="" X="0.875" Y="0.575" Color="#8a2be2" Datatype="reg" Parent="Bus_arm_motor2" Datasize="8" Side="right" Width="20" Inout="output"/>
  <Port Height="20" Name="motor_id" Function="" Connect="" X="0.875" Y="0.68125" Color="#deb887" Datatype="reg" Parent="Bus_arm_motor2" Datasize="8" Side="right" Width="20" Inout="output"/>
  <Port Height="20" Name="bus_rx_done" Function="" Connect="" X="-0.125" Y="0.5875" Color="#5f9ea0" Datatype="wire" Parent="Bus_arm_motor2" Datasize="1" Side="left" Width="20" Inout="input"/>
 </Module>
 <Module Height="160" Name="i2c_control_motor_plus3" Comment="" File="Current/i2c_control_motor_plus.model" X="554.748" Y="352.454" Color="#d3d3d3" Code="&#x9;&#x9;/*&#xa;&#x9;&#x9;Clk I 模块工作时钟， 50M 时钟&#xa;&#x9;&#x9;Rst_n I 模块复位信号&#xa;&#x9;&#x9;wrreg_req I 写请求信号&#xa;&#x9;&#x9;rdreg_req I 读请求信号&#xa;&#x9;&#x9;addr I 16 位地址输入&#xa;&#x9;&#x9;addr_mode I 输入地址模式， 0： 8 位的地址， 1： 16 位地址&#xa;&#x9;&#x9;&#xa;&#x9;&#x9;//每写入一次数据就会跳转到等待读完成状态，同时在这个状态里面会根据 addr_mode 来&#xa;&#x9;&#x9;//确定写的是 8 位地址，还是 16 位的地址，从而来控制 cnt 的值，后面回到读寄存器状态（ RD_REG）&#xa;&#x9;&#x9;//里面的时候就可以选择性跳过发送高 8 位全 0 来代替的地址了。&#xa;&#x9;&#x9;&#xa;&#x9;&#x9;wrdata I 总线发送的 8 位数据&#xa;&#x9;&#x9;rddata O 总线收到的 8 位数据&#xa;&#x9;&#x9;device_id I i2c 器件的 ID&#xa;&#x9;&#x9;RW_Done O 读/写完成标志&#xa;&#x9;&#x9;ack O 从机是否应答标志&#xa;&#x9;&#x9;i2c_sclk O i2c 时钟总线&#xa;&#x9;&#x9;i2c_sdat I /O i2c 数据总线&#xa;&#x9;&#x9;&#xa;&#x9;&#x9;*/&#xa;&#x9;&#x9;&#x9;reg [5:0]Cmd;&#xa;&#x9;&#x9;&#x9;reg [7:0]Tx_DATA;&#xa;&#x9;&#x9;&#x9;wire Trans_Done;&#xa;&#x9;&#x9;&#x9;wire ack_o;&#xa;&#x9;&#x9;&#x9;reg Go;&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;wire [7:0] reg_addr;&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;assign reg_addr = addr[7:0];&#xa;&#x9;&#x9;&#x9;assign data_len = len[3:0];&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;wire [7:0]Rx_DATA;&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;localparam &#xa;&#x9;&#x9;&#x9;&#x9;WR   = 6'b000001,   //写请求&#xa;&#x9;&#x9;&#x9;&#x9;STA  = 6'b000010,   //起始位请求&#xa;&#x9;&#x9;&#x9;&#x9;RD   = 6'b000100,   //读请求&#xa;&#x9;&#x9;&#x9;&#x9;STO  = 6'b001000,   //停止位请求&#xa;&#x9;&#x9;&#x9;&#x9;ACK  = 6'b010000,   //应答位请求&#xa;&#x9;&#x9;&#x9;&#x9;NACK = 6'b100000;   //无应答请求&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;reg [6:0]state;&#xa;&#x9;&#x9;&#x9;reg [7:0]cnt;&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;localparam&#xa;&#x9;&#x9;&#x9;&#x9;IDLE         = 7'b0000001,   //空闲状态&#xa;&#x9;&#x9;&#x9;&#x9;WR_REG       = 7'b0000010,   //写寄存器状态&#xa;&#x9;&#x9;&#x9;&#x9;WAIT_WR_DONE = 7'b0000100,   //等待写寄存器完成状态&#xa;&#x9;&#x9;&#x9;&#x9;WR_REG_DONE  = 7'b0001000,   //写寄存器完成状态&#xa;&#x9;&#x9;&#x9;&#x9;RD_REG       = 7'b0010000,   //读寄存器状态&#xa;&#x9;&#x9;&#x9;&#x9;WAIT_RD_DONE = 7'b0100000,   //等待读寄存器完成状态&#xa;&#x9;&#x9;&#x9;&#x9;RD_REG_DONE  = 7'b1000000;   //读寄存器完成状态&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;always@(posedge Clk or negedge Rst_n)&#xa;&#x9;&#x9;&#x9;if(!Rst_n)begin&#xa;&#x9;&#x9;&#x9;&#x9;Cmd &lt;= 6'd0;&#xa;&#x9;&#x9;&#x9;&#x9;Tx_DATA &lt;= 8'd0;&#xa;&#x9;&#x9;&#x9;&#x9;Go &lt;= 1'b0;&#xa;&#x9;&#x9;&#x9;&#x9;rddata &lt;= 0;&#xa;&#x9;&#x9;&#x9;&#x9;state &lt;= IDLE;&#xa;&#x9;&#x9;&#x9;&#x9;ack &lt;= 0;&#xa;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;else begin&#xa;&#x9;&#x9;&#x9;&#x9;case(state)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;IDLE:&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cnt &lt;= 0;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ack &lt;= 0;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;RW_Done &lt;= 1'b0;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(wrreg_req)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= WR_REG;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else if(rdreg_req)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= RD_REG;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= IDLE;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;WR_REG:&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= WAIT_WR_DONE;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case(cnt)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;0:write_byte(WR | STA, device_id);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;1:write_byte(WR, reg_addr[7:0]);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;2:write_byte(WR, wrdata[31:24]);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;3:write_byte(WR, wrdata[23:16]);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;4:write_byte(WR, wrdata[15:8]);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;5:write_byte(WR | STO, wrdata[7:0]);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//只传1位数据&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;6:write_byte(WR | STO, wrdata[7:0]);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;default:;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endcase&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;WAIT_WR_DONE:&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Go &lt;= 1'b0; &#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(Trans_Done)begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ack &lt;= ack | ack_o;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case(cnt)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;0: begin cnt &lt;= 1; state &lt;= WR_REG;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;1: begin &#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(data_len==4'd1) &#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;begin cnt &lt;= 6; state &lt;= WR_REG; end&#x9;&#x9;&#x9;//如果要写的数据只有&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else if(data_len==4'd4)&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//那么跳到6，写低8位数&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;begin cnt &lt;= 2; state &lt;= WR_REG; end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;2: begin cnt &lt;= 3; state &lt;= WR_REG; end&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;3: begin cnt &lt;= 4; state &lt;= WR_REG;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;4: begin cnt &lt;= 5; state &lt;= WR_REG;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;5: begin state &lt;= WR_REG_DONE;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;6: begin state &lt;= WR_REG_DONE;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;default:state &lt;= IDLE;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endcase&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;WR_REG_DONE:&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;RW_Done &lt;= 1'b1;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= IDLE;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;RD_REG:&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= WAIT_RD_DONE;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case(cnt)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;0:write_byte(WR | STA, device_id);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;1:write_byte(WR, reg_addr[15:8]);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;2:write_byte(WR, reg_addr[7:0]);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;3:write_byte(WR | STA, device_id | 8'd1);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;4:read_byte(RD | NACK | STO);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;default:;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endcase&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;WAIT_RD_DONE:&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Go &lt;= 1'b0; &#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(Trans_Done)begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(cnt &lt;= 3)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ack &lt;= ack | ack_o;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case(cnt)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;0: begin cnt &lt;= 1; state &lt;= RD_REG;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;1: &#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;begin &#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= RD_REG;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(addr_mode)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cnt &lt;= 2; &#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cnt &lt;= 3;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;2: begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cnt &lt;= 3;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= RD_REG;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;3:begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cnt &lt;= 4;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= RD_REG;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;4:state &lt;= RD_REG_DONE;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;default:state &lt;= IDLE;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endcase&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;RD_REG_DONE:&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;RW_Done &lt;= 1'b1;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;rddata &lt;= Rx_DATA;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= IDLE;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;default:state &lt;= IDLE;&#xa;&#x9;&#x9;&#x9;&#x9;endcase&#xa;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;task read_byte;&#xa;&#x9;&#x9;&#x9;&#x9;input [5:0]Ctrl_Cmd;&#xa;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;Cmd &lt;= Ctrl_Cmd;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;Go &lt;= 1'b1; &#xa;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;endtask&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;task write_byte;&#xa;&#x9;&#x9;&#x9;&#x9;input [5:0]Ctrl_Cmd;&#xa;&#x9;&#x9;&#x9;&#x9;input [7:0]Wr_Byte_Data;&#xa;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;Cmd &lt;= Ctrl_Cmd;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;Tx_DATA &lt;= Wr_Byte_Data;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;Go &lt;= 1'b1; &#xa;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;endtask" Parent="Top_Arm_Motor" Class="i2c_control_motor_plus" Include="0" Type="model" Width="160" Parameters="">
  <Port Height="20" Name="Clk" Function="" Connect="" X="-0.125" Y="0.1125" Color="#faebd7" Datatype="wire" Parent="i2c_control_motor_plus3" Datasize="1" Side="left" Width="20" Inout="input"/>
  <Port Height="20" Name="Rst_n" Function="" Connect="" X="-0.125" Y="0.2" Color="#00ffff" Datatype="wire" Parent="i2c_control_motor_plus3" Datasize="1" Side="left" Width="20" Inout="input"/>
  <Port Height="20" Name="wrreg_req" Function="" Connect="" X="-0.125" Y="0.2875" Color="#7fffd4" Datatype="wire" Parent="i2c_control_motor_plus3" Datasize="1" Side="left" Width="20" Inout="input"/>
  <Port Height="20" Name="rdreg_req" Function="" Connect="" X="-0.125" Y="0.375" Color="#f0ffff" Datatype="wire" Parent="i2c_control_motor_plus3" Datasize="1" Side="left" Width="20" Inout="input"/>
  <Port Height="20" Name="addr" Function="" Connect="" X="-0.125" Y="0.4625" Color="#f5f5dc" Datatype="wire" Parent="i2c_control_motor_plus3" Datasize="8" Side="left" Width="20" Inout="input"/>
  <Port Height="20" Name="wrdata" Function="write_data " Connect="" X="-0.125" Y="0.55" Color="#b8860b" Datatype="wire" Parent="i2c_control_motor_plus3" Datasize="32" Side="left" Width="20" Inout="input"/>
  <Port Height="20" Name="device_id" Function="drive_addr " Connect="" X="-0.125" Y="0.6375" Color="#ffebcd" Datatype="wire" Parent="i2c_control_motor_plus3" Datasize="8" Side="left" Width="20" Inout="input"/>
  <Port Height="20" Name="rddata" Function="" Connect=" " X="0.875" Y="0.075" Color="#0000ff" Datatype="reg" Parent="i2c_control_motor_plus3" Datasize="8" Side="right" Width="20" Inout="output"/>
  <Port Height="20" Name="RW_Done" Function="" Connect="" X="0.875" Y="0.2125" Color="#8a2be2" Datatype="reg" Parent="i2c_control_motor_plus3" Datasize="1" Side="right" Width="20" Inout="output"/>
  <Port Height="20" Name="ack" Function="" Connect="" X="0.875" Y="0.35" Color="#a52a2a" Datatype="reg" Parent="i2c_control_motor_plus3" Datasize="1" Side="right" Width="20" Inout="output"/>
  <Port Height="20" Name="i2c_sclk" Function="" Connect="" X="0.875" Y="0.4875" Color="#deb887" Datatype="wire" Parent="i2c_control_motor_plus3" Datasize="1" Side="right" Width="20" Inout="output"/>
  <Port Height="20" Name="i2c_sdat" Function="" Connect="" X="0.875" Y="0.625" Color="#5f9ea0" Datatype="wire" Parent="i2c_control_motor_plus3" Datasize="1" Side="right" Width="20" Inout="inout"/>
  <Port Height="20" Name="len" Function="" Connect="" X="-0.125" Y="0.725" Color="#5f9ea0" Datatype="wire" Parent="i2c_control_motor_plus3" Datasize="4" Side="left" Width="20" Inout="input"/>
  <Port Height="20" Name="MOTOR_EN" Function="" Connect="" X="-0.125" Y="0.025" Color="#7fff00" Datatype="wire" Parent="i2c_control_motor_plus3" Datasize="1" Side="left" Width="20" Inout="input"/>
 </Module>
 <Module Height="160" Name="Arm4" Comment="" File="Current/Arm.model" X="617.706" Y="93.3945" Color="#d3d3d3" Code="&#xa;&#xa;&#xa;" Parent="Top_Arm_Motor" Class="Arm" Include="" Type="model" Width="160" Parameters="">
  <Port Height="20" Name="Clk" Function="" Connect="" X="-0.125" Y="0.1875" Color="#faebd7" Datatype="wire" Parent="Arm4" Datasize="1" Side="left" Width="20" Inout="input"/>
  <Port Height="20" Name="Rst_n" Function="" Connect="" X="-0.125" Y="0.3125" Color="#00ffff" Datatype="wire" Parent="Arm4" Datasize="1" Side="left" Width="20" Inout="input"/>
  <Port Height="20" Name="in_id" Function="" Connect="" X="-0.125" Y="0.4375" Color="#7fffd4" Datatype="wire" Parent="Arm4" Datasize="8" Side="left" Width="20" Inout="input"/>
  <Port Height="20" Name="Baud_Set_in" Function="" Connect="" X="-0.125" Y="0.6875" Color="#f0ffff" Datatype="wire" Parent="Arm4" Datasize="3" Side="left" Width="20" Inout="input"/>
  <Port Height="20" Name="uart_tx" Function="" Connect="" X="0.875" Y="0.1375" Color="#f5f5dc" Datatype="wire" Parent="Arm4" Datasize="1" Side="right" Width="20" Inout="output"/>
  <Port Height="20" Name="Tx_Done" Function="" Connect="arm_tx_done" X="0.875" Y="0.3375" Color="#ffe4c4" Datatype="wire" Parent="Arm4" Datasize="1" Side="right" Width="20" Inout="output"/>
  <Port Height="20" Name="uart_state" Function="" Connect="" X="0.875" Y="0.5375" Color="#b8860b" Datatype="wire" Parent="Arm4" Datasize="1" Side="right" Width="20" Inout="output"/>
  <Port Height="20" Name="in_cmd" Function="" Connect="" X="-0.125" Y="0.5625" Color="#ffebcd" Datatype="wire" Parent="Arm4" Datasize="1" Side="left" Width="20" Inout="input"/>
  <Port Height="20" Name="ARM_EN" Function="" Connect="" X="-0.125" Y="0.0625" Color="#0000ff" Datatype="wire" Parent="Arm4" Datasize="1" Side="left" Width="20" Inout="input"/>
 </Module>
 <Module Height="160" Name="Wheel_Instruction_Analysis5" Comment="" File="Current/Wheel_Instruction_Analysis.model" X="254.404" Y="347.294" Color="#d3d3d3" Code="&#x9;/*&#xa;&#x9;Readme&#xa;&#x9;convert 模块负责指令到读写操作的转换&#xa;&#x9;1.当来自 uart_cmd 的 cmdvalid 信号有效的时候， convert 模块会根据功能码（num_cmd）判断当前的操作模式以及实际读写的数据量。&#xa;&#x9;//num_cmd[7]为0代表写操作   num_cmd[3:0]表示数据长度&#xa;&#x9;2.如果是写操作，&#xa;&#x9;则将地址和待写入数据发送给前面章节中我们设计好的 I2C 控制器。&#xa;&#x9;为了让数据能够成功被 I2C 控制器接收，需要在传输每字节数据时，产生一个写请求信&#xa;&#x9;号给 I2C 控制器。同时，因为 I2C 控制器每次只支持单个字节的收发，所以我们需要在每写&#xa;&#x9;完 1 字节数据后等待 I2C 控制器的应答信号（ack），以确保数据成功写入。&#xa;&#x9;&#xa;&#x9;3.如果是读操作，除了将地址传输给 I2C 控制器外，在读取每 1 字节数据之前，都需要产&#xa;&#x9;生一次读请求信号。在 I2C 控制器对读请求信号进行响应后才能读去这 1 字节的数据，如此&#xa;&#x9;循环，直到读取完所需的数据量，并最终输出给多字节串口发送模块。&#xa;&#x9;&#xa;&#x9;3.定义 IDLE、&#xa;&#x9;DO_WR、 WAIT_WR_DONE、 DO_RD、 WAIT_RD_DONE 五个状态。&#xa;&#x9;让 IDLE 态等待 cmdvalid 信号，判断读写操作； &#xa;&#x9;DO_WR 态产生写请求信号、数据和地址； &#xa;&#x9;WAIT_WR_DONE 态判断写传输是否完成； &#xa;&#x9;DO_RD 态产生读请求信号与地址； &#xa;&#x9;WAIT_RD_DONE 态读取数据，并判断当前读操作是否成功。来实现以上设计目的。&#xa;&#x9;&#xa;&#x9;*/&#xa;&#x9;&#xa;&#x9;    reg motor_rd_err,motor_wr_err;  //高电平表示读取/写失败&#xa;&#x9;       &#xa;&#x9;&#x9;reg [2:0]state;&#x9;&#x9;&#xa;&#x9;    reg [6:0]data_cnt;&#x9;&#x9;//表示数据传输进程&#x9; &#xa;&#x9;&#x9; &#xa;&#x9;    localparam &#xa;&#x9;        IDLE = 0,&#xa;&#x9;        DO_WR = 1,&#xa;&#x9;        WAIT_WR_DONE  = 2,&#xa;&#x9;        DO_RD = 3,&#xa;&#x9;        WAIT_RD_DONE = 4;&#xa;&#xa;    &#x9;always@(posedge Clk)&#xa;        data_len &lt;= num_cmd[3:0];&#xa;&#x9;        &#xa;&#x9;    always@(posedge Clk or negedge Rst_n)&#xa;&#x9;    if(!Rst_n)begin&#xa;&#x9;        state &lt;= IDLE;&#xa;&#x9;        wrreg_req &lt;= 1'd0;&#xa;&#x9;        addr &lt;= 8'd0;&#xa;&#x9;        wrdata &lt;= 8'd0;&#xa;&#x9;        data_cnt &lt;= 7'd0;&#xa;&#x9;        motor_wr_err &lt;= 1'd0;&#xa;&#x9;        motor_wr_done &lt;= 1'd0;   &#xa;&#x9;        motor_rd_done &lt;= 1'd0;&#xa;&#x9;        motor_rd_err &lt;= 1'd0;&#xa;&#x9;        rdreg_req &lt;= 1'd0;   &#xa;&#x9;        motor_rddata &lt;= 32'd0;&#xa;&#x9;    end&#xa;&#x9;    else begin&#xa;&#x9;    case(state)&#xa;&#x9;        IDLE:&#xa;&#x9;            begin&#xa;&#x9;                wrreg_req &lt;= 1'd0;&#xa;&#x9;                addr &lt;= 8'd0;&#xa;&#x9;                wrdata &lt;= 8'd0;&#xa;&#x9;                data_cnt &lt;= 7'd0;&#xa;&#x9;                motor_wr_err &lt;= 1'd0;   &#xa;&#x9;                motor_rd_done &lt;= 1'd0;&#xa;&#x9;                motor_rd_err &lt;= 1'd0;&#xa;&#x9;                rdreg_req &lt;= 1'd0;   &#xa;&#x9;                if(cmd_valid &amp;&amp; !num_cmd[7])&#x9;&#x9;&#x9;//num_cmd[7]为0代表写操作&#xa;&#x9;                    state &lt;= DO_WR;&#xa;&#x9;                else if(cmd_valid &amp;&amp; num_cmd[7])begin&#xa;&#x9;                    state &lt;= DO_RD;&#xa;&#x9;                    motor_rddata &lt;= 32'd0;&#xa;&#x9;                end&#xa;&#x9;                else&#xa;&#x9;                    state &lt;= IDLE;&#xa;&#x9;            end&#xa;&#x9;                &#xa;&#x9;        DO_WR:&#xa;&#x9;            begin&#xa;&#x9;                wrreg_req &lt;= 1'd1;&#xa;&#x9;                addr &lt;= address;&#xa;&#x9;                state &lt;= WAIT_WR_DONE;&#xa;&#x9;                case(data_cnt)&#xa;&#x9;&#x9;&#xa;&#x9;                    0:wrdata &lt;= cmd_data[31:24];&#xa;&#x9;                    1:wrdata &lt;= cmd_data[23:16];&#xa;&#x9;                    2:wrdata &lt;= cmd_data[15:8];&#xa;&#x9;                    3:wrdata &lt;= cmd_data[7:0];&#xa;&#x9;                    default:wrdata &lt;= 0;&#xa;&#x9;                endcase&#xa;&#x9;            end&#xa;&#x9;            &#xa;&#x9;        WAIT_WR_DONE:&#xa;&#x9;            begin&#xa;&#x9;                wrreg_req &lt;= 1'd0;&#xa;&#x9;                if(RW_Done)begin&#xa;&#x9;                    if(!ack)begin   //ACK为0表示有正常应答&#xa;&#x9;                        if(data_cnt >= num_cmd - 1)begin&#xa;&#x9;                            state &lt;= IDLE;&#xa;&#x9;                            motor_wr_done &lt;= 1'd1;&#xa;&#x9;                            data_cnt &lt;= 0;&#xa;&#x9;                        end&#xa;&#x9;                        else begin&#xa;&#x9;                            state &lt;= DO_WR;&#xa;&#x9;                            data_cnt &lt;= data_cnt + 1'd1;    &#xa;&#x9;                        end           &#xa;&#x9;                    end&#xa;&#x9;                    else begin  //ACK为1表示无应答&#xa;&#x9;                        state &lt;= IDLE;&#xa;&#x9;                        motor_wr_err &lt;= 1'd1;                 &#xa;&#x9;                    end&#xa;&#x9;                end&#xa;&#x9;                else begin&#xa;&#x9;                    state &lt;= WAIT_WR_DONE;&#xa;&#x9;                    data_cnt &lt;= data_cnt;&#xa;&#x9;                end&#xa;&#x9;            end&#xa;&#x9;&#xa;&#x9;        DO_RD:&#xa;&#x9;            begin&#xa;&#x9;                rdreg_req &lt;= 1'd1;&#xa;&#x9;                state &lt;= WAIT_RD_DONE;&#xa;&#x9;                addr &lt;= address;&#xa;&#x9;            end  &#xa;&#x9;                      &#xa;&#x9;        WAIT_RD_DONE:&#xa;&#x9;            begin&#xa;&#x9;                rdreg_req &lt;= 1'd0;&#xa;&#x9;                if(RW_Done)begin&#xa;&#x9;                    if(!ack)begin   //ACK为0表示有正常应答&#xa;&#x9;                        case(data_cnt)&#xa;&#xa;&#x9;                            0:motor_rddata[31:24] &lt;= rddata;&#xa;&#x9;                            1:motor_rddata[23:16] &lt;= rddata;&#xa;&#x9;                            2:motor_rddata[15:8] &lt;= rddata;&#xa;&#x9;                            3:motor_rddata[7:0] &lt;= rddata;&#xa;&#x9;                            default:;&#xa;&#x9;                        endcase&#xa;&#x9;                        if(data_cnt >= (num_cmd &amp; 8'h7F) - 1)begin&#xa;&#x9;                            state &lt;= IDLE;&#xa;&#x9;                            motor_rd_done &lt;= 1'd1;&#xa;&#x9;                            data_cnt &lt;= 0;&#xa;&#x9;                        end&#xa;&#x9;                        else begin&#xa;&#x9;                            state &lt;= DO_RD;&#xa;&#x9;                            data_cnt &lt;= data_cnt + 1'd1;    &#xa;&#x9;                        end           &#xa;&#x9;                    end&#xa;&#x9;                    else begin  //ACK为1表示无应答&#xa;&#x9;                        state &lt;= IDLE;&#xa;&#x9;                        motor_rd_err &lt;= 1'd1;                 &#xa;&#x9;                    end&#xa;&#x9;                end&#xa;&#x9;                else begin&#xa;&#x9;                    state &lt;= WAIT_RD_DONE;&#xa;&#x9;                    data_cnt &lt;= data_cnt;&#xa;&#x9;                end&#xa;&#x9;            end&#xa;&#x9;            &#xa;&#x9;            default:state &lt;= IDLE;&#xa;&#x9;        endcase&#xa;&#x9;    end" Parent="Top_Arm_Motor" Class="Wheel_Instruction_Analysis" Include="" Type="model" Width="160" Parameters="">
  <Port Height="20" Name="Clk" Function="" Connect="" X="-0.125" Y="0.025" Color="#faebd7" Datatype="wire" Parent="Wheel_Instruction_Analysis5" Datasize="1" Side="left" Width="20" Inout="input"/>
  <Port Height="20" Name="Rst_n" Function="" Connect="" X="-0.125" Y="0.1125" Color="#00ffff" Datatype="wire" Parent="Wheel_Instruction_Analysis5" Datasize="1" Side="left" Width="20" Inout="input"/>
  <Port Height="20" Name="rddata" Function="" Connect=" " X="-0.125" Y="0.2" Color="#7fffd4" Datatype="wire" Parent="Wheel_Instruction_Analysis5" Datasize="8" Side="left" Width="20" Inout="input"/>
  <Port Height="20" Name="RW_Done" Function="" Connect="" X="-0.125" Y="0.2875" Color="#f0ffff" Datatype="wire" Parent="Wheel_Instruction_Analysis5" Datasize="1" Side="left" Width="20" Inout="input"/>
  <Port Height="20" Name="ack" Function="" Connect="" X="-0.125" Y="0.375" Color="#f5f5dc" Datatype="wire" Parent="Wheel_Instruction_Analysis5" Datasize="1" Side="left" Width="20" Inout="input"/>
  <Port Height="20" Name="address" Function="" Connect="" X="-0.125" Y="0.4625" Color="#ffe4c4" Datatype="wire" Parent="Wheel_Instruction_Analysis5" Datasize="8" Side="left" Width="20" Inout="input"/>
  <Port Height="20" Name="cmd_data" Function="" Connect="" X="-0.125" Y="0.55" Color="#b8860b" Datatype="wire" Parent="Wheel_Instruction_Analysis5" Datasize="32" Side="left" Width="20" Inout="input"/>
  <Port Height="20" Name="num_cmd" Function="" Connect="" X="-0.125" Y="0.6375" Color="#ffebcd" Datatype="wire" Parent="Wheel_Instruction_Analysis5" Datasize="8" Side="left" Width="20" Inout="input"/>
  <Port Height="20" Name="motor_rddata" Function="" Connect=" " X="0.875" Y="0.0375" Color="#0000ff" Datatype="reg" Parent="Wheel_Instruction_Analysis5" Datasize="32" Side="right" Width="20" Inout="output"/>
  <Port Height="20" Name="wrdata" Function="" Connect="" X="0.875" Y="0.1375" Color="#8a2be2" Datatype="reg" Parent="Wheel_Instruction_Analysis5" Datasize="32" Side="right" Width="20" Inout="output"/>
  <Port Height="20" Name="wrreg_req" Function="" Connect="" X="0.875" Y="0.2375" Color="#a52a2a" Datatype="reg" Parent="Wheel_Instruction_Analysis5" Datasize="1" Side="right" Width="20" Inout="output"/>
  <Port Height="20" Name="rdreg_req" Function="" Connect="" X="0.875" Y="0.3375" Color="#deb887" Datatype="reg" Parent="Wheel_Instruction_Analysis5" Datasize="1" Side="right" Width="20" Inout="output"/>
  <Port Height="20" Name="addr" Function="" Connect="" X="0.875" Y="0.4375" Color="#5f9ea0" Datatype="reg" Parent="Wheel_Instruction_Analysis5" Datasize="8" Side="right" Width="20" Inout="output"/>
  <Port Height="20" Name="motor_rd_done" Function="" Connect=" " X="0.875" Y="0.5375" Color="#d2691e" Datatype="reg" Parent="Wheel_Instruction_Analysis5" Datasize="1" Side="right" Width="20" Inout="output"/>
  <Port Height="20" Name="motor_wr_done" Function="" Connect="motor_wr_done" X="0.875" Y="0.6375" Color="#ff7f50" Datatype="reg" Parent="Wheel_Instruction_Analysis5" Datasize="1" Side="right" Width="20" Inout="output"/>
  <Port Height="20" Name="cmd_valid" Function="" Connect="" X="-0.125" Y="0.725" Color="#6495ed" Datatype="wire" Parent="Wheel_Instruction_Analysis5" Datasize="1" Side="left" Width="20" Inout="input"/>
  <Port Height="20" Name="data_len" Function="" Connect="" X="0.875" Y="0.7375" Color="#6495ed" Datatype="reg" Parent="Wheel_Instruction_Analysis5" Datasize="4" Side="right" Width="20" Inout="output"/>
 </Module>
 <Port Height="20" Name="Clk" Function="" X="-0.0222222" Y="0.125" Color="#faebd7" Datatype="wire" Parent="Top_Arm_Motor" Datasize="1" Side="left" Width="20" Inout="input"/>
 <Port Height="20" Name="Rst_n" Function="" X="-0.0222222" Y="0.266667" Color="#00ffff" Datatype="wire" Parent="Top_Arm_Motor" Datasize="1" Side="left" Width="20" Inout="input"/>
 <Port Height="20" Name="baud_set" Function="" X="-0.0222222" Y="0.408333" Color="#7fffd4" Datatype="wire" Parent="Top_Arm_Motor" Datasize="3" Side="left" Width="20" Inout="input"/>
 <Port Height="20" Name="uart_rx" Function="" X="-0.0222222" Y="0.55" Color="#f0ffff" Datatype="wire" Parent="Top_Arm_Motor" Datasize="1" Side="left" Width="20" Inout="input"/>
 <Port Height="20" Name="arm_uart_tx" Function="" X="0.977778" Y="0.183333" Color="#f5f5dc" Datatype="wire" Parent="Top_Arm_Motor" Datasize="1" Side="right" Width="20" Inout="output"/>
 <Port Height="20" Name="motor_i2c_sclk" Function="" X="0.977778" Y="0.383333" Color="#a52a2a" Datatype="wire" Parent="Top_Arm_Motor" Datasize="1" Side="right" Width="20" Inout="output"/>
 <Port Height="20" Name="motor_i2c_sdat" Function="" X="0.977778" Y="0.583333" Color="#deb887" Datatype="wire" Parent="Top_Arm_Motor" Datasize="1" Side="right" Width="20" Inout="inout"/>
 <Port Height="20" Name="Arm_Motor_EN" Function="" X="-0.0222222" Y="0.691667" Color="#ffebcd" Datatype="wire" Parent="Top_Arm_Motor" Datasize="1" Side="left" Width="20" Inout="input"/>
 <Wire Name="Top_Arm_Motor_Clk" To="Top_Arm_Motor#uart_byte_rx1>clk" Datatype="wire" Parent="Top_Arm_Motor" Datasize="1" From="Top_Arm_Motor>Clk"/>
 <Wire Name="Top_Arm_Motor_Rst_n" To="Top_Arm_Motor#uart_byte_rx1>reset_n" Datatype="wire" Parent="Top_Arm_Motor" Datasize="1" From="Top_Arm_Motor>Rst_n"/>
 <Wire Name="Top_Arm_Motor_Clk" To="Top_Arm_Motor#Bus_arm_motor2>Clk" Datatype="wire" Parent="Top_Arm_Motor" Datasize="1" From="Top_Arm_Motor>Clk"/>
 <Wire Name="Top_Arm_Motor_Clk" To="Top_Arm_Motor#Arm4>Clk" Datatype="wire" Parent="Top_Arm_Motor" Datasize="1" From="Top_Arm_Motor>Clk"/>
 <Wire Name="Top_Arm_Motor_Clk" To="Top_Arm_Motor#Wheel_Instruction_Analysis5>Clk" Datatype="wire" Parent="Top_Arm_Motor" Datasize="1" From="Top_Arm_Motor>Clk"/>
 <Wire Name="Top_Arm_Motor_Clk" To="Top_Arm_Motor#i2c_control_motor_plus3>Clk" Datatype="wire" Parent="Top_Arm_Motor" Datasize="1" From="Top_Arm_Motor>Clk"/>
 <Wire Name="Top_Arm_Motor_Rst_n" To="Top_Arm_Motor#Bus_arm_motor2>Rst_n" Datatype="wire" Parent="Top_Arm_Motor" Datasize="1" From="Top_Arm_Motor>Rst_n"/>
 <Wire Name="Top_Arm_Motor_Rst_n" To="Top_Arm_Motor#Arm4>Rst_n" Datatype="wire" Parent="Top_Arm_Motor" Datasize="1" From="Top_Arm_Motor>Rst_n"/>
 <Wire Name="Top_Arm_Motor_Rst_n" To="Top_Arm_Motor#Wheel_Instruction_Analysis5>Rst_n" Datatype="wire" Parent="Top_Arm_Motor" Datasize="1" From="Top_Arm_Motor>Rst_n"/>
 <Wire Name="Top_Arm_Motor_Rst_n" To="Top_Arm_Motor#i2c_control_motor_plus3>Rst_n" Datatype="wire" Parent="Top_Arm_Motor" Datasize="1" From="Top_Arm_Motor>Rst_n"/>
 <Wire Name="Top_Arm_Motor_baud_set" To="Top_Arm_Motor#uart_byte_rx1>baud_set" Datatype="wire" Parent="Top_Arm_Motor" Datasize="3" From="Top_Arm_Motor>baud_set"/>
 <Wire Name="Top_Arm_Motor_uart_rx" To="Top_Arm_Motor#uart_byte_rx1>uart_rx" Datatype="wire" Parent="Top_Arm_Motor" Datasize="1" From="Top_Arm_Motor>uart_rx"/>
 <Wire Name="Arm4_uart_tx" To="Top_Arm_Motor>arm_uart_tx" Datatype="wire" Parent="Top_Arm_Motor" Datasize="1" From="Top_Arm_Motor#Arm4>uart_tx"/>
 <Wire Name="i2c_control_motor_plus3_i2c_sclk" To="Top_Arm_Motor>motor_i2c_sclk" Datatype="wire" Parent="Top_Arm_Motor" Datasize="1" From="Top_Arm_Motor#i2c_control_motor_plus3>i2c_sclk"/>
 <Wire Name="i2c_control_motor_plus3_i2c_sdat" To="Top_Arm_Motor>motor_i2c_sdat" Datatype="wire" Parent="Top_Arm_Motor" Datasize="1" From="Top_Arm_Motor#i2c_control_motor_plus3>i2c_sdat"/>
 <Wire Name="uart_byte_rx1_data_byte" To="Top_Arm_Motor#Bus_arm_motor2>instruction_data" Datatype="wire" Parent="Top_Arm_Motor" Datasize="8" From="Top_Arm_Motor#uart_byte_rx1>data_byte"/>
 <Wire Name="uart_byte_rx1_rx_done" To="Top_Arm_Motor#Bus_arm_motor2>bus_rx_done" Datatype="wire" Parent="Top_Arm_Motor" Datasize="1" From="Top_Arm_Motor#uart_byte_rx1>rx_done"/>
 <Wire Name="Bus_arm_motor2_motor_id" To="Top_Arm_Motor#i2c_control_motor_plus3>device_id" Datatype="wire" Parent="Top_Arm_Motor" Datasize="8" From="Top_Arm_Motor#Bus_arm_motor2>motor_id"/>
 <Wire Name="Bus_arm_motor2_cmd_valid" To="Top_Arm_Motor#Wheel_Instruction_Analysis5>cmd_valid" Datatype="wire" Parent="Top_Arm_Motor" Datasize="1" From="Top_Arm_Motor#Bus_arm_motor2>cmd_valid"/>
 <Wire Name="Bus_arm_motor2_arm_id" To="Top_Arm_Motor#Arm4>in_id" Datatype="wire" Parent="Top_Arm_Motor" Datasize="8" From="Top_Arm_Motor#Bus_arm_motor2>arm_id"/>
 <Wire Name="Bus_arm_motor2_arm_cmd" To="Top_Arm_Motor#Arm4>in_cmd" Datatype="wire" Parent="Top_Arm_Motor" Datasize="1" From="Top_Arm_Motor#Bus_arm_motor2>arm_cmd"/>
 <Wire Name="Bus_arm_motor2_motor_reg_address" To="Top_Arm_Motor#Wheel_Instruction_Analysis5>address" Datatype="wire" Parent="Top_Arm_Motor" Datasize="8" From="Top_Arm_Motor#Bus_arm_motor2>motor_reg_address"/>
 <Wire Name="Bus_arm_motor2_motor_cmd_data" To="Top_Arm_Motor#Wheel_Instruction_Analysis5>cmd_data" Datatype="wire" Parent="Top_Arm_Motor" Datasize="32" From="Top_Arm_Motor#Bus_arm_motor2>motor_cmd_data"/>
 <Wire Name="Bus_arm_motor2_motor_num_cmd" To="Top_Arm_Motor#Wheel_Instruction_Analysis5>num_cmd" Datatype="wire" Parent="Top_Arm_Motor" Datasize="8" From="Top_Arm_Motor#Bus_arm_motor2>motor_num_cmd"/>
 <Wire Name="Wheel_Instruction_Analysis5_data_len" To="Top_Arm_Motor#i2c_control_motor_plus3>len" Datatype="wire" Parent="Top_Arm_Motor" Datasize="4" From="Top_Arm_Motor#Wheel_Instruction_Analysis5>data_len"/>
 <Wire Name="Wheel_Instruction_Analysis5_addr" To="Top_Arm_Motor#i2c_control_motor_plus3>addr" Datatype="wire" Parent="Top_Arm_Motor" Datasize="8" From="Top_Arm_Motor#Wheel_Instruction_Analysis5>addr"/>
 <Wire Name="Wheel_Instruction_Analysis5_wrreg_req" To="Top_Arm_Motor#i2c_control_motor_plus3>wrreg_req" Datatype="wire" Parent="Top_Arm_Motor" Datasize="1" From="Top_Arm_Motor#Wheel_Instruction_Analysis5>wrreg_req"/>
 <Wire Name="Wheel_Instruction_Analysis5_rdreg_req" To="Top_Arm_Motor#i2c_control_motor_plus3>rdreg_req" Datatype="wire" Parent="Top_Arm_Motor" Datasize="1" From="Top_Arm_Motor#Wheel_Instruction_Analysis5>rdreg_req"/>
 <Wire Name="Wheel_Instruction_Analysis5_wrdata" To="Top_Arm_Motor#Wheel_Instruction_Analysis5>wrdata" Datatype="wire" Parent="Top_Arm_Motor" Datasize="32" From="Top_Arm_Motor#i2c_control_motor_plus3>wrdata"/>
 <Wire Name="i2c_control_motor_plus3_RW_Done" To="Top_Arm_Motor#Wheel_Instruction_Analysis5>RW_Done" Datatype="wire" Parent="Top_Arm_Motor" Datasize="1" From="Top_Arm_Motor#i2c_control_motor_plus3>RW_Done"/>
 <Wire Name="i2c_control_motor_plus3_ack" To="Top_Arm_Motor#Wheel_Instruction_Analysis5>ack" Datatype="wire" Parent="Top_Arm_Motor" Datasize="1" From="Top_Arm_Motor#i2c_control_motor_plus3>ack"/>
 <Wire Name="Top_Arm_Motor_baud_set" To="Top_Arm_Motor#Arm4>Baud_Set_in" Datatype="wire" Parent="Top_Arm_Motor" Datasize="3" From="Top_Arm_Motor>baud_set"/>
 <Wire Name="Arm4_ARM_EN" To="Top_Arm_Motor>Arm_Motor_EN" Datatype="wire" Parent="Top_Arm_Motor" Datasize="1" From="Top_Arm_Motor#Arm4>ARM_EN"/>
 <Wire Name="Top_Arm_Motor_Arm_Motor_EN" To="Top_Arm_Motor#i2c_control_motor_plus3>MOTOR_EN" Datatype="wire" Parent="Top_Arm_Motor" Datasize="1" From="Top_Arm_Motor>Arm_Motor_EN"/>
</Module>
