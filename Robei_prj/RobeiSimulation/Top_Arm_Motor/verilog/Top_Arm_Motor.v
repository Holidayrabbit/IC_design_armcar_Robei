module Top_Arm_Motor(
	Clk,
	Rst_n,
	baud_set,
	uart_rx,
	arm_uart_tx,
	motor_i2c_sclk,
	motor_i2c_sdat,
	Arm_Motor_EN);

	//---Ports declearation: generated by Robei---
	input Clk;
	input Rst_n;
	input [2:0] baud_set;
	input uart_rx;
	output arm_uart_tx;
	output motor_i2c_sclk;
	inout motor_i2c_sdat;
	input Arm_Motor_EN;

	wire Clk;
	wire Rst_n;
	wire [2:0] baud_set;
	wire uart_rx;
	wire arm_uart_tx;
	wire motor_i2c_sclk;
	wire motor_i2c_sdat;
	wire Arm_Motor_EN;
	wire [7:0] uart_byte_rx1_data_byte;
	wire uart_byte_rx1_rx_done;
	wire [7:0] Bus_arm_motor2_motor_id;
	wire Bus_arm_motor2_cmd_valid;
	wire [7:0] Bus_arm_motor2_arm_id;
	wire Bus_arm_motor2_arm_cmd;
	wire [7:0] Bus_arm_motor2_motor_reg_address;
	wire [31:0] Bus_arm_motor2_motor_cmd_data;
	wire [7:0] Bus_arm_motor2_motor_num_cmd;
	wire [3:0] Wheel_Instruction_Analysis5_data_len;
	wire [7:0] Wheel_Instruction_Analysis5_addr;
	wire Wheel_Instruction_Analysis5_wrreg_req;
	wire Wheel_Instruction_Analysis5_rdreg_req;
	wire [31:0] Wheel_Instruction_Analysis5_wrdata;
	wire i2c_control_motor_plus3_RW_Done;
	wire i2c_control_motor_plus3_ack;

	//----Code starts here: integrated by Robei-----
	
	wire arm_tx_done;
	
	
	//---Module instantiation---
	uart_byte_rx uart_byte_rx1(
		.clk(Clk),
		.reset_n(Rst_n),
		.baud_set(baud_set),
		.uart_rx(uart_rx),
		.data_byte(uart_byte_rx1_data_byte),
		.rx_done(uart_byte_rx1_rx_done));

	Bus_arm_motor Bus_arm_motor2(
		.Clk(Clk),
		.Rst_n(Rst_n),
		.instruction_data(uart_byte_rx1_data_byte),
		.cmd_valid(Bus_arm_motor2_cmd_valid),
		.arm_id(Bus_arm_motor2_arm_id),
		.arm_cmd(Bus_arm_motor2_arm_cmd),
		.motor_reg_address(Bus_arm_motor2_motor_reg_address),
		.motor_cmd_data(Bus_arm_motor2_motor_cmd_data),
		.motor_num_cmd(Bus_arm_motor2_motor_num_cmd),
		.motor_id(Bus_arm_motor2_motor_id),
		.bus_rx_done(uart_byte_rx1_rx_done));

	i2c_control_motor_plus i2c_control_motor_plus3(
		.Clk(Clk),
		.Rst_n(Rst_n),
		.wrreg_req(Wheel_Instruction_Analysis5_wrreg_req),
		.rdreg_req(Wheel_Instruction_Analysis5_rdreg_req),
		.addr(Wheel_Instruction_Analysis5_addr),
		.wrdata(Wheel_Instruction_Analysis5_wrdata),
		.device_id(Bus_arm_motor2_motor_id),
		.rddata( ),
		.RW_Done(i2c_control_motor_plus3_RW_Done),
		.ack(i2c_control_motor_plus3_ack),
		.i2c_sclk(motor_i2c_sclk),
		.i2c_sdat(motor_i2c_sdat),
		.len(Wheel_Instruction_Analysis5_data_len),
		.MOTOR_EN(Arm_Motor_EN));

	Arm Arm4(
		.Clk(Clk),
		.Rst_n(Rst_n),
		.in_id(Bus_arm_motor2_arm_id),
		.Baud_Set_in(baud_set),
		.uart_tx(arm_uart_tx),
		.Tx_Done(arm_tx_done),
		.in_cmd(Bus_arm_motor2_arm_cmd),
		.ARM_EN(Arm_Motor_EN));

	Wheel_Instruction_Analysis Wheel_Instruction_Analysis5(
		.Clk(Clk),
		.Rst_n(Rst_n),
		.rddata( ),
		.RW_Done(i2c_control_motor_plus3_RW_Done),
		.ack(i2c_control_motor_plus3_ack),
		.address(Bus_arm_motor2_motor_reg_address),
		.cmd_data(Bus_arm_motor2_motor_cmd_data),
		.num_cmd(Bus_arm_motor2_motor_num_cmd),
		.motor_rddata( ),
		.wrdata(Wheel_Instruction_Analysis5_wrdata),
		.wrreg_req(Wheel_Instruction_Analysis5_wrreg_req),
		.rdreg_req(Wheel_Instruction_Analysis5_rdreg_req),
		.addr(Wheel_Instruction_Analysis5_addr),
		.motor_rd_done( ),
		.motor_wr_done(motor_wr_done),
		.cmd_valid(Bus_arm_motor2_cmd_valid),
		.data_len(Wheel_Instruction_Analysis5_data_len));

endmodule    //Top_Arm_Motor

