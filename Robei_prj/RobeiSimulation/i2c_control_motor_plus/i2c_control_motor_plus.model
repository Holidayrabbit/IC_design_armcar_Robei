<!DOCTYPE Robei>
<Module Width="900" Parameters="" Color="#d3d3d3" File="Current/i2c_control_motor_plus.model" Height="600" Type="module" Y="0" Class="module" Comment="" Name="i2c_control_motor_plus" Code="&#x9;&#x9;/*&#xa;&#x9;&#x9;Clk I 模块工作时钟， 50M 时钟&#xa;&#x9;&#x9;Rst_n I 模块复位信号&#xa;&#x9;&#x9;wrreg_req I 写请求信号&#xa;&#x9;&#x9;rdreg_req I 读请求信号&#xa;&#x9;&#x9;addr I 16 位地址输入&#xa;&#x9;&#x9;addr_mode I 输入地址模式， 0： 8 位的地址， 1： 16 位地址&#xa;&#x9;&#x9;&#xa;&#x9;&#x9;//每写入一次数据就会跳转到等待读完成状态，同时在这个状态里面会根据 addr_mode 来&#xa;&#x9;&#x9;//确定写的是 8 位地址，还是 16 位的地址，从而来控制 cnt 的值，后面回到读寄存器状态（ RD_REG）&#xa;&#x9;&#x9;//里面的时候就可以选择性跳过发送高 8 位全 0 来代替的地址了。&#xa;&#x9;&#x9;&#xa;&#x9;&#x9;wrdata I 总线发送的 8 位数据&#xa;&#x9;&#x9;rddata O 总线收到的 8 位数据&#xa;&#x9;&#x9;device_id I i2c 器件的 ID&#xa;&#x9;&#x9;RW_Done O 读/写完成标志&#xa;&#x9;&#x9;ack O 从机是否应答标志&#xa;&#x9;&#x9;i2c_sclk O i2c 时钟总线&#xa;&#x9;&#x9;i2c_sdat I /O i2c 数据总线&#xa;&#x9;&#x9;&#xa;&#x9;&#x9;*/&#xa;&#x9;&#x9;&#x9;reg [5:0]Cmd;&#xa;&#x9;&#x9;&#x9;reg [7:0]Tx_DATA;&#xa;&#x9;&#x9;&#x9;wire Trans_Done;&#xa;&#x9;&#x9;&#x9;wire ack_o;&#xa;&#x9;&#x9;&#x9;reg Go;&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;wire [7:0] reg_addr;&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;assign reg_addr = addr[7:0];&#xa;&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;wire [7:0]Rx_DATA;&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;localparam &#xa;&#x9;&#x9;&#x9;&#x9;WR   = 6'b000001,   //写请求&#xa;&#x9;&#x9;&#x9;&#x9;STA  = 6'b000010,   //起始位请求&#xa;&#x9;&#x9;&#x9;&#x9;RD   = 6'b000100,   //读请求&#xa;&#x9;&#x9;&#x9;&#x9;STO  = 6'b001000,   //停止位请求&#xa;&#x9;&#x9;&#x9;&#x9;ACK  = 6'b010000,   //应答位请求&#xa;&#x9;&#x9;&#x9;&#x9;NACK = 6'b100000;   //无应答请求&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;reg [6:0]state;&#xa;&#x9;&#x9;&#x9;reg [7:0]cnt;&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;localparam&#xa;&#x9;&#x9;&#x9;&#x9;IDLE         = 7'b0000001,   //空闲状态&#xa;&#x9;&#x9;&#x9;&#x9;WR_REG       = 7'b0000010,   //写寄存器状态&#xa;&#x9;&#x9;&#x9;&#x9;WAIT_WR_DONE = 7'b0000100,   //等待写寄存器完成状态&#xa;&#x9;&#x9;&#x9;&#x9;WR_REG_DONE  = 7'b0001000,   //写寄存器完成状态&#xa;&#x9;&#x9;&#x9;&#x9;RD_REG       = 7'b0010000,   //读寄存器状态&#xa;&#x9;&#x9;&#x9;&#x9;WAIT_RD_DONE = 7'b0100000,   //等待读寄存器完成状态&#xa;&#x9;&#x9;&#x9;&#x9;RD_REG_DONE  = 7'b1000000;   //读寄存器完成状态&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;always@(posedge Clk or negedge Rst_n)&#xa;&#x9;&#x9;&#x9;if(!Rst_n)begin&#xa;&#x9;&#x9;&#x9;&#x9;Cmd &lt;= 6'd0;&#xa;&#x9;&#x9;&#x9;&#x9;Tx_DATA &lt;= 8'd0;&#xa;&#x9;&#x9;&#x9;&#x9;Go &lt;= 1'b0;&#xa;&#x9;&#x9;&#x9;&#x9;rddata &lt;= 0;&#xa;&#x9;&#x9;&#x9;&#x9;state &lt;= IDLE;&#xa;&#x9;&#x9;&#x9;&#x9;ack &lt;= 0;&#xa;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;else begin&#xa;&#x9;&#x9;&#x9;&#x9;case(state)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;IDLE:&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cnt &lt;= 0;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ack &lt;= 0;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;RW_Done &lt;= 1'b0;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(wrreg_req&amp;&amp;MOTOR_EN)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= WR_REG;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else if(rdreg_req&amp;&amp;MOTOR_EN)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= RD_REG;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= IDLE;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;WR_REG:&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= WAIT_WR_DONE;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case(cnt)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;0:write_byte(WR | STA, device_id);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;1:write_byte(WR, reg_addr[7:0]);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;2:write_byte(WR, wrdata[31:24]);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;3:write_byte(WR, wrdata[23:16]);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;4:write_byte(WR, wrdata[15:8]);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;5:write_byte(WR | STO, wrdata[7:0]);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//只传1位数据&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;6:write_byte(WR | STO, wrdata[7:0]);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;default:;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endcase&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;WAIT_WR_DONE:&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Go &lt;= 1'b0; &#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(Trans_Done)begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ack &lt;= ack | ack_o;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case(cnt)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;0: begin cnt &lt;= 1; state &lt;= WR_REG;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;1: begin &#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if( len==4'd1) &#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;begin cnt &lt;= 6; state &lt;= WR_REG; end&#x9;&#x9;&#x9;//如果要写的数据只有&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else if( len==4'd4)&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//那么跳到6，写低8位数&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;begin cnt &lt;= 2; state &lt;= WR_REG; end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;2: begin cnt &lt;= 3; state &lt;= WR_REG; end&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;3: begin cnt &lt;= 4; state &lt;= WR_REG;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;4: begin cnt &lt;= 5; state &lt;= WR_REG;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;5: begin state &lt;= WR_REG_DONE;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;6: begin state &lt;= WR_REG_DONE;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;default:state &lt;= IDLE;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endcase&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;WR_REG_DONE:&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;RW_Done &lt;= 1'b1;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= IDLE;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;RD_REG:&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= WAIT_RD_DONE;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case(cnt)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;0:write_byte(WR | STA, device_id);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;1:write_byte(WR, reg_addr[15:8]);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;2:write_byte(WR, reg_addr[7:0]);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;3:write_byte(WR | STA, device_id | 8'd1);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;4:read_byte(RD | NACK | STO);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;default:;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endcase&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;WAIT_RD_DONE:&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Go &lt;= 1'b0; &#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(Trans_Done)begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(cnt &lt;= 3)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ack &lt;= ack | ack_o;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case(cnt)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;0: begin cnt &lt;= 1; state &lt;= RD_REG;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;1: &#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;begin &#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= RD_REG;&#xa;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cnt &lt;= 3;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;2: begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cnt &lt;= 3;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= RD_REG;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;3:begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cnt &lt;= 4;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= RD_REG;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;4:state &lt;= RD_REG_DONE;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;default:state &lt;= IDLE;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endcase&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;RD_REG_DONE:&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;RW_Done &lt;= 1'b1;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;rddata &lt;= Rx_DATA;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= IDLE;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;default:state &lt;= IDLE;&#xa;&#x9;&#x9;&#x9;&#x9;endcase&#xa;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;task read_byte;&#xa;&#x9;&#x9;&#x9;&#x9;input [5:0]Ctrl_Cmd;&#xa;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;Cmd &lt;= Ctrl_Cmd;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;Go &lt;= 1'b1; &#xa;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;endtask&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;task write_byte;&#xa;&#x9;&#x9;&#x9;&#x9;input [5:0]Ctrl_Cmd;&#xa;&#x9;&#x9;&#x9;&#x9;input [7:0]Wr_Byte_Data;&#xa;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;Cmd &lt;= Ctrl_Cmd;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;Tx_DATA &lt;= Wr_Byte_Data;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;Go &lt;= 1'b1; &#xa;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;endtask" X="0" Include="0" Parent="0">
 <Module Width="160" Parameters="" Color="#d3d3d3" File="Current/i2c_bit_shifter.model" Height="160" Type="model" Y="236.858" Class="i2c_bit_shifter" Comment="" Name="i2c_bit_shifter1" Code="&#x9;reg i2c_sdat_o;&#xa;&#xa;&#x9;//系统时钟采用50MHz&#xa;&#x9;parameter SYS_CLOCK = 50_000_000;&#xa;&#x9;//SCL总线时钟采用400kHz&#xa;&#x9;parameter SCL_CLOCK = 400_000;&#xa;&#x9;//产生时钟SCL计数器最大值&#xa;&#x9;localparam SCL_CNT_M = SYS_CLOCK/SCL_CLOCK/4 - 1;&#xa;&#x9;&#xa;&#x9;reg i2c_sdat_oe;&#xa;&#x9;&#xa;&#x9;localparam &#xa;&#x9;&#x9;WR   = 6'b000001,   //写请求&#xa;&#x9;&#x9;STA  = 6'b000010,   //起始位请求&#xa;&#x9;&#x9;RD   = 6'b000100,   //读请求&#xa;&#x9;&#x9;STO  = 6'b001000,   //停止位请求&#xa;&#x9;&#x9;ACK  = 6'b010000,   //应答位请求&#xa;&#x9;&#x9;NACK = 6'b100000;   //无应答请求&#xa;&#x9;&#x9;&#xa;&#x9;reg [19:0]div_cnt;&#xa;&#x9;reg en_div_cnt;&#xa;&#x9;always@(posedge Clk or negedge Rst_n)&#xa;&#x9;if(!Rst_n)&#xa;&#x9;&#x9;div_cnt &lt;= 20'd0;&#xa;&#x9;else if(en_div_cnt)begin&#xa;&#x9;&#x9;if(div_cnt &lt; SCL_CNT_M)&#xa;&#x9;&#x9;&#x9;div_cnt &lt;= div_cnt + 1'b1;&#xa;&#x9;&#x9;else&#xa;&#x9;&#x9;&#x9;div_cnt &lt;= 0;&#xa;&#x9;end&#xa;&#x9;else&#xa;&#x9;&#x9;div_cnt &lt;= 0;&#xa;&#xa;&#x9;wire sclk_plus = div_cnt == SCL_CNT_M;&#xa;&#x9;&#xa;&#x9;//assign i2c_sdat = i2c_sdat_oe?i2c_sdat_o:1'bz;&#xa;&#x9;assign i2c_sdat = !i2c_sdat_o &amp;&amp; i2c_sdat_oe ? 1'b0:1'bz;&#xa;&#x9;&#x9;&#xa;&#x9;reg [7:0]state;&#xa;&#x9;&#xa;&#x9;localparam&#xa;&#x9;&#x9;IDLE      = 8'b00000001,   //空闲状态&#xa;&#x9;&#x9;GEN_STA   = 8'b00000010,   //产生起始信号&#xa;&#x9;&#x9;WR_DATA   = 8'b00000100,   //写数据状态&#xa;&#x9;&#x9;RD_DATA   = 8'b00001000,   //读数据状态&#xa;&#x9;&#x9;CHECK_ACK = 8'b00010000,   //检测应答状态&#xa;&#x9;&#x9;GEN_ACK   = 8'b00100000,   //产生应答状态&#xa;&#x9;&#x9;GEN_STO   = 8'b01000000;   //产生停止信号&#xa;&#x9;&#x9;&#xa;&#x9;reg [4:0]cnt;&#xa;&#x9;&#x9;&#xa;&#x9;always@(posedge Clk or negedge Rst_n)&#xa;&#x9;if(!Rst_n)begin&#xa;&#x9;&#x9;Rx_DATA &lt;= 0;&#xa;&#x9;&#x9;i2c_sdat_oe &lt;= 1'd0;&#xa;&#x9;&#x9;en_div_cnt &lt;= 1'b0;&#xa;&#x9;&#x9;i2c_sdat_o &lt;= 1'd1;&#xa;&#x9;&#x9;Trans_Done &lt;= 1'b0;&#xa;&#x9;&#x9;ack_o &lt;= 0;&#xa;&#x9;&#x9;state &lt;= IDLE;&#xa;&#x9;&#x9;cnt &lt;= 0;&#xa;&#x9;end&#xa;&#x9;else begin&#xa;&#x9;&#x9;case(state)&#xa;&#x9;&#x9;&#x9;IDLE:&#xa;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;Trans_Done &lt;= 1'b0;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;i2c_sdat_oe &lt;= 1'd1;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;if(Go)begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;en_div_cnt &lt;= 1'b1;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(Cmd &amp; STA)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= GEN_STA;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else if(Cmd &amp; WR)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= WR_DATA;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else if(Cmd &amp; RD)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= RD_DATA;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= IDLE;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;else begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;en_div_cnt &lt;= 1'b0;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= IDLE;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;GEN_STA:&#xa;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;if(sclk_plus)begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(cnt == 3)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cnt &lt;= 0;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cnt &lt;= cnt + 1'b1;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case(cnt)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;0:begin i2c_sdat_o &lt;= 1; i2c_sdat_oe &lt;= 1'd1;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;1:begin i2c_sclk &lt;= 1;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;2:begin i2c_sdat_o &lt;= 0; i2c_sclk &lt;= 1;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;3:begin i2c_sclk &lt;= 0;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;default:begin i2c_sdat_o &lt;= 1; i2c_sclk &lt;= 1;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endcase&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(cnt == 3)begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(Cmd &amp; WR)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= WR_DATA;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else if(Cmd &amp; RD)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= RD_DATA;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;WR_DATA:&#xa;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;if(sclk_plus)begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(cnt == 31)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cnt &lt;= 0;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cnt &lt;= cnt + 1'b1;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case(cnt)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;0,4,8,12,16,20,24,28:begin i2c_sdat_o &lt;= Tx_DATA[7-cnt[4:2]]; i2c_sdat_oe &lt;= 1'd1;end&#x9;//set data;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;1,5,9,13,17,21,25,29:begin i2c_sclk &lt;= 1;end&#x9;//sclk posedge&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;2,6,10,14,18,22,26,30:begin i2c_sclk &lt;= 1;end&#x9;//sclk keep high&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;3,7,11,15,19,23,27,31:begin i2c_sclk &lt;= 0;end&#x9;//sclk negedge&#xa;/*&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;0 :begin i2c_sdat_o &lt;= Tx_DATA[7];end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;1 :begin i2c_sclk &lt;= 1;end&#x9;//sclk posedge&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;2 :begin i2c_sclk &lt;= 1;end&#x9;//sclk keep high&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;3 :begin i2c_sclk &lt;= 0;end&#x9;//sclk negedge&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;4 :begin i2c_sdat_o &lt;= Tx_DATA[6];end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;5 :begin i2c_sclk &lt;= 1;end&#x9;//sclk posedge&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;6 :begin i2c_sclk &lt;= 1;end&#x9;//sclk keep high&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;7 :begin i2c_sclk &lt;= 0;end&#x9;//sclk negedge&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;8 :begin i2c_sdat_o &lt;= Tx_DATA[5];end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;9 :begin i2c_sclk &lt;= 1;end&#x9;//sclk posedge&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;10:begin i2c_sclk &lt;= 1;end&#x9;//sclk keep high&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;11:begin i2c_sclk &lt;= 0;end&#x9;//sclk negedge&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;12:begin i2c_sdat_o &lt;= Tx_DATA[4];end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;13:begin i2c_sclk &lt;= 1;end&#x9;//sclk posedge&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;14:begin i2c_sclk &lt;= 1;end&#x9;//sclk keep high&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;15:begin i2c_sclk &lt;= 0;end&#x9;//sclk negedge&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;16:begin i2c_sdat_o &lt;= Tx_DATA[3];end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;17:begin i2c_sclk &lt;= 1;end&#x9;//sclk posedge&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;18:begin i2c_sclk &lt;= 1;end&#x9;//sclk keep high&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;19:begin i2c_sclk &lt;= 0;end&#x9;//sclk negedge&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;20:begin i2c_sdat_o &lt;= Tx_DATA[2];end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;21:begin i2c_sclk &lt;= 1;end&#x9;//sclk posedge&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;22:begin i2c_sclk &lt;= 1;end&#x9;//sclk keep high&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;23:begin i2c_sclk &lt;= 0;end&#x9;//sclk negedge&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;24:begin i2c_sdat_o &lt;= Tx_DATA[1];end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;25:begin i2c_sclk &lt;= 1;end&#x9;//sclk posedge&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;26:begin i2c_sclk &lt;= 1;end&#x9;//sclk keep high&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;27:begin i2c_sclk &lt;= 0;end&#x9;//sclk negedge&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;28:begin i2c_sdat_o &lt;= Tx_DATA[0];end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;29:begin i2c_sclk &lt;= 1;end&#x9;//sclk posedge&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;30:begin i2c_sclk &lt;= 1;end&#x9;//sclk keep high&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;31:begin i2c_sclk &lt;= 0;end&#x9;//sclk negedge&#xa;*/&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;default:begin i2c_sdat_o &lt;= 1; i2c_sclk &lt;= 1;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endcase&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(cnt == 31)begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= CHECK_ACK;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;RD_DATA:&#xa;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;if(sclk_plus)begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(cnt == 31)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cnt &lt;= 0;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cnt &lt;= cnt + 1'b1;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case(cnt)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;0,4,8,12,16,20,24,28:begin i2c_sdat_oe &lt;= 1'd0; i2c_sclk &lt;= 0;end&#x9;//set data;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;1,5,9,13,17,21,25,29:begin i2c_sclk &lt;= 1;end&#x9;//sclk posedge&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;2,6,10,14,18,22,26,30:begin i2c_sclk &lt;= 1; Rx_DATA &lt;= {Rx_DATA[6:0],i2c_sdat};end&#x9;//sclk keep high&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;3,7,11,15,19,23,27,31:begin i2c_sclk &lt;= 0;end&#x9;//sclk negedge&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;default:begin i2c_sdat_o &lt;= 1; i2c_sclk &lt;= 1;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endcase&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(cnt == 31)begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= GEN_ACK;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;CHECK_ACK:&#xa;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;if(sclk_plus)begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(cnt == 3)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cnt &lt;= 0;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cnt &lt;= cnt + 1'b1;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case(cnt)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;0:begin i2c_sdat_oe &lt;= 1'd0; i2c_sclk &lt;= 0;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;1:begin i2c_sclk &lt;= 1;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;2:begin ack_o &lt;= i2c_sdat; i2c_sclk &lt;= 1;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;3:begin i2c_sclk &lt;= 0;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;default:begin i2c_sdat_o &lt;= 1; i2c_sclk &lt;= 1;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endcase&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(cnt == 3)begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(Cmd &amp; STO)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= GEN_STO;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= IDLE;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Trans_Done &lt;= 1'b1;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;GEN_ACK:&#xa;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;if(sclk_plus)begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(cnt == 3)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cnt &lt;= 0;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cnt &lt;= cnt + 1'b1;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case(cnt)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;0:begin &#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;i2c_sdat_oe &lt;= 1'd1;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;i2c_sclk &lt;= 0;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(Cmd &amp; ACK)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;i2c_sdat_o &lt;= 1'b0;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else if(Cmd &amp; NACK)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;i2c_sdat_o &lt;= 1'b1;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;1:begin i2c_sclk &lt;= 1;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;2:begin i2c_sclk &lt;= 1;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;3:begin i2c_sclk &lt;= 0;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;default:begin i2c_sdat_o &lt;= 1; i2c_sclk &lt;= 1;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endcase&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(cnt == 3)begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(Cmd &amp; STO)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= GEN_STO;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= IDLE;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Trans_Done &lt;= 1'b1;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;GEN_STO:&#xa;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;if(sclk_plus)begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(cnt == 3)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cnt &lt;= 0;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cnt &lt;= cnt + 1'b1;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case(cnt)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;0:begin i2c_sdat_o &lt;= 0; i2c_sdat_oe &lt;= 1'd1;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;1:begin i2c_sclk &lt;= 1;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;2:begin i2c_sdat_o &lt;= 1; i2c_sclk &lt;= 1;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;3:begin i2c_sclk &lt;= 1;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;default:begin i2c_sdat_o &lt;= 1; i2c_sclk &lt;= 1;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endcase&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(cnt == 3)begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Trans_Done &lt;= 1'b1;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= IDLE;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;default:state &lt;= IDLE;&#xa;&#x9;&#x9;endcase&#xa;&#x9;end&#xa;&#xa;&#xa;" X="345.229" Include="" Parent="i2c_control_motor_plus">
  <Port Width="20" Color="#faebd7" Connect="" Height="20" Inout="input" Y="0.075" Side="left" Name="Clk" X="-0.125" Datatype="wire" Datasize="1" Parent="i2c_bit_shifter1" Function=""/>
  <Port Width="20" Color="#00ffff" Connect="" Height="20" Inout="input" Y="0.2125" Side="left" Name="Rst_n" X="-0.125" Datatype="wire" Datasize="1" Parent="i2c_bit_shifter1" Function=""/>
  <Port Width="20" Color="#7fffd4" Connect="Cmd" Height="20" Inout="input" Y="0.35" Side="left" Name="Cmd" X="-0.125" Datatype="wire" Datasize="6" Parent="i2c_bit_shifter1" Function=""/>
  <Port Width="30" Color="#f0ffff" Connect="Go" Height="30" Inout="input" Y="0.45625" Side="left" Name="Go" X="-0.15625" Datatype="wire" Datasize="1" Parent="i2c_bit_shifter1" Function=""/>
  <Port Width="20" Color="#f5f5dc" Connect="Tx_DATA" Height="20" Inout="input" Y="0.625" Side="left" Name="Tx_DATA" X="-0.125" Datatype="wire" Datasize="8" Parent="i2c_bit_shifter1" Function=""/>
  <Port Width="20" Color="#ffe4c4" Connect="Rx_DATA" Height="20" Inout="output" Y="0.075" Side="right" Name="Rx_DATA" X="0.875" Datatype="reg" Datasize="8" Parent="i2c_bit_shifter1" Function=""/>
  <Port Width="20" Color="#b8860b" Connect="Trans_Done" Height="20" Inout="output" Y="0.2125" Side="right" Name="Trans_Done" X="0.875" Datatype="reg" Datasize="1" Parent="i2c_bit_shifter1" Function=""/>
  <Port Width="20" Color="#ffebcd" Connect="ack_o" Height="20" Inout="output" Y="0.35" Side="right" Name="ack_o" X="0.875" Datatype="reg" Datasize="1" Parent="i2c_bit_shifter1" Function=""/>
  <Port Width="20" Color="#0000ff" Connect="" Height="20" Inout="output" Y="0.4875" Side="right" Name="i2c_sclk" X="0.875" Datatype="reg" Datasize="1" Parent="i2c_bit_shifter1" Function=""/>
  <Port Width="20" Color="#8a2be2" Connect="" Height="20" Inout="inout" Y="0.625" Side="right" Name="i2c_sdat" X="0.875" Datatype="wire" Datasize="1" Parent="i2c_bit_shifter1" Function=""/>
 </Module>
 <Port Width="20" Color="#faebd7" Height="20" Inout="input" Y="0.0733333" Side="left" Name="Clk" X="-0.0222222" Datatype="wire" Datasize="1" Parent="i2c_control_motor_plus" Function=""/>
 <Port Width="20" Color="#00ffff" Height="20" Inout="input" Y="0.163333" Side="left" Name="Rst_n" X="-0.0222222" Datatype="wire" Datasize="1" Parent="i2c_control_motor_plus" Function=""/>
 <Port Width="20" Color="#7fffd4" Height="20" Inout="input" Y="0.253333" Side="left" Name="wrreg_req" X="-0.0222222" Datatype="wire" Datasize="1" Parent="i2c_control_motor_plus" Function=""/>
 <Port Width="20" Color="#f0ffff" Height="20" Inout="input" Y="0.343333" Side="left" Name="rdreg_req" X="-0.0222222" Datatype="wire" Datasize="1" Parent="i2c_control_motor_plus" Function=""/>
 <Port Width="20" Color="#f5f5dc" Height="20" Inout="input" Y="0.433333" Side="left" Name="addr" X="-0.0222222" Datatype="wire" Datasize="8" Parent="i2c_control_motor_plus" Function=""/>
 <Port Width="20" Color="#b8860b" Height="20" Inout="input" Y="0.523333" Side="left" Name="wrdata" X="-0.0222222" Datatype="wire" Datasize="32" Parent="i2c_control_motor_plus" Function="write_data "/>
 <Port Width="20" Color="#ffebcd" Height="20" Inout="input" Y="0.613333" Side="left" Name="device_id" X="-0.0222222" Datatype="wire" Datasize="8" Parent="i2c_control_motor_plus" Function="drive_addr "/>
 <Port Width="20" Color="#0000ff" Height="20" Inout="output" Y="0.125" Side="right" Name="rddata" X="0.977778" Datatype="reg" Datasize="8" Parent="i2c_control_motor_plus" Function=""/>
 <Port Width="20" Color="#8a2be2" Height="20" Inout="output" Y="0.266667" Side="right" Name="RW_Done" X="0.977778" Datatype="reg" Datasize="1" Parent="i2c_control_motor_plus" Function=""/>
 <Port Width="20" Color="#a52a2a" Height="20" Inout="output" Y="0.408333" Side="right" Name="ack" X="0.977778" Datatype="reg" Datasize="1" Parent="i2c_control_motor_plus" Function=""/>
 <Port Width="20" Color="#deb887" Height="20" Inout="output" Y="0.55" Side="right" Name="i2c_sclk" X="0.977778" Datatype="wire" Datasize="1" Parent="i2c_control_motor_plus" Function=""/>
 <Port Width="20" Color="#5f9ea0" Height="20" Inout="inout" Y="0.691667" Side="right" Name="i2c_sdat" X="0.977778" Datatype="wire" Datasize="1" Parent="i2c_control_motor_plus" Function=""/>
 <Port Width="20" Color="#5f9ea0" Height="20" Inout="input" Y="0.703333" Side="left" Name="len" X="-0.0222222" Datatype="wire" Datasize="4" Parent="i2c_control_motor_plus" Function=""/>
 <Port Width="20" Color="#7fff00" Height="20" Inout="input" Y="0.793333" Side="left" Name="MOTOR_EN" X="-0.0222222" Datatype="wire" Datasize="1" Parent="i2c_control_motor_plus" Function=""/>
 <Wire To="i2c_control_motor_plus>i2c_sclk" From="i2c_control_motor_plus#i2c_bit_shifter1>i2c_sclk" Name="i2c_bit_shifter1_i2c_sclk" Datatype="wire" Datasize="1" Parent="i2c_control_motor_plus"/>
 <Wire To="i2c_control_motor_plus>i2c_sdat" From="i2c_control_motor_plus#i2c_bit_shifter1>i2c_sdat" Name="i2c_bit_shifter1_i2c_sdat" Datatype="wire" Datasize="1" Parent="i2c_control_motor_plus"/>
 <Wire To="i2c_control_motor_plus>Clk" From="i2c_control_motor_plus#i2c_bit_shifter1>Clk" Name="i2c_bit_shifter1_Clk" Datatype="wire" Datasize="1" Parent="i2c_control_motor_plus"/>
 <Wire To="i2c_control_motor_plus>Rst_n" From="i2c_control_motor_plus#i2c_bit_shifter1>Rst_n" Name="i2c_bit_shifter1_Rst_n" Datatype="wire" Datasize="1" Parent="i2c_control_motor_plus"/>
</Module>
