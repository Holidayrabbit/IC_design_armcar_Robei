<!DOCTYPE Robei>
<Module Height="600" Name="i2c_control_motor_plus_tb" Parent="0" X="0" Color="#d3d3d3" Class="module" Code="&#xa;&#xa;pullup PUP(i2c_sdat);&#xa;&#xa;&#x9;initial Clk = 1;&#xa;&#x9;always #10 Clk = ~Clk;&#xa;&#x9;&#xa;&#x9;initial begin&#xa;&#x9;&#x9;Rst_n = 0;&#xa;&#x9;&#x9;rdreg_req = 0;&#xa;&#x9;&#x9;wrreg_req = 0;&#xa;&#x9;&#x9;#2001;&#xa;&#x9;&#x9;Rst_n = 1;&#xa;&#x9;&#x9;#2000;&#xa;&#x9;&#x9;&#xa;&#x9;&#x9;write_one_byte(8'h34,8'h0A,32'hd1d1d1d1);&#xa;&#x9;&#x9;write_one_byte(8'hA0,8'h0B,32'hd2d2d2d2);&#xa;&#xa;&#xa;&#xa;&#x9;&#x9;$finish;&#x9;&#xa;&#x9;end&#xa;&#x9;&#xa;&#x9;task write_one_byte;&#xa;&#x9;&#x9;input [7:0]id;&#xa;&#x9;&#x9;input [7:0]mem_address; &#xa;&#x9;&#x9;input [31:0]data;&#xa;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;addr = mem_address;&#xa;&#x9;&#x9;&#x9;device_id = id;&#xa;&#x9;&#x9;&#x9;wrdata = data;&#xa;&#x9;&#x9;&#x9;wrreg_req = 1;&#xa;&#x9;&#x9;&#x9;#20;&#xa;&#x9;&#x9;&#x9;wrreg_req = 0;&#xa;&#x9;&#x9;&#x9;@(posedge RW_Done);&#xa;&#x9;&#x9;&#x9;#500;&#xa;&#x9;&#x9;end&#xa;&#x9;endtask&#xa;&#x9;/*&#xa;&#x9;task read_one_byte;&#xa;&#x9;&#x9;input [7:0]id;&#xa;&#x9;&#x9;input [7:0]mem_address; &#xa;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;addr = mem_address;&#xa;&#x9;&#x9;&#x9;device_id = id;&#xa;&#x9;&#x9;&#x9;rdreg_req = 1;&#xa;&#x9;&#x9;&#x9;#20;&#xa;&#x9;&#x9;&#x9;rdreg_req = 0;&#xa;&#x9;&#x9;&#x9;@(posedge RW_Done);&#xa;&#x9;&#x9;&#x9;#5000;&#xa;&#x9;&#x9;end&#xa;&#x9;endtask&#xa;*/&#xa;" Comment="" Time_Scale="" Type="testbench" Width="900" Y="0" File="Current/i2c_control_motor_plus_tb.test" Include="">
 <Module Height="202" Name="i2c_control_motor_plus3" Parent="i2c_control_motor_plus_tb" X="355.14" Color="#d3d3d3" Class="i2c_control_motor_plus" Code="&#x9;&#x9;/*&#xa;&#x9;&#x9;Clk I 模块工作时钟， 50M 时钟&#xa;&#x9;&#x9;Rst_n I 模块复位信号&#xa;&#x9;&#x9;wrreg_req I 写请求信号&#xa;&#x9;&#x9;rdreg_req I 读请求信号&#xa;&#x9;&#x9;addr I 16 位地址输入&#xa;&#x9;&#x9;addr_mode I 输入地址模式， 0： 8 位的地址， 1： 16 位地址&#xa;&#x9;&#x9;&#xa;&#x9;&#x9;//每写入一次数据就会跳转到等待读完成状态，同时在这个状态里面会根据 addr_mode 来&#xa;&#x9;&#x9;//确定写的是 8 位地址，还是 16 位的地址，从而来控制 cnt 的值，后面回到读寄存器状态（ RD_REG）&#xa;&#x9;&#x9;//里面的时候就可以选择性跳过发送高 8 位全 0 来代替的地址了。&#xa;&#x9;&#x9;&#xa;&#x9;&#x9;wrdata I 总线发送的 8 位数据&#xa;&#x9;&#x9;rddata O 总线收到的 8 位数据&#xa;&#x9;&#x9;device_id I i2c 器件的 ID&#xa;&#x9;&#x9;RW_Done O 读/写完成标志&#xa;&#x9;&#x9;ack O 从机是否应答标志&#xa;&#x9;&#x9;i2c_sclk O i2c 时钟总线&#xa;&#x9;&#x9;i2c_sdat I /O i2c 数据总线&#xa;&#x9;&#x9;&#xa;&#x9;&#x9;*/&#xa;&#x9;&#x9;&#x9;reg [5:0]Cmd;&#xa;&#x9;&#x9;&#x9;reg [7:0]Tx_DATA;&#xa;&#x9;&#x9;&#x9;wire Trans_Done;&#xa;&#x9;&#x9;&#x9;wire ack_o;&#xa;&#x9;&#x9;&#x9;reg Go;&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;wire [7:0] reg_addr;&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;assign reg_addr = addr[7:0];&#xa;&#x9;&#x9;&#x9;assign data_len = len[3:0];&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;wire [7:0]Rx_DATA;&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;localparam &#xa;&#x9;&#x9;&#x9;&#x9;WR   = 6'b000001,   //写请求&#xa;&#x9;&#x9;&#x9;&#x9;STA  = 6'b000010,   //起始位请求&#xa;&#x9;&#x9;&#x9;&#x9;RD   = 6'b000100,   //读请求&#xa;&#x9;&#x9;&#x9;&#x9;STO  = 6'b001000,   //停止位请求&#xa;&#x9;&#x9;&#x9;&#x9;ACK  = 6'b010000,   //应答位请求&#xa;&#x9;&#x9;&#x9;&#x9;NACK = 6'b100000;   //无应答请求&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;reg [6:0]state;&#xa;&#x9;&#x9;&#x9;reg [7:0]cnt;&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;localparam&#xa;&#x9;&#x9;&#x9;&#x9;IDLE         = 7'b0000001,   //空闲状态&#xa;&#x9;&#x9;&#x9;&#x9;WR_REG       = 7'b0000010,   //写寄存器状态&#xa;&#x9;&#x9;&#x9;&#x9;WAIT_WR_DONE = 7'b0000100,   //等待写寄存器完成状态&#xa;&#x9;&#x9;&#x9;&#x9;WR_REG_DONE  = 7'b0001000,   //写寄存器完成状态&#xa;&#x9;&#x9;&#x9;&#x9;RD_REG       = 7'b0010000,   //读寄存器状态&#xa;&#x9;&#x9;&#x9;&#x9;WAIT_RD_DONE = 7'b0100000,   //等待读寄存器完成状态&#xa;&#x9;&#x9;&#x9;&#x9;RD_REG_DONE  = 7'b1000000;   //读寄存器完成状态&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;always@(posedge Clk or negedge Rst_n)&#xa;&#x9;&#x9;&#x9;if(!Rst_n)begin&#xa;&#x9;&#x9;&#x9;&#x9;Cmd &lt;= 6'd0;&#xa;&#x9;&#x9;&#x9;&#x9;Tx_DATA &lt;= 8'd0;&#xa;&#x9;&#x9;&#x9;&#x9;Go &lt;= 1'b0;&#xa;&#x9;&#x9;&#x9;&#x9;rddata &lt;= 0;&#xa;&#x9;&#x9;&#x9;&#x9;state &lt;= IDLE;&#xa;&#x9;&#x9;&#x9;&#x9;ack &lt;= 0;&#xa;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;else begin&#xa;&#x9;&#x9;&#x9;&#x9;case(state)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;IDLE:&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cnt &lt;= 0;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ack &lt;= 0;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;RW_Done &lt;= 1'b0;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(wrreg_req)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= WR_REG;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else if(rdreg_req)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= RD_REG;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= IDLE;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;WR_REG:&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= WAIT_WR_DONE;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case(cnt)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;0:write_byte(WR | STA, device_id);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;1:write_byte(WR, reg_addr[7:0]);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;2:write_byte(WR, wrdata[31:24]);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;3:write_byte(WR, wrdata[23:16]);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;4:write_byte(WR, wrdata[15:8]);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;5:write_byte(WR | STO, wrdata[7:0]);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//只传1位数据&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;6:write_byte(WR | STO, wrdata[7:0]);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;default:;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endcase&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;WAIT_WR_DONE:&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Go &lt;= 1'b0; &#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(Trans_Done)begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ack &lt;= ack | ack_o;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case(cnt)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;0: begin cnt &lt;= 1; state &lt;= WR_REG;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;1: begin &#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(data_len==4'd1) &#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;begin cnt &lt;= 6; state &lt;= WR_REG; end&#x9;&#x9;&#x9;//如果要写的数据只有&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else if(data_len==4'd4)&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//那么跳到6，写低8位数&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;begin cnt &lt;= 2; state &lt;= WR_REG; end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;2: begin cnt &lt;= 3; state &lt;= WR_REG; end&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;3: begin cnt &lt;= 4; state &lt;= WR_REG;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;4: begin cnt &lt;= 5; state &lt;= WR_REG;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;5: begin state &lt;= WR_REG_DONE;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;6: begin state &lt;= WR_REG_DONE;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;default:state &lt;= IDLE;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endcase&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;WR_REG_DONE:&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;RW_Done &lt;= 1'b1;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= IDLE;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;RD_REG:&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= WAIT_RD_DONE;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case(cnt)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;0:write_byte(WR | STA, device_id);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;1:write_byte(WR, reg_addr[15:8]);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;2:write_byte(WR, reg_addr[7:0]);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;3:write_byte(WR | STA, device_id | 8'd1);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;4:read_byte(RD | NACK | STO);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;default:;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endcase&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;WAIT_RD_DONE:&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Go &lt;= 1'b0; &#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(Trans_Done)begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(cnt &lt;= 3)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ack &lt;= ack | ack_o;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case(cnt)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;0: begin cnt &lt;= 1; state &lt;= RD_REG;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;1: &#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;begin &#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= RD_REG;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(addr_mode)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cnt &lt;= 2; &#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cnt &lt;= 3;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;2: begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cnt &lt;= 3;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= RD_REG;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;3:begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cnt &lt;= 4;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= RD_REG;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;4:state &lt;= RD_REG_DONE;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;default:state &lt;= IDLE;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endcase&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;RD_REG_DONE:&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;RW_Done &lt;= 1'b1;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;rddata &lt;= Rx_DATA;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= IDLE;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;default:state &lt;= IDLE;&#xa;&#x9;&#x9;&#x9;&#x9;endcase&#xa;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;task read_byte;&#xa;&#x9;&#x9;&#x9;&#x9;input [5:0]Ctrl_Cmd;&#xa;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;Cmd &lt;= Ctrl_Cmd;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;Go &lt;= 1'b1; &#xa;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;endtask&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;task write_byte;&#xa;&#x9;&#x9;&#x9;&#x9;input [5:0]Ctrl_Cmd;&#xa;&#x9;&#x9;&#x9;&#x9;input [7:0]Wr_Byte_Data;&#xa;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;Cmd &lt;= Ctrl_Cmd;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;Tx_DATA &lt;= Wr_Byte_Data;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;Go &lt;= 1'b1; &#xa;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;endtask" Comment="" Type="model" Width="276" Y="115.069" File="Current/i2c_control_motor_plus.model" Include="0" Parameters="">
  <Port Height="20" Datasize="1" Name="Clk" Parent="i2c_control_motor_plus3" X="-0.0724638" Color="#faebd7" Function="" Datatype="wire" Width="20" Side="left" Inout="input" Connect="" Y="0.128713"/>
  <Port Height="20" Datasize="1" Name="Rst_n" Parent="i2c_control_motor_plus3" X="-0.0724638" Color="#00ffff" Function="" Datatype="wire" Width="20" Side="left" Inout="input" Connect="" Y="0.217822"/>
  <Port Height="20" Datasize="1" Name="wrreg_req" Parent="i2c_control_motor_plus3" X="-0.0724638" Color="#7fffd4" Function="" Datatype="wire" Width="20" Side="left" Inout="input" Connect="" Y="0.306931"/>
  <Port Height="20" Datasize="1" Name="rdreg_req" Parent="i2c_control_motor_plus3" X="-0.0724638" Color="#f0ffff" Function="" Datatype="wire" Width="20" Side="left" Inout="input" Connect="" Y="0.39604"/>
  <Port Height="20" Datasize="8" Name="addr" Parent="i2c_control_motor_plus3" X="-0.0724638" Color="#f5f5dc" Function="" Datatype="wire" Width="20" Side="left" Inout="input" Connect="" Y="0.485149"/>
  <Port Height="20" Datasize="32" Name="wrdata" Parent="i2c_control_motor_plus3" X="-0.0724638" Color="#b8860b" Function="write_data " Datatype="wire" Width="20" Side="left" Inout="input" Connect="" Y="0.574257"/>
  <Port Height="20" Datasize="8" Name="device_id" Parent="i2c_control_motor_plus3" X="-0.0724638" Color="#ffebcd" Function="drive_addr " Datatype="wire" Width="20" Side="left" Inout="input" Connect="" Y="0.663366"/>
  <Port Height="20" Datasize="8" Name="rddata" Parent="i2c_control_motor_plus3" X="0.927536" Color="#0000ff" Function="" Datatype="reg" Width="20" Side="right" Inout="output" Connect="" Y="0.0891089"/>
  <Port Height="20" Datasize="1" Name="RW_Done" Parent="i2c_control_motor_plus3" X="0.927536" Color="#8a2be2" Function="" Datatype="reg" Width="20" Side="right" Inout="output" Connect="" Y="0.227723"/>
  <Port Height="20" Datasize="1" Name="ack" Parent="i2c_control_motor_plus3" X="0.927536" Color="#a52a2a" Function="" Datatype="reg" Width="20" Side="right" Inout="output" Connect="" Y="0.366337"/>
  <Port Height="20" Datasize="1" Name="i2c_sclk" Parent="i2c_control_motor_plus3" X="0.927536" Color="#deb887" Function="" Datatype="wire" Width="20" Side="right" Inout="output" Connect="" Y="0.50495"/>
  <Port Height="20" Datasize="1" Name="i2c_sdat" Parent="i2c_control_motor_plus3" X="0.927536" Color="#5f9ea0" Function="" Datatype="wire" Width="20" Side="right" Inout="inout" Connect="" Y="0.643564"/>
  <Port Height="20" Datasize="4" Name="len" Parent="i2c_control_motor_plus3" X="-0.0724638" Color="#5f9ea0" Function="" Datatype="wire" Width="20" Side="left" Inout="input" Connect="4'd4" Y="0.752475"/>
  <Port Height="20" Datasize="1" Name="MOTOR_EN" Parent="i2c_control_motor_plus3" X="-0.0724638" Color="#7fff00" Function="" Datatype="wire" Width="20" Side="left" Inout="input" Connect="1'b1" Y="0.039604"/>
 </Module>
 <Port Height="20" Datasize="1" Name="Clk" Parent="i2c_control_motor_plus_tb" X="-0.0222222" Color="#faebd7" Function="" Datatype="reg" Width="20" Side="left" Inout="input" Y="0.0933333"/>
 <Port Height="20" Datasize="1" Name="Rst_n" Parent="i2c_control_motor_plus_tb" X="-0.0222222" Color="#00ffff" Function="" Datatype="reg" Width="20" Side="left" Inout="input" Y="0.203333"/>
 <Port Height="20" Datasize="1" Name="wrreg_req" Parent="i2c_control_motor_plus_tb" X="-0.0222222" Color="#7fffd4" Function="" Datatype="reg" Width="20" Side="left" Inout="input" Y="0.313333"/>
 <Port Height="20" Datasize="1" Name="rdreg_req" Parent="i2c_control_motor_plus_tb" X="-0.0222222" Color="#f0ffff" Function="" Datatype="reg" Width="20" Side="left" Inout="input" Y="0.423333"/>
 <Port Height="20" Datasize="8" Name="addr" Parent="i2c_control_motor_plus_tb" X="-0.0222222" Color="#f5f5dc" Function="" Datatype="reg" Width="20" Side="left" Inout="input" Y="0.533333"/>
 <Port Height="20" Datasize="32" Name="wrdata" Parent="i2c_control_motor_plus_tb" X="-0.0222222" Color="#b8860b" Function="" Datatype="reg" Width="20" Side="left" Inout="input" Y="0.643333"/>
 <Port Height="20" Datasize="8" Name="device_id" Parent="i2c_control_motor_plus_tb" X="-0.0222222" Color="#ffebcd" Function="" Datatype="reg" Width="20" Side="left" Inout="input" Y="0.753333"/>
 <Port Height="20" Datasize="8" Name="rddata" Parent="i2c_control_motor_plus_tb" X="0.977778" Color="#0000ff" Function="" Datatype="wire" Width="20" Side="right" Inout="output" Y="0.125"/>
 <Port Height="20" Datasize="1" Name="RW_Done" Parent="i2c_control_motor_plus_tb" X="0.977778" Color="#8a2be2" Function="" Datatype="wire" Width="20" Side="right" Inout="output" Y="0.266667"/>
 <Port Height="20" Datasize="1" Name="ack" Parent="i2c_control_motor_plus_tb" X="0.977778" Color="#a52a2a" Function="" Datatype="wire" Width="20" Side="right" Inout="output" Y="0.408333"/>
 <Port Height="20" Datasize="1" Name="i2c_sclk" Parent="i2c_control_motor_plus_tb" X="0.977778" Color="#deb887" Function="" Datatype="wire" Width="20" Side="right" Inout="output" Y="0.55"/>
 <Port Height="20" Datasize="1" Name="i2c_sdat" Parent="i2c_control_motor_plus_tb" X="0.977778" Color="#5f9ea0" Function="" Datatype="wire" Width="20" Side="right" Inout="inout" Y="0.691667"/>
 <Wire Datasize="1" Name="i2c_control_tb_Clk" Parent="i2c_control_motor_plus_tb" To="i2c_control_motor_plus_tb#i2c_control_motor_plus3>Clk" Datatype="wire" From="i2c_control_motor_plus_tb>Clk"/>
 <Wire Datasize="1" Name="i2c_control_tb_Rst_n" Parent="i2c_control_motor_plus_tb" To="i2c_control_motor_plus_tb#i2c_control_motor_plus3>Rst_n" Datatype="wire" From="i2c_control_motor_plus_tb>Rst_n"/>
 <Wire Datasize="1" Name="i2c_control_tb_wrreg_req" Parent="i2c_control_motor_plus_tb" To="i2c_control_motor_plus_tb#i2c_control_motor_plus3>wrreg_req" Datatype="wire" From="i2c_control_motor_plus_tb>wrreg_req"/>
 <Wire Datasize="1" Name="i2c_control_tb_rdreg_req" Parent="i2c_control_motor_plus_tb" To="i2c_control_motor_plus_tb#i2c_control_motor_plus3>rdreg_req" Datatype="wire" From="i2c_control_motor_plus_tb>rdreg_req"/>
 <Wire Datasize="8" Name="i2c_control_tb_addr" Parent="i2c_control_motor_plus_tb" To="i2c_control_motor_plus_tb#i2c_control_motor_plus3>addr" Datatype="wire" From="i2c_control_motor_plus_tb>addr"/>
 <Wire Datasize="32" Name="i2c_control_tb_wrdata" Parent="i2c_control_motor_plus_tb" To="i2c_control_motor_plus_tb#i2c_control_motor_plus3>wrdata" Datatype="wire" From="i2c_control_motor_plus_tb>wrdata"/>
 <Wire Datasize="8" Name="i2c_control_tb_device_id" Parent="i2c_control_motor_plus_tb" To="i2c_control_motor_plus_tb#i2c_control_motor_plus3>device_id" Datatype="wire" From="i2c_control_motor_plus_tb>device_id"/>
 <Wire Datasize="8" Name="i2c_control_motor_plus3_rddata" Parent="i2c_control_motor_plus_tb" To="i2c_control_motor_plus_tb>rddata" Datatype="wire" From="i2c_control_motor_plus_tb#i2c_control_motor_plus3>rddata"/>
 <Wire Datasize="1" Name="i2c_control_motor_plus3_RW_Done" Parent="i2c_control_motor_plus_tb" To="i2c_control_motor_plus_tb>RW_Done" Datatype="wire" From="i2c_control_motor_plus_tb#i2c_control_motor_plus3>RW_Done"/>
 <Wire Datasize="1" Name="i2c_control_motor_plus3_ack" Parent="i2c_control_motor_plus_tb" To="i2c_control_motor_plus_tb>ack" Datatype="wire" From="i2c_control_motor_plus_tb#i2c_control_motor_plus3>ack"/>
 <Wire Datasize="1" Name="i2c_control_motor_plus3_i2c_sclk" Parent="i2c_control_motor_plus_tb" To="i2c_control_motor_plus_tb>i2c_sclk" Datatype="wire" From="i2c_control_motor_plus_tb#i2c_control_motor_plus3>i2c_sclk"/>
 <Wire Datasize="1" Name="i2c_control_motor_plus3_i2c_sdat" Parent="i2c_control_motor_plus_tb" To="i2c_control_motor_plus_tb>i2c_sdat" Datatype="wire" From="i2c_control_motor_plus_tb#i2c_control_motor_plus3>i2c_sdat"/>
</Module>
