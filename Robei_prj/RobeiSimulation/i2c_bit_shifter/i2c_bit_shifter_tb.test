<!DOCTYPE Robei>
<Module Comment="" Time_Scale="" Include="" File="Current/i2c_bit_shifter_tb.test" Width="900" Parent="0" Code="&#x9;pullup PUP(i2c_sdat);&#xa;&#x9;&#xa;&#x9;localparam &#xa;&#x9;&#x9;WR   = 6'b000001,   //写请求&#xa;&#x9;&#x9;STA  = 6'b000010,   //起始位请求&#xa;&#x9;&#x9;RD   = 6'b000100,   //读请求&#xa;&#x9;&#x9;STO  = 6'b001000,   //停止位请求&#xa;&#x9;&#x9;ACK  = 6'b010000,   //应答位请求&#xa;&#x9;&#x9;NACK = 6'b100000;   //无应答请求&#xa;&#xa;&#xa;&#x9;always #10 Clk = ~Clk;&#xa;&#x9;&#xa;&#x9;initial begin&#xa;        Clk = 1;&#xa;&#x9;    Rst_n = 0;&#xa;&#x9;    Cmd = 6'b000000;&#xa;&#x9;    Go = 0;&#xa;&#x9;    Tx_DATA = 8'd0;&#xa;&#x9;    #2001;&#xa;&#x9;&#x9;Rst_n = 1;&#xa;&#x9;&#x9;#2000;&#xa;&#x9;&#x9;&#xa;&#x9;&#x9;//写数据操作，往EEPROM器件的B1地址写数据DA&#xa;&#x9;&#x9;//第一次：起始位+EEPROM器件地址（7位）+写方向（1位）&#xa;&#x9;&#x9;Cmd = STA | WR;&#xa;&#x9;    Go = 1;&#xa;&#x9;    Tx_DATA = 8'hA0 | 8'd0;//写方向&#xa;&#x9;    @ (posedge Clk);&#xa;        #1;&#xa;&#x9;    Go = 0;&#xa;&#x9;    @ (posedge Trans_Done);&#xa;&#x9;    #200;&#xa;&#x9;    &#xa;&#x9;    //第二次：写8位EEPROM的寄存器地址&#xa;&#x9;    Cmd = WR;&#xa;&#x9;    Go = 1;&#xa;&#x9;    Tx_DATA = 8'hB1;//写地址B1&#xa;&#x9;    @ (posedge Clk);&#xa;&#x9;    #1;&#xa;&#x9;    Go = 0;&#xa;&#x9;    @ (posedge Trans_Done);&#xa;&#x9;    #200;&#xa;&#x9;    &#xa;&#x9;    //第三次：写8位数据 + 停止位&#xa;&#x9;    Cmd = WR | STO;&#xa;&#x9;    Go = 1;&#xa;&#x9;    Tx_DATA = 8'hda;//写数据DA&#xa;&#x9;    @ (posedge Clk);&#xa;&#x9;    #1;&#xa;&#x9;    Go = 0;&#xa;&#x9;    @ (posedge Trans_Done);&#xa;&#x9;    #200;&#xa;&#x9;    &#xa;&#x9;    #5000000; //仿真模型的两次操作时间间隔&#xa;&#x9;    //读数据操作，从EEPROM器件的B1地址读数据&#xa;&#x9;    //第一次：起始位+EEPROM器件地址（7位）+写方向（1位）&#xa;&#x9;&#x9;Cmd = STA | WR;&#xa;&#x9;    Go = 1;&#xa;&#x9;    Tx_DATA = 8'hA0 | 8'd0;//写方向&#xa;&#x9;    @ (posedge Clk);&#xa;&#x9;    #1;&#xa;&#x9;    Go = 0;&#xa;&#x9;    @ (posedge Trans_Done);&#xa;&#x9;    #200;&#xa;&#x9;    &#xa;&#x9;    //第二次：写8位EEPROM的寄存器地址&#xa;&#x9;    Cmd = WR;&#xa;&#x9;    Go = 1;&#xa;&#x9;    Tx_DATA = 8'hB1;//写地址B1&#xa;&#x9;    @ (posedge Clk);&#xa;&#x9;    #1;&#xa;&#x9;    Go = 0;&#xa;&#x9;    @ (posedge Trans_Done);&#xa;&#x9;    #200;&#xa;&#x9;    &#xa;&#x9;    //第三次：起始位+EEPROM器件地址（7位）+读方向（1位）&#xa;&#x9;&#x9;Cmd = STA | WR;&#xa;&#x9;    Go = 1;&#xa;&#x9;    Tx_DATA = 8'hA0 | 8'd1;//读方向&#xa;&#x9;    @ (posedge Clk);&#xa;&#x9;    #1;&#xa;&#x9;    Go = 0;&#xa;&#x9;    @ (posedge Trans_Done);&#xa;&#x9;    #200;&#xa;&#x9;    &#xa;&#x9;    //第四次：读8位数据 + 停止位&#xa;&#x9;    Cmd = RD | STO;&#xa;&#x9;    Go = 1;&#xa;&#x9;    @ (posedge Clk);&#xa;&#x9;    #1;&#xa;&#x9;    Go = 0;&#xa;&#x9;    @ (posedge Trans_Done);&#xa;&#x9;    #200;&#xa;&#x9;    &#xa;&#x9;    #2000;&#xa;&#x9;    $finish;&#xa;&#x9;end" Name="i2c_bit_shifter_tb" Class="module" Type="testbench" Color="#d3d3d3" Y="0" Height="600" X="0">
 <Module Comment="" Include="" Parameters="" File="Current/i2c_bit_shifter.model" Width="160" Parent="i2c_bit_shifter_tb" Code="&#x9;reg i2c_sdat_o;&#xa;&#xa;&#x9;//系统时钟采用50MHz&#xa;&#x9;parameter SYS_CLOCK = 50_000_000;&#xa;&#x9;//SCL总线时钟采用400kHz&#xa;&#x9;parameter SCL_CLOCK = 400_000;&#xa;&#x9;//产生时钟SCL计数器最大值&#xa;&#x9;localparam SCL_CNT_M = SYS_CLOCK/SCL_CLOCK/4 - 1;&#xa;&#x9;&#xa;&#x9;reg i2c_sdat_oe;&#xa;&#x9;&#xa;&#x9;localparam &#xa;&#x9;&#x9;WR   = 6'b000001,   //写请求&#xa;&#x9;&#x9;STA  = 6'b000010,   //起始位请求&#xa;&#x9;&#x9;RD   = 6'b000100,   //读请求&#xa;&#x9;&#x9;STO  = 6'b001000,   //停止位请求&#xa;&#x9;&#x9;ACK  = 6'b010000,   //应答位请求&#xa;&#x9;&#x9;NACK = 6'b100000;   //无应答请求&#xa;&#x9;&#x9;&#xa;&#x9;reg [19:0]div_cnt;&#xa;&#x9;reg en_div_cnt;&#xa;&#x9;always@(posedge Clk or negedge Rst_n)&#xa;&#x9;if(!Rst_n)&#xa;&#x9;&#x9;div_cnt &lt;= 20'd0;&#xa;&#x9;else if(en_div_cnt)begin&#xa;&#x9;&#x9;if(div_cnt &lt; SCL_CNT_M)&#xa;&#x9;&#x9;&#x9;div_cnt &lt;= div_cnt + 1'b1;&#xa;&#x9;&#x9;else&#xa;&#x9;&#x9;&#x9;div_cnt &lt;= 0;&#xa;&#x9;end&#xa;&#x9;else&#xa;&#x9;&#x9;div_cnt &lt;= 0;&#xa;&#xa;&#x9;wire sclk_plus = div_cnt == SCL_CNT_M;&#xa;&#x9;&#xa;&#x9;//assign i2c_sdat = i2c_sdat_oe?i2c_sdat_o:1'bz;&#xa;&#x9;assign i2c_sdat = !i2c_sdat_o &amp;&amp; i2c_sdat_oe ? 1'b0:1'bz;&#xa;&#x9;&#x9;&#xa;&#x9;reg [7:0]state;&#xa;&#x9;&#xa;&#x9;localparam&#xa;&#x9;&#x9;IDLE      = 8'b00000001,   //空闲状态&#xa;&#x9;&#x9;GEN_STA   = 8'b00000010,   //产生起始信号&#xa;&#x9;&#x9;WR_DATA   = 8'b00000100,   //写数据状态&#xa;&#x9;&#x9;RD_DATA   = 8'b00001000,   //读数据状态&#xa;&#x9;&#x9;CHECK_ACK = 8'b00010000,   //检测应答状态&#xa;&#x9;&#x9;GEN_ACK   = 8'b00100000,   //产生应答状态&#xa;&#x9;&#x9;GEN_STO   = 8'b01000000;   //产生停止信号&#xa;&#x9;&#x9;&#xa;&#x9;reg [4:0]cnt;&#xa;&#x9;&#x9;&#xa;&#x9;always@(posedge Clk or negedge Rst_n)&#xa;&#x9;if(!Rst_n)begin&#xa;&#x9;&#x9;Rx_DATA &lt;= 0;&#xa;&#x9;&#x9;i2c_sdat_oe &lt;= 1'd0;&#xa;&#x9;&#x9;en_div_cnt &lt;= 1'b0;&#xa;&#x9;&#x9;i2c_sdat_o &lt;= 1'd1;&#xa;&#x9;&#x9;Trans_Done &lt;= 1'b0;&#xa;&#x9;&#x9;ack_o &lt;= 0;&#xa;&#x9;&#x9;state &lt;= IDLE;&#xa;&#x9;&#x9;cnt &lt;= 0;&#xa;&#x9;end&#xa;&#x9;else begin&#xa;&#x9;&#x9;case(state)&#xa;&#x9;&#x9;&#x9;IDLE:&#xa;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;Trans_Done &lt;= 1'b0;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;i2c_sdat_oe &lt;= 1'd1;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;if(Go)begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;en_div_cnt &lt;= 1'b1;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(Cmd &amp; STA)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= GEN_STA;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else if(Cmd &amp; WR)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= WR_DATA;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else if(Cmd &amp; RD)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= RD_DATA;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= IDLE;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;else begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;en_div_cnt &lt;= 1'b0;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= IDLE;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;GEN_STA:&#xa;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;if(sclk_plus)begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(cnt == 3)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cnt &lt;= 0;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cnt &lt;= cnt + 1'b1;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case(cnt)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;0:begin i2c_sdat_o &lt;= 1; i2c_sdat_oe &lt;= 1'd1;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;1:begin i2c_sclk &lt;= 1;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;2:begin i2c_sdat_o &lt;= 0; i2c_sclk &lt;= 1;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;3:begin i2c_sclk &lt;= 0;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;default:begin i2c_sdat_o &lt;= 1; i2c_sclk &lt;= 1;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endcase&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(cnt == 3)begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(Cmd &amp; WR)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= WR_DATA;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else if(Cmd &amp; RD)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= RD_DATA;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;WR_DATA:&#xa;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;if(sclk_plus)begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(cnt == 31)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cnt &lt;= 0;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cnt &lt;= cnt + 1'b1;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case(cnt)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;0,4,8,12,16,20,24,28:begin i2c_sdat_o &lt;= Tx_DATA[7-cnt[4:2]]; i2c_sdat_oe &lt;= 1'd1;end&#x9;//set data;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;1,5,9,13,17,21,25,29:begin i2c_sclk &lt;= 1;end&#x9;//sclk posedge&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;2,6,10,14,18,22,26,30:begin i2c_sclk &lt;= 1;end&#x9;//sclk keep high&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;3,7,11,15,19,23,27,31:begin i2c_sclk &lt;= 0;end&#x9;//sclk negedge&#xa;/*&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;0 :begin i2c_sdat_o &lt;= Tx_DATA[7];end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;1 :begin i2c_sclk &lt;= 1;end&#x9;//sclk posedge&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;2 :begin i2c_sclk &lt;= 1;end&#x9;//sclk keep high&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;3 :begin i2c_sclk &lt;= 0;end&#x9;//sclk negedge&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;4 :begin i2c_sdat_o &lt;= Tx_DATA[6];end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;5 :begin i2c_sclk &lt;= 1;end&#x9;//sclk posedge&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;6 :begin i2c_sclk &lt;= 1;end&#x9;//sclk keep high&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;7 :begin i2c_sclk &lt;= 0;end&#x9;//sclk negedge&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;8 :begin i2c_sdat_o &lt;= Tx_DATA[5];end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;9 :begin i2c_sclk &lt;= 1;end&#x9;//sclk posedge&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;10:begin i2c_sclk &lt;= 1;end&#x9;//sclk keep high&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;11:begin i2c_sclk &lt;= 0;end&#x9;//sclk negedge&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;12:begin i2c_sdat_o &lt;= Tx_DATA[4];end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;13:begin i2c_sclk &lt;= 1;end&#x9;//sclk posedge&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;14:begin i2c_sclk &lt;= 1;end&#x9;//sclk keep high&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;15:begin i2c_sclk &lt;= 0;end&#x9;//sclk negedge&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;16:begin i2c_sdat_o &lt;= Tx_DATA[3];end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;17:begin i2c_sclk &lt;= 1;end&#x9;//sclk posedge&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;18:begin i2c_sclk &lt;= 1;end&#x9;//sclk keep high&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;19:begin i2c_sclk &lt;= 0;end&#x9;//sclk negedge&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;20:begin i2c_sdat_o &lt;= Tx_DATA[2];end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;21:begin i2c_sclk &lt;= 1;end&#x9;//sclk posedge&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;22:begin i2c_sclk &lt;= 1;end&#x9;//sclk keep high&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;23:begin i2c_sclk &lt;= 0;end&#x9;//sclk negedge&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;24:begin i2c_sdat_o &lt;= Tx_DATA[1];end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;25:begin i2c_sclk &lt;= 1;end&#x9;//sclk posedge&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;26:begin i2c_sclk &lt;= 1;end&#x9;//sclk keep high&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;27:begin i2c_sclk &lt;= 0;end&#x9;//sclk negedge&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;28:begin i2c_sdat_o &lt;= Tx_DATA[0];end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;29:begin i2c_sclk &lt;= 1;end&#x9;//sclk posedge&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;30:begin i2c_sclk &lt;= 1;end&#x9;//sclk keep high&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;31:begin i2c_sclk &lt;= 0;end&#x9;//sclk negedge&#xa;*/&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;default:begin i2c_sdat_o &lt;= 1; i2c_sclk &lt;= 1;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endcase&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(cnt == 31)begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= CHECK_ACK;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;RD_DATA:&#xa;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;if(sclk_plus)begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(cnt == 31)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cnt &lt;= 0;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cnt &lt;= cnt + 1'b1;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case(cnt)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;0,4,8,12,16,20,24,28:begin i2c_sdat_oe &lt;= 1'd0; i2c_sclk &lt;= 0;end&#x9;//set data;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;1,5,9,13,17,21,25,29:begin i2c_sclk &lt;= 1;end&#x9;//sclk posedge&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;2,6,10,14,18,22,26,30:begin i2c_sclk &lt;= 1; Rx_DATA &lt;= {Rx_DATA[6:0],i2c_sdat};end&#x9;//sclk keep high&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;3,7,11,15,19,23,27,31:begin i2c_sclk &lt;= 0;end&#x9;//sclk negedge&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;default:begin i2c_sdat_o &lt;= 1; i2c_sclk &lt;= 1;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endcase&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(cnt == 31)begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= GEN_ACK;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;CHECK_ACK:&#xa;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;if(sclk_plus)begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(cnt == 3)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cnt &lt;= 0;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cnt &lt;= cnt + 1'b1;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case(cnt)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;0:begin i2c_sdat_oe &lt;= 1'd0; i2c_sclk &lt;= 0;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;1:begin i2c_sclk &lt;= 1;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;2:begin ack_o &lt;= i2c_sdat; i2c_sclk &lt;= 1;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;3:begin i2c_sclk &lt;= 0;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;default:begin i2c_sdat_o &lt;= 1; i2c_sclk &lt;= 1;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endcase&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(cnt == 3)begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(Cmd &amp; STO)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= GEN_STO;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= IDLE;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Trans_Done &lt;= 1'b1;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;GEN_ACK:&#xa;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;if(sclk_plus)begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(cnt == 3)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cnt &lt;= 0;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cnt &lt;= cnt + 1'b1;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case(cnt)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;0:begin &#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;i2c_sdat_oe &lt;= 1'd1;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;i2c_sclk &lt;= 0;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(Cmd &amp; ACK)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;i2c_sdat_o &lt;= 1'b0;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else if(Cmd &amp; NACK)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;i2c_sdat_o &lt;= 1'b1;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;1:begin i2c_sclk &lt;= 1;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;2:begin i2c_sclk &lt;= 1;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;3:begin i2c_sclk &lt;= 0;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;default:begin i2c_sdat_o &lt;= 1; i2c_sclk &lt;= 1;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endcase&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(cnt == 3)begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(Cmd &amp; STO)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= GEN_STO;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= IDLE;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Trans_Done &lt;= 1'b1;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;GEN_STO:&#xa;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;if(sclk_plus)begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(cnt == 3)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cnt &lt;= 0;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cnt &lt;= cnt + 1'b1;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case(cnt)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;0:begin i2c_sdat_o &lt;= 0; i2c_sdat_oe &lt;= 1'd1;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;1:begin i2c_sclk &lt;= 1;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;2:begin i2c_sdat_o &lt;= 1; i2c_sclk &lt;= 1;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;3:begin i2c_sclk &lt;= 1;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;default:begin i2c_sdat_o &lt;= 1; i2c_sclk &lt;= 1;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endcase&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(cnt == 3)begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Trans_Done &lt;= 1'b1;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= IDLE;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;default:state &lt;= IDLE;&#xa;&#x9;&#x9;endcase&#xa;&#x9;end&#xa;&#xa;&#xa;" Name="i2c_bit_shifter1" Class="i2c_bit_shifter" Type="model" Color="#d3d3d3" Y="94.1627" Height="160" X="131.483">
  <Port Function="" Connect="" Width="20" Side="left" Parent="i2c_bit_shifter1" Datatype="wire" Name="Clk" Datasize="1" Color="#faebd7" Y="0.075" Height="20" X="-0.125" Inout="input"/>
  <Port Function="" Connect="" Width="20" Side="left" Parent="i2c_bit_shifter1" Datatype="wire" Name="Rst_n" Datasize="1" Color="#00ffff" Y="0.2125" Height="20" X="-0.125" Inout="input"/>
  <Port Function="" Connect="" Width="20" Side="left" Parent="i2c_bit_shifter1" Datatype="wire" Name="Cmd" Datasize="6" Color="#7fffd4" Y="0.35" Height="20" X="-0.125" Inout="input"/>
  <Port Function="" Connect="" Width="20" Side="left" Parent="i2c_bit_shifter1" Datatype="wire" Name="Go" Datasize="1" Color="#f0ffff" Y="0.4875" Height="20" X="-0.125" Inout="input"/>
  <Port Function="" Connect="" Width="20" Side="left" Parent="i2c_bit_shifter1" Datatype="wire" Name="Tx_DATA" Datasize="8" Color="#f5f5dc" Y="0.625" Height="20" X="-0.125" Inout="input"/>
  <Port Function="" Connect="" Width="20" Side="right" Parent="i2c_bit_shifter1" Datatype="reg" Name="Rx_DATA" Datasize="8" Color="#ffe4c4" Y="0.075" Height="20" X="0.875" Inout="output"/>
  <Port Function="" Connect="" Width="20" Side="right" Parent="i2c_bit_shifter1" Datatype="reg" Name="Trans_Done" Datasize="1" Color="#b8860b" Y="0.2125" Height="20" X="0.875" Inout="output"/>
  <Port Function="" Connect="" Width="20" Side="right" Parent="i2c_bit_shifter1" Datatype="reg" Name="ack_o" Datasize="1" Color="#ffebcd" Y="0.35" Height="20" X="0.875" Inout="output"/>
  <Port Function="" Connect="" Width="20" Side="right" Parent="i2c_bit_shifter1" Datatype="reg" Name="i2c_sclk" Datasize="1" Color="#0000ff" Y="0.4875" Height="20" X="0.875" Inout="output"/>
  <Port Function="" Connect="" Width="20" Side="right" Parent="i2c_bit_shifter1" Datatype="wire" Name="i2c_sdat" Datasize="1" Color="#8a2be2" Y="0.625" Height="20" X="0.875" Inout="inout"/>
 </Module>
 <Module Comment="" Include="" Parameters="" File="Current/M24LC04B.model" Width="160" Parent="i2c_bit_shifter_tb" Code="   reg&#x9;&#x9;&#x9;      SDA_DO;&#x9;&#x9;&#x9;&#x9;          // serial data - output&#xa;   reg            SDA_OE;&#x9;&#x9;&#x9;&#x9;          // serial data - output enable&#xa;&#xa;   wire&#x9;&#x9;&#x9;      SDA_DriveEnable;    &#x9;&#x9;// serial data output enable&#xa;   reg&#x9;&#x9;&#x9;      SDA_DriveEnableDlyd;&#x9;&#x9;// serial data output enable - delayed&#xa;&#xa;   wire [02:00]   ChipAddress;            // hardwired chip address&#xa;&#xa;   reg&#x9;[03:00]&#x9;&#x9;BitCounter;&#x9;&#x9;        &#x9;// serial bit counter&#xa;&#xa;   reg&#x9;&#x9;&#x9;      START_Rcvd;&#x9;&#x9;        &#x9;// START bit received flag&#xa;   reg&#x9;&#x9;&#x9;      STOP_Rcvd;&#x9;&#x9;        &#x9;// STOP bit received flag&#xa;   reg&#x9;&#x9;&#x9;      CTRL_Rcvd;&#x9;&#x9;         &#x9;// control byte received flag&#xa;   reg&#x9;&#x9;&#x9;      ADDR_Rcvd;&#x9;&#x9;        &#x9;// byte address received flag&#xa;   reg&#x9;&#x9;&#x9;      MACK_Rcvd;&#x9;&#x9;         &#x9;// master acknowledge received flag&#xa;&#xa;   reg&#x9;&#x9;&#x9;      WrCycle;&#x9;&#x9;&#x9;          // memory write cycle&#xa;   reg&#x9;&#x9;&#x9;      RdCycle;&#x9;&#x9;&#x9;          // memory read cycle&#xa;&#xa;   reg&#x9;[07:00]&#x9;&#x9;ShiftRegister;&#x9;    &#x9;&#x9;// input data shift register&#xa;&#xa;   reg  [07:00]&#x9;&#x9;ControlByte;&#x9;&#x9;      &#x9;// control byte register&#xa;   wire&#x9;&#x9;&#x9;      BlockSelect;&#x9;&#x9;      &#x9;// memory block select&#xa;   wire&#x9;&#x9;&#x9;      RdWrBit;&#x9;&#x9;&#x9;          // read/write control bit&#xa;&#xa;   reg&#x9;[08:00]&#x9;&#x9;StartAddress;&#x9;&#x9;&#x9;      // memory access starting address&#xa;   reg&#x9;[03:00]&#x9;&#x9;PageAddress;&#x9;&#x9;&#x9;      // memory page address&#xa;&#xa;   reg&#x9;[07:00]&#x9;&#x9;WrDataByte [0:15];&#x9;  &#x9;// memory write data buffer&#xa;   wire&#x9;[07:00]&#x9;&#x9;RdDataByte;&#x9;&#x9;&#x9;        // memory read data&#xa;&#xa;   reg&#x9;[15:00]&#x9;&#x9;WrCounter;&#x9;&#x9;&#x9;        // write buffer counter&#xa;&#xa;   reg&#x9;[03:00]&#x9;&#x9;WrPointer;&#x9;&#x9;&#x9;        // write buffer pointer&#xa;   reg&#x9;[08:00]&#x9;&#x9;RdPointer;&#x9;&#x9;&#x9;        // read address pointer&#xa;&#xa;   reg&#x9;&#x9;&#x9;      WriteActive;&#x9;&#x9;&#x9;      // memory write cycle active&#xa;&#xa;   reg&#x9;[07:00]&#x9;&#x9;MemoryBlock0 [0:255];&#x9;&#x9;// EEPROM data memory array&#xa;   reg&#x9;[07:00]&#x9;&#x9;MemoryBlock1 [0:255];&#x9;&#x9;// EEPROM data memory array&#xa;&#xa;   integer&#x9;&#x9;    LoopIndex;&#x9;&#x9;        &#x9;// iterative loop index&#xa;&#xa;   integer &#x9;&#x9;    tAA;&#x9;&#x9;&#x9;            &#x9;// timing parameter&#xa;   integer &#x9;&#x9;    tWC;&#x9;&#x9;&#x9;            &#x9;// timing parameter&#xa;&#xa;&#xa;// *******************************************************************************************************&#xa;// **   INITIALIZATION                                                         &#x9;&#x9;&#x9;&#x9;**&#xa;// *******************************************************************************************************&#xa;&#xa;   initial tAA = 900;                                   // SCL to SDA output delay&#xa;   initial tWC = 5000000;                               // memory write cycle time&#xa;&#xa;   initial begin&#xa;      SDA_DO = 0;&#xa;      SDA_OE = 0;&#xa;   end&#xa;&#xa;   initial begin&#xa;      START_Rcvd = 0;&#xa;      STOP_Rcvd  = 0;&#xa;      CTRL_Rcvd  = 0;&#xa;      ADDR_Rcvd  = 0;&#xa;      MACK_Rcvd  = 0;&#xa;   end&#xa;&#xa;   initial begin&#xa;      BitCounter  = 0;&#xa;      ControlByte = 0;&#xa;   end&#xa;&#xa;   initial begin&#xa;      WrCycle = 0;&#xa;      RdCycle = 0;&#xa;&#xa;      WriteActive = 0;&#xa;   end&#xa;   &#xa;   assign ChipAddress = {A2,A1,A0};&#xa;&#xa;// *******************************************************************************************************&#xa;// **   CORE LOGIC                                                    &#x9;&#x9;&#x9;&#x9;&#x9;**&#xa;// *******************************************************************************************************&#xa;// -------------------------------------------------------------------------------------------------------&#xa;//      1.01:  START Bit Detection&#xa;// -------------------------------------------------------------------------------------------------------&#xa;&#xa;   always @(negedge SDA) begin&#xa;      if (SCL == 1) begin&#xa;         START_Rcvd &lt;= 1;&#xa;         STOP_Rcvd  &lt;= 0;&#xa;         CTRL_Rcvd  &lt;= 0;&#xa;         ADDR_Rcvd  &lt;= 0;&#xa;         MACK_Rcvd  &lt;= 0;&#xa;&#xa;         WrCycle &lt;= #1 0;&#xa;         RdCycle &lt;= #1 0;&#xa;&#xa;         BitCounter &lt;= 0;&#xa;      end&#xa;   end&#xa;&#xa;// -------------------------------------------------------------------------------------------------------&#xa;//      1.02:  STOP Bit Detection&#xa;// -------------------------------------------------------------------------------------------------------&#xa;&#xa;   always @(posedge SDA) begin&#xa;      if (SCL == 1) begin&#xa;         START_Rcvd &lt;= 0;&#xa;         STOP_Rcvd  &lt;= 1;&#xa;         CTRL_Rcvd  &lt;= 0;&#xa;         ADDR_Rcvd  &lt;= 0;&#xa;         MACK_Rcvd  &lt;= 0;&#xa;&#xa;         WrCycle &lt;= #1 0;&#xa;         RdCycle &lt;= #1 0;&#xa;&#xa;         BitCounter &lt;= 10;&#xa;      end&#xa;   end&#xa;&#xa;// -------------------------------------------------------------------------------------------------------&#xa;//      1.03:  Input Shift Register&#xa;// -------------------------------------------------------------------------------------------------------&#xa;&#xa;   always @(posedge SCL) begin&#xa;      ShiftRegister[00] &lt;= SDA;&#xa;      ShiftRegister[01] &lt;= ShiftRegister[00];&#xa;      ShiftRegister[02] &lt;= ShiftRegister[01];&#xa;      ShiftRegister[03] &lt;= ShiftRegister[02];&#xa;      ShiftRegister[04] &lt;= ShiftRegister[03];&#xa;      ShiftRegister[05] &lt;= ShiftRegister[04];&#xa;      ShiftRegister[06] &lt;= ShiftRegister[05];&#xa;      ShiftRegister[07] &lt;= ShiftRegister[06];&#xa;   end&#xa;&#xa;// -------------------------------------------------------------------------------------------------------&#xa;//      1.04:  Input Bit Counter&#xa;// -------------------------------------------------------------------------------------------------------&#xa;&#xa;   always @(posedge SCL) begin&#xa;      if (BitCounter &lt; 10) BitCounter &lt;= BitCounter + 1;&#xa;   end&#xa;&#xa;// -------------------------------------------------------------------------------------------------------&#xa;//      1.05:  Control Byte Register&#xa;// -------------------------------------------------------------------------------------------------------&#xa;&#xa;   always @(negedge SCL) begin&#xa;      if (START_Rcvd &amp; (BitCounter == 8)) begin&#xa;         if (!WriteActive &amp; (ShiftRegister[07:01] == {4'b1010,ChipAddress[02:00]})) begin&#xa;            if (ShiftRegister[00] == 0) WrCycle &lt;= 1;&#xa;            if (ShiftRegister[00] == 1) RdCycle &lt;= 1;&#xa;&#xa;            ControlByte &lt;= ShiftRegister[07:00];&#xa;&#xa;            CTRL_Rcvd &lt;= 1;&#xa;         end&#xa;&#xa;         START_Rcvd &lt;= 0;&#xa;      end&#xa;   end&#xa;&#xa;   assign BlockSelect = ControlByte[01];&#xa;   assign RdWrBit     = ControlByte[00];&#xa;&#xa;// -------------------------------------------------------------------------------------------------------&#xa;//      1.06:  Byte Address Register&#xa;// -------------------------------------------------------------------------------------------------------&#xa;&#xa;   always @(negedge SCL) begin&#xa;      if (CTRL_Rcvd &amp; (BitCounter == 8)) begin&#xa;         if (RdWrBit == 0) begin&#xa;            StartAddress &lt;= {BlockSelect,ShiftRegister[07:00]};&#xa;            RdPointer    &lt;= {BlockSelect,ShiftRegister[07:00]};&#xa;&#xa;            ADDR_Rcvd &lt;= 1;&#xa;         end&#xa;&#xa;         WrCounter &lt;= 0;&#xa;         WrPointer &lt;= 0;&#xa;&#xa;         CTRL_Rcvd &lt;= 0;&#xa;      end&#xa;   end&#xa;&#xa;// -------------------------------------------------------------------------------------------------------&#xa;//      1.07:  Write Data Buffer&#xa;// -------------------------------------------------------------------------------------------------------&#xa;&#xa;   always @(negedge SCL) begin&#xa;      if (ADDR_Rcvd &amp; (BitCounter == 8)) begin&#xa;         if ((WP == 0) &amp; (RdWrBit == 0)) begin&#xa;            WrDataByte[WrPointer] &lt;= ShiftRegister[07:00];&#xa;&#xa;            WrCounter &lt;= WrCounter + 1;&#xa;            WrPointer &lt;= WrPointer + 1;&#xa;         end&#xa;      end&#xa;   end&#xa;&#xa;// -------------------------------------------------------------------------------------------------------&#xa;//      1.08:  Acknowledge Generator&#xa;// -------------------------------------------------------------------------------------------------------&#xa;&#xa;   always @(negedge SCL) begin&#xa;      if (!WriteActive) begin&#xa;         if (BitCounter == 8) begin&#xa;            if (WrCycle | (START_Rcvd &amp; (ShiftRegister[07:01] == {4'b1010,ChipAddress[02:00]}))) begin&#xa;               SDA_DO &lt;= 0;&#xa;               SDA_OE &lt;= 1;&#xa;            end &#xa;         end&#xa;         if (BitCounter == 9) begin&#xa;            BitCounter &lt;= 0;&#xa;&#xa;            if (!RdCycle) begin&#xa;               SDA_DO &lt;= 0;&#xa;               SDA_OE &lt;= 0;&#xa;            end&#xa;         end&#xa;      end&#xa;   end &#xa;&#xa;// -------------------------------------------------------------------------------------------------------&#xa;//      1.09:  Acknowledge Detect&#xa;// -------------------------------------------------------------------------------------------------------&#xa;&#xa;   always @(posedge SCL) begin&#xa;      if (RdCycle &amp; (BitCounter == 8)) begin&#xa;         if ((SDA == 0) &amp; (SDA_OE == 0)) MACK_Rcvd &lt;= 1;&#xa;      end&#xa;   end&#xa;&#xa;   always @(negedge SCL) MACK_Rcvd &lt;= 0;&#xa;&#xa;// -------------------------------------------------------------------------------------------------------&#xa;//      1.10:  Write Cycle Timer&#xa;// -------------------------------------------------------------------------------------------------------&#xa;&#xa;   always @(posedge STOP_Rcvd) begin&#xa;      if (WrCycle &amp; (WP == 0) &amp; (WrCounter > 0)) begin&#xa;         WriteActive = 1;&#xa;         #(tWC);&#xa;         WriteActive = 0;&#xa;      end&#xa;   end&#xa;&#xa;   always @(posedge STOP_Rcvd) begin&#xa;      #(1.0);&#xa;      STOP_Rcvd = 0;&#xa;   end&#xa;&#xa;// -------------------------------------------------------------------------------------------------------&#xa;//      1.11:  Write Cycle Processor&#xa;// -------------------------------------------------------------------------------------------------------&#xa;&#xa;   always @(negedge WriteActive) begin&#xa;      for (LoopIndex = 0; LoopIndex &lt; WrCounter; LoopIndex = LoopIndex + 1) begin&#xa;         if (StartAddress[08] == 0) begin&#xa;            PageAddress = StartAddress[03:00] + LoopIndex;&#xa;&#xa;            MemoryBlock0[{StartAddress[07:04],PageAddress[03:00]}] = WrDataByte[LoopIndex[03:00]];&#xa;         end&#xa;         if (StartAddress[08] == 1) begin&#xa;            PageAddress = StartAddress[03:00] + LoopIndex;&#xa;&#xa;            MemoryBlock1[{StartAddress[07:04],PageAddress[03:00]}] = WrDataByte[LoopIndex[03:00]];&#xa;         end&#xa;      end&#xa;   end&#xa;&#xa;// -------------------------------------------------------------------------------------------------------&#xa;//      1.12:  Read Data Multiplexor&#xa;// -------------------------------------------------------------------------------------------------------&#xa;&#xa;   always @(negedge SCL) begin&#xa;      if (BitCounter == 8) begin&#xa;         if (WrCycle &amp; ADDR_Rcvd) begin&#xa;            RdPointer &lt;= StartAddress + WrPointer + 1;&#xa;         end&#xa;         if (RdCycle) begin&#xa;            RdPointer &lt;= RdPointer + 1;&#xa;         end&#xa;      end&#xa;   end&#xa;&#xa;   assign RdDataByte = RdPointer[08] ? MemoryBlock1[RdPointer[07:00]] : MemoryBlock0[RdPointer[07:00]];&#xa;&#xa;// -------------------------------------------------------------------------------------------------------&#xa;//      1.13:  Read Data Processor&#xa;// -------------------------------------------------------------------------------------------------------&#xa;&#xa;   always @(negedge SCL) begin&#xa;      if (RdCycle) begin&#xa;         if (BitCounter == 8) begin&#xa;            SDA_DO &lt;= 0;&#xa;            SDA_OE &lt;= 0;&#xa;         end&#xa;         else if (BitCounter == 9) begin&#xa;            SDA_DO &lt;= RdDataByte[07];&#xa;&#xa;            if (MACK_Rcvd) SDA_OE &lt;= 1;&#xa;         end&#xa;         else begin&#xa;            SDA_DO &lt;= RdDataByte[7-BitCounter];&#xa;         end&#xa;      end&#xa;   end&#xa;&#xa;// -------------------------------------------------------------------------------------------------------&#xa;//      1.14:  SDA Data I/O Buffer&#xa;// -------------------------------------------------------------------------------------------------------&#xa;&#xa;   bufif1 (SDA, 1'b0, SDA_DriveEnableDlyd);&#xa;&#xa;   assign SDA_DriveEnable = !SDA_DO &amp; SDA_OE;&#xa;   always @(SDA_DriveEnable) SDA_DriveEnableDlyd &lt;= #(tAA) SDA_DriveEnable;&#xa;&#xa;&#xa;// *******************************************************************************************************&#xa;// **   DEBUG LOGIC                                                           &#x9;&#x9;&#x9;&#x9;**&#xa;// *******************************************************************************************************&#xa;// -------------------------------------------------------------------------------------------------------&#xa;//      2.01:  Memory Data Bytes&#xa;// -------------------------------------------------------------------------------------------------------&#xa;&#xa;   wire [07:00]&#x9;MemoryByte0_00 = MemoryBlock0[00];&#xa;   wire [07:00]&#x9;MemoryByte0_01 = MemoryBlock0[01];&#xa;   wire [07:00]&#x9;MemoryByte0_02 = MemoryBlock0[02];&#xa;   wire [07:00]&#x9;MemoryByte0_03 = MemoryBlock0[03];&#xa;   wire [07:00]&#x9;MemoryByte0_04 = MemoryBlock0[04];&#xa;   wire [07:00]&#x9;MemoryByte0_05 = MemoryBlock0[05];&#xa;   wire [07:00]&#x9;MemoryByte0_06 = MemoryBlock0[06];&#xa;   wire [07:00]&#x9;MemoryByte0_07 = MemoryBlock0[07];&#xa;&#xa;   wire [07:00]&#x9;MemoryByte0_08 = MemoryBlock0[08];&#xa;   wire [07:00]&#x9;MemoryByte0_09 = MemoryBlock0[09];&#xa;   wire [07:00]&#x9;MemoryByte0_0A = MemoryBlock0[10];&#xa;   wire [07:00]&#x9;MemoryByte0_0B = MemoryBlock0[11];&#xa;   wire [07:00]&#x9;MemoryByte0_0C = MemoryBlock0[12];&#xa;   wire [07:00]&#x9;MemoryByte0_0D = MemoryBlock0[13];&#xa;   wire [07:00]&#x9;MemoryByte0_0E = MemoryBlock0[14];&#xa;   wire [07:00]&#x9;MemoryByte0_0F = MemoryBlock0[15];&#xa;&#xa;   wire [07:00]&#x9;MemoryByte1_00 = MemoryBlock1[00];&#xa;   wire [07:00]&#x9;MemoryByte1_01 = MemoryBlock1[01];&#xa;   wire [07:00]&#x9;MemoryByte1_02 = MemoryBlock1[02];&#xa;   wire [07:00]&#x9;MemoryByte1_03 = MemoryBlock1[03];&#xa;   wire [07:00]&#x9;MemoryByte1_04 = MemoryBlock1[04];&#xa;   wire [07:00]&#x9;MemoryByte1_05 = MemoryBlock1[05];&#xa;   wire [07:00]&#x9;MemoryByte1_06 = MemoryBlock1[06];&#xa;   wire [07:00]&#x9;MemoryByte1_07 = MemoryBlock1[07];&#xa;&#xa;   wire [07:00]&#x9;MemoryByte1_08 = MemoryBlock1[08];&#xa;   wire [07:00]&#x9;MemoryByte1_09 = MemoryBlock1[09];&#xa;   wire [07:00]&#x9;MemoryByte1_0A = MemoryBlock1[10];&#xa;   wire [07:00]&#x9;MemoryByte1_0B = MemoryBlock1[11];&#xa;   wire [07:00]&#x9;MemoryByte1_0C = MemoryBlock1[12];&#xa;   wire [07:00]&#x9;MemoryByte1_0D = MemoryBlock1[13];&#xa;   wire [07:00]&#x9;MemoryByte1_0E = MemoryBlock1[14];&#xa;   wire [07:00]&#x9;MemoryByte1_0F = MemoryBlock1[15];&#xa;&#xa;// -------------------------------------------------------------------------------------------------------&#xa;//      2.02:  Write Data Buffer&#xa;// -------------------------------------------------------------------------------------------------------&#xa;&#xa;   wire [07:00]&#x9;WriteData_0 = WrDataByte[00];&#xa;   wire [07:00]&#x9;WriteData_1 = WrDataByte[01];&#xa;   wire [07:00]&#x9;WriteData_2 = WrDataByte[02];&#xa;   wire [07:00]&#x9;WriteData_3 = WrDataByte[03];&#xa;   wire [07:00]&#x9;WriteData_4 = WrDataByte[04];&#xa;   wire [07:00]&#x9;WriteData_5 = WrDataByte[05];&#xa;   wire [07:00]&#x9;WriteData_6 = WrDataByte[06];&#xa;   wire [07:00]&#x9;WriteData_7 = WrDataByte[07];&#xa;   wire [07:00]&#x9;WriteData_8 = WrDataByte[08];&#xa;   wire [07:00]&#x9;WriteData_9 = WrDataByte[09];&#xa;   wire [07:00]&#x9;WriteData_A = WrDataByte[10];&#xa;   wire [07:00]&#x9;WriteData_B = WrDataByte[11];&#xa;   wire [07:00]&#x9;WriteData_C = WrDataByte[12];&#xa;   wire [07:00]&#x9;WriteData_D = WrDataByte[13];&#xa;   wire [07:00]&#x9;WriteData_E = WrDataByte[14];&#xa;   wire [07:00]&#x9;WriteData_F = WrDataByte[15];&#xa;&#xa;&#xa;// *******************************************************************************************************&#xa;// **   TIMING CHECKS                                                           &#x9;&#x9;&#x9;**&#xa;// *******************************************************************************************************&#xa;&#xa;   wire TimingCheckEnable = (RESET == 0) &amp; (SDA_OE == 0);&#xa;&#xa;   specify&#xa;      specparam&#xa;         tHI = 600,                                     // SCL pulse width - high&#xa;         tLO = 1300,                                    // SCL pulse width - low&#xa;&#x9;&#x9;&#x9;   tSU_STA = 600,                                 // SCL to SDA setup time&#xa;         tHD_STA = 600,                                 // SCL to SDA hold time&#xa;         tSU_DAT = 100,                                 // SDA to SCL setup time&#xa;         tSU_STO = 600,                                 // SCL to SDA setup time&#xa;         tBUF = 1300;                                   // Bus free time&#xa;&#x9;&#x9;&#x9;&#xa;      $width (posedge SCL, tHI);&#xa;      $width (negedge SCL, tLO);&#xa;&#xa;      $width (posedge SDA &amp;&amp;&amp; SCL, tBUF);&#xa;&#xa;      $setup (posedge SCL, negedge SDA &amp;&amp;&amp; TimingCheckEnable, tSU_STA);&#xa;      $setup (SDA, posedge SCL &amp;&amp;&amp; TimingCheckEnable, tSU_DAT);&#xa;      $setup (posedge SCL, posedge SDA &amp;&amp;&amp; TimingCheckEnable, tSU_STO);&#xa;&#xa;      $hold  (negedge SDA &amp;&amp;&amp; TimingCheckEnable, negedge SCL, tHD_STA);&#xa;   endspecify&#xa;&#xa;&#xa;&#xa;" Name="M24LC04B2" Class="M24LC04B" Type="model" Color="#d3d3d3" Y="392.727" Height="160" X="235.789">
  <Port Function="" Connect="0" Width="20" Side="left" Parent="M24LC04B2" Datatype="wire" Name="A0" Datasize="1" Color="#faebd7" Y="0.0625" Height="20" X="-0.125" Inout="input"/>
  <Port Function="" Connect="0" Width="20" Side="left" Parent="M24LC04B2" Datatype="wire" Name="A1" Datasize="1" Color="#00ffff" Y="0.1875" Height="20" X="-0.125" Inout="input"/>
  <Port Function="" Connect="0" Width="20" Side="left" Parent="M24LC04B2" Datatype="wire" Name="A2" Datasize="1" Color="#7fffd4" Y="0.3125" Height="20" X="-0.125" Inout="input"/>
  <Port Function="" Connect="0" Width="20" Side="left" Parent="M24LC04B2" Datatype="wire" Name="WP" Datasize="1" Color="#f0ffff" Y="0.4375" Height="20" X="-0.125" Inout="input"/>
  <Port Function="" Connect="" Width="20" Side="left" Parent="M24LC04B2" Datatype="wire" Name="SCL" Datasize="1" Color="#f5f5dc" Y="0.5625" Height="20" X="-0.125" Inout="input"/>
  <Port Function="" Connect="" Width="20" Side="left" Parent="M24LC04B2" Datatype="wire" Name="RESET" Datasize="1" Color="#ffe4c4" Y="0.6875" Height="20" X="-0.125" Inout="input"/>
  <Port Function="" Connect="" Width="20" Side="right" Parent="M24LC04B2" Datatype="wire" Name="SDA" Datasize="1" Color="#b8860b" Y="0.26875" Height="20" X="0.875" Inout="inout"/>
 </Module>
 <Port Function="" Width="20" Side="left" Parent="i2c_bit_shifter_tb" Datatype="reg" Name="Clk" Datasize="1" Color="#faebd7" Y="0.125" Height="20" X="-0.0222222" Inout="input"/>
 <Port Function="" Width="20" Side="left" Parent="i2c_bit_shifter_tb" Datatype="reg" Name="Rst_n" Datasize="1" Color="#00ffff" Y="0.266667" Height="20" X="-0.0222222" Inout="input"/>
 <Port Function="" Width="20" Side="left" Parent="i2c_bit_shifter_tb" Datatype="reg" Name="Cmd" Datasize="6" Color="#7fffd4" Y="0.408333" Height="20" X="-0.0222222" Inout="input"/>
 <Port Function="" Width="20" Side="left" Parent="i2c_bit_shifter_tb" Datatype="reg" Name="Go" Datasize="1" Color="#f0ffff" Y="0.55" Height="20" X="-0.0222222" Inout="input"/>
 <Port Function="" Width="20" Side="left" Parent="i2c_bit_shifter_tb" Datatype="reg" Name="Tx_DATA" Datasize="8" Color="#f5f5dc" Y="0.691667" Height="20" X="-0.0222222" Inout="input"/>
 <Port Function="" Width="20" Side="right" Parent="i2c_bit_shifter_tb" Datatype="wire" Name="Rx_DATA" Datasize="8" Color="#ffe4c4" Y="0.125" Height="20" X="0.977778" Inout="output"/>
 <Port Function="" Width="20" Side="right" Parent="i2c_bit_shifter_tb" Datatype="wire" Name="Trans_Done" Datasize="1" Color="#b8860b" Y="0.266667" Height="20" X="0.977778" Inout="output"/>
 <Port Function="" Width="20" Side="right" Parent="i2c_bit_shifter_tb" Datatype="wire" Name="ack_o" Datasize="1" Color="#ffebcd" Y="0.408333" Height="20" X="0.977778" Inout="output"/>
 <Port Function="" Width="20" Side="right" Parent="i2c_bit_shifter_tb" Datatype="wire" Name="i2c_sclk" Datasize="1" Color="#0000ff" Y="0.55" Height="20" X="0.977778" Inout="output"/>
 <Port Function="" Width="20" Side="right" Parent="i2c_bit_shifter_tb" Datatype="wire" Name="i2c_sdat" Datasize="1" Color="#8a2be2" Y="0.691667" Height="20" X="0.977778" Inout="inout"/>
 <Wire To="i2c_bit_shifter_tb#i2c_bit_shifter1>Clk" From="i2c_bit_shifter_tb>Clk" Parent="i2c_bit_shifter_tb" Datatype="wire" Name="i2c_bit_shifter_tb_Clk" Datasize="1"/>
 <Wire To="i2c_bit_shifter_tb#i2c_bit_shifter1>Rst_n" From="i2c_bit_shifter_tb>Rst_n" Parent="i2c_bit_shifter_tb" Datatype="wire" Name="i2c_bit_shifter_tb_Rst_n" Datasize="1"/>
 <Wire To="i2c_bit_shifter_tb#i2c_bit_shifter1>Cmd" From="i2c_bit_shifter_tb>Cmd" Parent="i2c_bit_shifter_tb" Datatype="wire" Name="i2c_bit_shifter_tb_Cmd" Datasize="6"/>
 <Wire To="i2c_bit_shifter_tb#i2c_bit_shifter1>Go" From="i2c_bit_shifter_tb>Go" Parent="i2c_bit_shifter_tb" Datatype="wire" Name="i2c_bit_shifter_tb_Go" Datasize="1"/>
 <Wire To="i2c_bit_shifter_tb#i2c_bit_shifter1>Tx_DATA" From="i2c_bit_shifter_tb>Tx_DATA" Parent="i2c_bit_shifter_tb" Datatype="wire" Name="i2c_bit_shifter_tb_Tx_DATA" Datasize="8"/>
 <Wire To="i2c_bit_shifter_tb>Rx_DATA" From="i2c_bit_shifter_tb#i2c_bit_shifter1>Rx_DATA" Parent="i2c_bit_shifter_tb" Datatype="wire" Name="i2c_bit_shifter1_Rx_DATA" Datasize="8"/>
 <Wire To="i2c_bit_shifter_tb>Trans_Done" From="i2c_bit_shifter_tb#i2c_bit_shifter1>Trans_Done" Parent="i2c_bit_shifter_tb" Datatype="wire" Name="i2c_bit_shifter1_Trans_Done" Datasize="1"/>
 <Wire To="i2c_bit_shifter_tb>ack_o" From="i2c_bit_shifter_tb#i2c_bit_shifter1>ack_o" Parent="i2c_bit_shifter_tb" Datatype="wire" Name="i2c_bit_shifter1_ack_o" Datasize="1"/>
 <Wire To="i2c_bit_shifter_tb>i2c_sclk" From="i2c_bit_shifter_tb#i2c_bit_shifter1>i2c_sclk" Parent="i2c_bit_shifter_tb" Datatype="wire" Name="i2c_bit_shifter1_i2c_sclk" Datasize="1"/>
 <Wire To="i2c_bit_shifter_tb>i2c_sdat" From="i2c_bit_shifter_tb#i2c_bit_shifter1>i2c_sdat" Parent="i2c_bit_shifter_tb" Datatype="wire" Name="i2c_bit_shifter1_i2c_sdat" Datasize="1"/>
 <Wire To="i2c_bit_shifter_tb>Rst_n" From="i2c_bit_shifter_tb#M24LC04B2>RESET" Parent="i2c_bit_shifter_tb" Datatype="wire" Name="M24LC04B2_RESET" Datasize="1"/>
 <Wire To="i2c_bit_shifter_tb>i2c_sclk" From="i2c_bit_shifter_tb#M24LC04B2>SCL" Parent="i2c_bit_shifter_tb" Datatype="wire" Name="i2c_bit_shifter_tb_i2c_sclk" Datasize="1"/>
 <Wire To="i2c_bit_shifter_tb>i2c_sdat" From="i2c_bit_shifter_tb#M24LC04B2>SDA" Parent="i2c_bit_shifter_tb" Datatype="wire" Name="M24LC04B2_SDA" Datasize="1"/>
</Module>
