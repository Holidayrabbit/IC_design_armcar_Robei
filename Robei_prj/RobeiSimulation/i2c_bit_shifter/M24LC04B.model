<!DOCTYPE Robei>
<Module Type="module" Include="" Parameters="" Y="0" Code="   reg&#x9;&#x9;&#x9;      SDA_DO;&#x9;&#x9;&#x9;&#x9;          // serial data - output&#xa;   reg            SDA_OE;&#x9;&#x9;&#x9;&#x9;          // serial data - output enable&#xa;&#xa;   wire&#x9;&#x9;&#x9;      SDA_DriveEnable;    &#x9;&#x9;// serial data output enable&#xa;   reg&#x9;&#x9;&#x9;      SDA_DriveEnableDlyd;&#x9;&#x9;// serial data output enable - delayed&#xa;&#xa;   wire [02:00]   ChipAddress;            // hardwired chip address&#xa;&#xa;   reg&#x9;[03:00]&#x9;&#x9;BitCounter;&#x9;&#x9;        &#x9;// serial bit counter&#xa;&#xa;   reg&#x9;&#x9;&#x9;      START_Rcvd;&#x9;&#x9;        &#x9;// START bit received flag&#xa;   reg&#x9;&#x9;&#x9;      STOP_Rcvd;&#x9;&#x9;        &#x9;// STOP bit received flag&#xa;   reg&#x9;&#x9;&#x9;      CTRL_Rcvd;&#x9;&#x9;         &#x9;// control byte received flag&#xa;   reg&#x9;&#x9;&#x9;      ADDR_Rcvd;&#x9;&#x9;        &#x9;// byte address received flag&#xa;   reg&#x9;&#x9;&#x9;      MACK_Rcvd;&#x9;&#x9;         &#x9;// master acknowledge received flag&#xa;&#xa;   reg&#x9;&#x9;&#x9;      WrCycle;&#x9;&#x9;&#x9;          // memory write cycle&#xa;   reg&#x9;&#x9;&#x9;      RdCycle;&#x9;&#x9;&#x9;          // memory read cycle&#xa;&#xa;   reg&#x9;[07:00]&#x9;&#x9;ShiftRegister;&#x9;    &#x9;&#x9;// input data shift register&#xa;&#xa;   reg  [07:00]&#x9;&#x9;ControlByte;&#x9;&#x9;      &#x9;// control byte register&#xa;   wire&#x9;&#x9;&#x9;      BlockSelect;&#x9;&#x9;      &#x9;// memory block select&#xa;   wire&#x9;&#x9;&#x9;      RdWrBit;&#x9;&#x9;&#x9;          // read/write control bit&#xa;&#xa;   reg&#x9;[08:00]&#x9;&#x9;StartAddress;&#x9;&#x9;&#x9;      // memory access starting address&#xa;   reg&#x9;[03:00]&#x9;&#x9;PageAddress;&#x9;&#x9;&#x9;      // memory page address&#xa;&#xa;   reg&#x9;[07:00]&#x9;&#x9;WrDataByte [0:15];&#x9;  &#x9;// memory write data buffer&#xa;   wire&#x9;[07:00]&#x9;&#x9;RdDataByte;&#x9;&#x9;&#x9;        // memory read data&#xa;&#xa;   reg&#x9;[15:00]&#x9;&#x9;WrCounter;&#x9;&#x9;&#x9;        // write buffer counter&#xa;&#xa;   reg&#x9;[03:00]&#x9;&#x9;WrPointer;&#x9;&#x9;&#x9;        // write buffer pointer&#xa;   reg&#x9;[08:00]&#x9;&#x9;RdPointer;&#x9;&#x9;&#x9;        // read address pointer&#xa;&#xa;   reg&#x9;&#x9;&#x9;      WriteActive;&#x9;&#x9;&#x9;      // memory write cycle active&#xa;&#xa;   reg&#x9;[07:00]&#x9;&#x9;MemoryBlock0 [0:255];&#x9;&#x9;// EEPROM data memory array&#xa;   reg&#x9;[07:00]&#x9;&#x9;MemoryBlock1 [0:255];&#x9;&#x9;// EEPROM data memory array&#xa;&#xa;   integer&#x9;&#x9;    LoopIndex;&#x9;&#x9;        &#x9;// iterative loop index&#xa;&#xa;   integer &#x9;&#x9;    tAA;&#x9;&#x9;&#x9;            &#x9;// timing parameter&#xa;   integer &#x9;&#x9;    tWC;&#x9;&#x9;&#x9;            &#x9;// timing parameter&#xa;&#xa;&#xa;// *******************************************************************************************************&#xa;// **   INITIALIZATION                                                         &#x9;&#x9;&#x9;&#x9;**&#xa;// *******************************************************************************************************&#xa;&#xa;   initial tAA = 900;                                   // SCL to SDA output delay&#xa;   initial tWC = 5000000;                               // memory write cycle time&#xa;&#xa;   initial begin&#xa;      SDA_DO = 0;&#xa;      SDA_OE = 0;&#xa;   end&#xa;&#xa;   initial begin&#xa;      START_Rcvd = 0;&#xa;      STOP_Rcvd  = 0;&#xa;      CTRL_Rcvd  = 0;&#xa;      ADDR_Rcvd  = 0;&#xa;      MACK_Rcvd  = 0;&#xa;   end&#xa;&#xa;   initial begin&#xa;      BitCounter  = 0;&#xa;      ControlByte = 0;&#xa;   end&#xa;&#xa;   initial begin&#xa;      WrCycle = 0;&#xa;      RdCycle = 0;&#xa;&#xa;      WriteActive = 0;&#xa;   end&#xa;   &#xa;   assign ChipAddress = {A2,A1,A0};&#xa;&#xa;// *******************************************************************************************************&#xa;// **   CORE LOGIC                                                    &#x9;&#x9;&#x9;&#x9;&#x9;**&#xa;// *******************************************************************************************************&#xa;// -------------------------------------------------------------------------------------------------------&#xa;//      1.01:  START Bit Detection&#xa;// -------------------------------------------------------------------------------------------------------&#xa;&#xa;   always @(negedge SDA) begin&#xa;      if (SCL == 1) begin&#xa;         START_Rcvd &lt;= 1;&#xa;         STOP_Rcvd  &lt;= 0;&#xa;         CTRL_Rcvd  &lt;= 0;&#xa;         ADDR_Rcvd  &lt;= 0;&#xa;         MACK_Rcvd  &lt;= 0;&#xa;&#xa;         WrCycle &lt;= #1 0;&#xa;         RdCycle &lt;= #1 0;&#xa;&#xa;         BitCounter &lt;= 0;&#xa;      end&#xa;   end&#xa;&#xa;// -------------------------------------------------------------------------------------------------------&#xa;//      1.02:  STOP Bit Detection&#xa;// -------------------------------------------------------------------------------------------------------&#xa;&#xa;   always @(posedge SDA) begin&#xa;      if (SCL == 1) begin&#xa;         START_Rcvd &lt;= 0;&#xa;         STOP_Rcvd  &lt;= 1;&#xa;         CTRL_Rcvd  &lt;= 0;&#xa;         ADDR_Rcvd  &lt;= 0;&#xa;         MACK_Rcvd  &lt;= 0;&#xa;&#xa;         WrCycle &lt;= #1 0;&#xa;         RdCycle &lt;= #1 0;&#xa;&#xa;         BitCounter &lt;= 10;&#xa;      end&#xa;   end&#xa;&#xa;// -------------------------------------------------------------------------------------------------------&#xa;//      1.03:  Input Shift Register&#xa;// -------------------------------------------------------------------------------------------------------&#xa;&#xa;   always @(posedge SCL) begin&#xa;      ShiftRegister[00] &lt;= SDA;&#xa;      ShiftRegister[01] &lt;= ShiftRegister[00];&#xa;      ShiftRegister[02] &lt;= ShiftRegister[01];&#xa;      ShiftRegister[03] &lt;= ShiftRegister[02];&#xa;      ShiftRegister[04] &lt;= ShiftRegister[03];&#xa;      ShiftRegister[05] &lt;= ShiftRegister[04];&#xa;      ShiftRegister[06] &lt;= ShiftRegister[05];&#xa;      ShiftRegister[07] &lt;= ShiftRegister[06];&#xa;   end&#xa;&#xa;// -------------------------------------------------------------------------------------------------------&#xa;//      1.04:  Input Bit Counter&#xa;// -------------------------------------------------------------------------------------------------------&#xa;&#xa;   always @(posedge SCL) begin&#xa;      if (BitCounter &lt; 10) BitCounter &lt;= BitCounter + 1;&#xa;   end&#xa;&#xa;// -------------------------------------------------------------------------------------------------------&#xa;//      1.05:  Control Byte Register&#xa;// -------------------------------------------------------------------------------------------------------&#xa;&#xa;   always @(negedge SCL) begin&#xa;      if (START_Rcvd &amp; (BitCounter == 8)) begin&#xa;         if (!WriteActive &amp; (ShiftRegister[07:01] == {4'b1010,ChipAddress[02:00]})) begin&#xa;            if (ShiftRegister[00] == 0) WrCycle &lt;= 1;&#xa;            if (ShiftRegister[00] == 1) RdCycle &lt;= 1;&#xa;&#xa;            ControlByte &lt;= ShiftRegister[07:00];&#xa;&#xa;            CTRL_Rcvd &lt;= 1;&#xa;         end&#xa;&#xa;         START_Rcvd &lt;= 0;&#xa;      end&#xa;   end&#xa;&#xa;   assign BlockSelect = ControlByte[01];&#xa;   assign RdWrBit     = ControlByte[00];&#xa;&#xa;// -------------------------------------------------------------------------------------------------------&#xa;//      1.06:  Byte Address Register&#xa;// -------------------------------------------------------------------------------------------------------&#xa;&#xa;   always @(negedge SCL) begin&#xa;      if (CTRL_Rcvd &amp; (BitCounter == 8)) begin&#xa;         if (RdWrBit == 0) begin&#xa;            StartAddress &lt;= {BlockSelect,ShiftRegister[07:00]};&#xa;            RdPointer    &lt;= {BlockSelect,ShiftRegister[07:00]};&#xa;&#xa;            ADDR_Rcvd &lt;= 1;&#xa;         end&#xa;&#xa;         WrCounter &lt;= 0;&#xa;         WrPointer &lt;= 0;&#xa;&#xa;         CTRL_Rcvd &lt;= 0;&#xa;      end&#xa;   end&#xa;&#xa;// -------------------------------------------------------------------------------------------------------&#xa;//      1.07:  Write Data Buffer&#xa;// -------------------------------------------------------------------------------------------------------&#xa;&#xa;   always @(negedge SCL) begin&#xa;      if (ADDR_Rcvd &amp; (BitCounter == 8)) begin&#xa;         if ((WP == 0) &amp; (RdWrBit == 0)) begin&#xa;            WrDataByte[WrPointer] &lt;= ShiftRegister[07:00];&#xa;&#xa;            WrCounter &lt;= WrCounter + 1;&#xa;            WrPointer &lt;= WrPointer + 1;&#xa;         end&#xa;      end&#xa;   end&#xa;&#xa;// -------------------------------------------------------------------------------------------------------&#xa;//      1.08:  Acknowledge Generator&#xa;// -------------------------------------------------------------------------------------------------------&#xa;&#xa;   always @(negedge SCL) begin&#xa;      if (!WriteActive) begin&#xa;         if (BitCounter == 8) begin&#xa;            if (WrCycle | (START_Rcvd &amp; (ShiftRegister[07:01] == {4'b1010,ChipAddress[02:00]}))) begin&#xa;               SDA_DO &lt;= 0;&#xa;               SDA_OE &lt;= 1;&#xa;            end &#xa;         end&#xa;         if (BitCounter == 9) begin&#xa;            BitCounter &lt;= 0;&#xa;&#xa;            if (!RdCycle) begin&#xa;               SDA_DO &lt;= 0;&#xa;               SDA_OE &lt;= 0;&#xa;            end&#xa;         end&#xa;      end&#xa;   end &#xa;&#xa;// -------------------------------------------------------------------------------------------------------&#xa;//      1.09:  Acknowledge Detect&#xa;// -------------------------------------------------------------------------------------------------------&#xa;&#xa;   always @(posedge SCL) begin&#xa;      if (RdCycle &amp; (BitCounter == 8)) begin&#xa;         if ((SDA == 0) &amp; (SDA_OE == 0)) MACK_Rcvd &lt;= 1;&#xa;      end&#xa;   end&#xa;&#xa;   always @(negedge SCL) MACK_Rcvd &lt;= 0;&#xa;&#xa;// -------------------------------------------------------------------------------------------------------&#xa;//      1.10:  Write Cycle Timer&#xa;// -------------------------------------------------------------------------------------------------------&#xa;&#xa;   always @(posedge STOP_Rcvd) begin&#xa;      if (WrCycle &amp; (WP == 0) &amp; (WrCounter > 0)) begin&#xa;         WriteActive = 1;&#xa;         #(tWC);&#xa;         WriteActive = 0;&#xa;      end&#xa;   end&#xa;&#xa;   always @(posedge STOP_Rcvd) begin&#xa;      #(1.0);&#xa;      STOP_Rcvd = 0;&#xa;   end&#xa;&#xa;// -------------------------------------------------------------------------------------------------------&#xa;//      1.11:  Write Cycle Processor&#xa;// -------------------------------------------------------------------------------------------------------&#xa;&#xa;   always @(negedge WriteActive) begin&#xa;      for (LoopIndex = 0; LoopIndex &lt; WrCounter; LoopIndex = LoopIndex + 1) begin&#xa;         if (StartAddress[08] == 0) begin&#xa;            PageAddress = StartAddress[03:00] + LoopIndex;&#xa;&#xa;            MemoryBlock0[{StartAddress[07:04],PageAddress[03:00]}] = WrDataByte[LoopIndex[03:00]];&#xa;         end&#xa;         if (StartAddress[08] == 1) begin&#xa;            PageAddress = StartAddress[03:00] + LoopIndex;&#xa;&#xa;            MemoryBlock1[{StartAddress[07:04],PageAddress[03:00]}] = WrDataByte[LoopIndex[03:00]];&#xa;         end&#xa;      end&#xa;   end&#xa;&#xa;// -------------------------------------------------------------------------------------------------------&#xa;//      1.12:  Read Data Multiplexor&#xa;// -------------------------------------------------------------------------------------------------------&#xa;&#xa;   always @(negedge SCL) begin&#xa;      if (BitCounter == 8) begin&#xa;         if (WrCycle &amp; ADDR_Rcvd) begin&#xa;            RdPointer &lt;= StartAddress + WrPointer + 1;&#xa;         end&#xa;         if (RdCycle) begin&#xa;            RdPointer &lt;= RdPointer + 1;&#xa;         end&#xa;      end&#xa;   end&#xa;&#xa;   assign RdDataByte = RdPointer[08] ? MemoryBlock1[RdPointer[07:00]] : MemoryBlock0[RdPointer[07:00]];&#xa;&#xa;// -------------------------------------------------------------------------------------------------------&#xa;//      1.13:  Read Data Processor&#xa;// -------------------------------------------------------------------------------------------------------&#xa;&#xa;   always @(negedge SCL) begin&#xa;      if (RdCycle) begin&#xa;         if (BitCounter == 8) begin&#xa;            SDA_DO &lt;= 0;&#xa;            SDA_OE &lt;= 0;&#xa;         end&#xa;         else if (BitCounter == 9) begin&#xa;            SDA_DO &lt;= RdDataByte[07];&#xa;&#xa;            if (MACK_Rcvd) SDA_OE &lt;= 1;&#xa;         end&#xa;         else begin&#xa;            SDA_DO &lt;= RdDataByte[7-BitCounter];&#xa;         end&#xa;      end&#xa;   end&#xa;&#xa;// -------------------------------------------------------------------------------------------------------&#xa;//      1.14:  SDA Data I/O Buffer&#xa;// -------------------------------------------------------------------------------------------------------&#xa;&#xa;   bufif1 (SDA, 1'b0, SDA_DriveEnableDlyd);&#xa;&#xa;   assign SDA_DriveEnable = !SDA_DO &amp; SDA_OE;&#xa;   always @(SDA_DriveEnable) SDA_DriveEnableDlyd &lt;= #(tAA) SDA_DriveEnable;&#xa;&#xa;&#xa;// *******************************************************************************************************&#xa;// **   DEBUG LOGIC                                                           &#x9;&#x9;&#x9;&#x9;**&#xa;// *******************************************************************************************************&#xa;// -------------------------------------------------------------------------------------------------------&#xa;//      2.01:  Memory Data Bytes&#xa;// -------------------------------------------------------------------------------------------------------&#xa;&#xa;   wire [07:00]&#x9;MemoryByte0_00 = MemoryBlock0[00];&#xa;   wire [07:00]&#x9;MemoryByte0_01 = MemoryBlock0[01];&#xa;   wire [07:00]&#x9;MemoryByte0_02 = MemoryBlock0[02];&#xa;   wire [07:00]&#x9;MemoryByte0_03 = MemoryBlock0[03];&#xa;   wire [07:00]&#x9;MemoryByte0_04 = MemoryBlock0[04];&#xa;   wire [07:00]&#x9;MemoryByte0_05 = MemoryBlock0[05];&#xa;   wire [07:00]&#x9;MemoryByte0_06 = MemoryBlock0[06];&#xa;   wire [07:00]&#x9;MemoryByte0_07 = MemoryBlock0[07];&#xa;&#xa;   wire [07:00]&#x9;MemoryByte0_08 = MemoryBlock0[08];&#xa;   wire [07:00]&#x9;MemoryByte0_09 = MemoryBlock0[09];&#xa;   wire [07:00]&#x9;MemoryByte0_0A = MemoryBlock0[10];&#xa;   wire [07:00]&#x9;MemoryByte0_0B = MemoryBlock0[11];&#xa;   wire [07:00]&#x9;MemoryByte0_0C = MemoryBlock0[12];&#xa;   wire [07:00]&#x9;MemoryByte0_0D = MemoryBlock0[13];&#xa;   wire [07:00]&#x9;MemoryByte0_0E = MemoryBlock0[14];&#xa;   wire [07:00]&#x9;MemoryByte0_0F = MemoryBlock0[15];&#xa;&#xa;   wire [07:00]&#x9;MemoryByte1_00 = MemoryBlock1[00];&#xa;   wire [07:00]&#x9;MemoryByte1_01 = MemoryBlock1[01];&#xa;   wire [07:00]&#x9;MemoryByte1_02 = MemoryBlock1[02];&#xa;   wire [07:00]&#x9;MemoryByte1_03 = MemoryBlock1[03];&#xa;   wire [07:00]&#x9;MemoryByte1_04 = MemoryBlock1[04];&#xa;   wire [07:00]&#x9;MemoryByte1_05 = MemoryBlock1[05];&#xa;   wire [07:00]&#x9;MemoryByte1_06 = MemoryBlock1[06];&#xa;   wire [07:00]&#x9;MemoryByte1_07 = MemoryBlock1[07];&#xa;&#xa;   wire [07:00]&#x9;MemoryByte1_08 = MemoryBlock1[08];&#xa;   wire [07:00]&#x9;MemoryByte1_09 = MemoryBlock1[09];&#xa;   wire [07:00]&#x9;MemoryByte1_0A = MemoryBlock1[10];&#xa;   wire [07:00]&#x9;MemoryByte1_0B = MemoryBlock1[11];&#xa;   wire [07:00]&#x9;MemoryByte1_0C = MemoryBlock1[12];&#xa;   wire [07:00]&#x9;MemoryByte1_0D = MemoryBlock1[13];&#xa;   wire [07:00]&#x9;MemoryByte1_0E = MemoryBlock1[14];&#xa;   wire [07:00]&#x9;MemoryByte1_0F = MemoryBlock1[15];&#xa;&#xa;// -------------------------------------------------------------------------------------------------------&#xa;//      2.02:  Write Data Buffer&#xa;// -------------------------------------------------------------------------------------------------------&#xa;&#xa;   wire [07:00]&#x9;WriteData_0 = WrDataByte[00];&#xa;   wire [07:00]&#x9;WriteData_1 = WrDataByte[01];&#xa;   wire [07:00]&#x9;WriteData_2 = WrDataByte[02];&#xa;   wire [07:00]&#x9;WriteData_3 = WrDataByte[03];&#xa;   wire [07:00]&#x9;WriteData_4 = WrDataByte[04];&#xa;   wire [07:00]&#x9;WriteData_5 = WrDataByte[05];&#xa;   wire [07:00]&#x9;WriteData_6 = WrDataByte[06];&#xa;   wire [07:00]&#x9;WriteData_7 = WrDataByte[07];&#xa;   wire [07:00]&#x9;WriteData_8 = WrDataByte[08];&#xa;   wire [07:00]&#x9;WriteData_9 = WrDataByte[09];&#xa;   wire [07:00]&#x9;WriteData_A = WrDataByte[10];&#xa;   wire [07:00]&#x9;WriteData_B = WrDataByte[11];&#xa;   wire [07:00]&#x9;WriteData_C = WrDataByte[12];&#xa;   wire [07:00]&#x9;WriteData_D = WrDataByte[13];&#xa;   wire [07:00]&#x9;WriteData_E = WrDataByte[14];&#xa;   wire [07:00]&#x9;WriteData_F = WrDataByte[15];&#xa;&#xa;&#xa;// *******************************************************************************************************&#xa;// **   TIMING CHECKS                                                           &#x9;&#x9;&#x9;**&#xa;// *******************************************************************************************************&#xa;&#xa;   wire TimingCheckEnable = (RESET == 0) &amp; (SDA_OE == 0);&#xa;&#xa;   specify&#xa;      specparam&#xa;         tHI = 600,                                     // SCL pulse width - high&#xa;         tLO = 1300,                                    // SCL pulse width - low&#xa;&#x9;&#x9;&#x9;   tSU_STA = 600,                                 // SCL to SDA setup time&#xa;         tHD_STA = 600,                                 // SCL to SDA hold time&#xa;         tSU_DAT = 100,                                 // SDA to SCL setup time&#xa;         tSU_STO = 600,                                 // SCL to SDA setup time&#xa;         tBUF = 1300;                                   // Bus free time&#xa;&#x9;&#x9;&#x9;&#xa;      $width (posedge SCL, tHI);&#xa;      $width (negedge SCL, tLO);&#xa;&#xa;      $width (posedge SDA &amp;&amp;&amp; SCL, tBUF);&#xa;&#xa;      $setup (posedge SCL, negedge SDA &amp;&amp;&amp; TimingCheckEnable, tSU_STA);&#xa;      $setup (SDA, posedge SCL &amp;&amp;&amp; TimingCheckEnable, tSU_DAT);&#xa;      $setup (posedge SCL, posedge SDA &amp;&amp;&amp; TimingCheckEnable, tSU_STO);&#xa;&#xa;      $hold  (negedge SDA &amp;&amp;&amp; TimingCheckEnable, negedge SCL, tHD_STA);&#xa;   endspecify&#xa;&#xa;&#xa;&#xa;" Color="#d3d3d3" X="0" Comment="" Name="M24LC04B" Class="module" Parent="0" Height="600" File="Current/M24LC04B.model" Width="900">
 <Port Function="" Y="0.108333" Color="#faebd7" X="-0.0222222" Datatype="wire" Inout="input" Name="A0" Datasize="1" Parent="M24LC04B" Side="left" Height="20" Width="20"/>
 <Port Function="" Y="0.233333" Color="#00ffff" X="-0.0222222" Datatype="wire" Inout="input" Name="A1" Datasize="1" Parent="M24LC04B" Side="left" Height="20" Width="20"/>
 <Port Function="" Y="0.358333" Color="#7fffd4" X="-0.0222222" Datatype="wire" Inout="input" Name="A2" Datasize="1" Parent="M24LC04B" Side="left" Height="20" Width="20"/>
 <Port Function="" Y="0.483333" Color="#f0ffff" X="-0.0222222" Datatype="wire" Inout="input" Name="WP" Datasize="1" Parent="M24LC04B" Side="left" Height="20" Width="20"/>
 <Port Function="" Y="0.608333" Color="#f5f5dc" X="-0.0222222" Datatype="wire" Inout="input" Name="SCL" Datasize="1" Parent="M24LC04B" Side="left" Height="20" Width="20"/>
 <Port Function="" Y="0.733333" Color="#ffe4c4" X="-0.0222222" Datatype="wire" Inout="input" Name="RESET" Datasize="1" Parent="M24LC04B" Side="left" Height="20" Width="20"/>
 <Port Function="" Y="0.316667" Color="#b8860b" X="0.977778" Datatype="wire" Inout="inout" Name="SDA" Datasize="1" Parent="M24LC04B" Side="right" Height="20" Width="20"/>
</Module>
