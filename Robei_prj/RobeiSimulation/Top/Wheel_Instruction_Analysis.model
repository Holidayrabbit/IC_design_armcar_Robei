<!DOCTYPE Robei>
<Module Type="module" X="0" Height="600" Code="&#x9;&#x9;/*&#xa;&#x9;&#x9;Readme&#xa;&#x9;&#x9;convert 模块负责指令到读写操作的转换&#xa;&#x9;&#x9;1.当来自 uart_cmd 的 cmdvalid 信号有效的时候， convert 模块会根据功能码（num_cmd）判断当前的操作模式以及实际读写的数据量。&#xa;&#x9;&#x9;//num_cmd[7]为0代表写操作   num_cmd[3:0]表示数据长度&#xa;&#x9;&#x9;2.如果是写操作，&#xa;&#x9;&#x9;则将地址和待写入数据发送给前面章节中我们设计好的 I2C 控制器。&#xa;&#x9;&#x9;为了让数据能够成功被 I2C 控制器接收，需要在传输每字节数据时，产生一个写请求信&#xa;&#x9;&#x9;号给 I2C 控制器。同时，因为 I2C 控制器每次只支持单个字节的收发，所以我们需要在每写&#xa;&#x9;&#x9;完 1 字节数据后等待 I2C 控制器的应答信号（ack），以确保数据成功写入。&#xa;&#x9;&#x9;&#xa;&#x9;&#x9;3.如果是读操作，除了将地址传输给 I2C 控制器外，在读取每 1 字节数据之前，都需要产&#xa;&#x9;&#x9;生一次读请求信号。在 I2C 控制器对读请求信号进行响应后才能读去这 1 字节的数据，如此&#xa;&#x9;&#x9;循环，直到读取完所需的数据量，并最终输出给多字节串口发送模块。&#xa;&#x9;&#x9;&#xa;&#x9;&#x9;3.定义 IDLE、&#xa;&#x9;&#x9;DO_WR、 WAIT_WR_DONE、 DO_RD、 WAIT_RD_DONE 五个状态。&#xa;&#x9;&#x9;让 IDLE 态等待 cmdvalid 信号，判断读写操作； &#xa;&#x9;&#x9;DO_WR 态产生写请求信号、数据和地址； &#xa;&#x9;&#x9;WAIT_WR_DONE 态判断写传输是否完成； &#xa;&#x9;&#x9;DO_RD 态产生读请求信号与地址； &#xa;&#x9;&#x9;WAIT_RD_DONE 态读取数据，并判断当前读操作是否成功。来实现以上设计目的。&#xa;&#x9;&#x9;&#xa;&#x9;&#x9;*/&#xa;&#x9;&#x9;&#xa;&#x9;&#x9;    reg motor_rd_err,motor_wr_err;  //高电平表示读取/写失败&#xa;&#x9;&#x9;       &#xa;&#x9;&#x9;&#x9;reg [2:0]state;&#x9;&#x9;&#xa;&#x9;&#x9;    reg [6:0]data_cnt;&#x9;&#x9;//表示数据传输进程&#x9; &#xa;&#x9;&#x9;&#x9; &#xa;&#x9;&#x9;    localparam &#xa;&#x9;&#x9;        IDLE = 0,&#xa;&#x9;&#x9;        DO_WR = 1,&#xa;&#x9;&#x9;        WAIT_WR_DONE  = 2,&#xa;&#x9;&#x9;        DO_RD = 3,&#xa;&#x9;&#x9;        WAIT_RD_DONE = 4;&#xa;&#x9;&#xa;&#x9;    &#x9;always@(posedge Clk)&#xa;&#x9;        data_len &lt;= num_cmd[3:0];&#xa;&#x9;&#x9;        &#xa;&#x9;&#x9;    always@(posedge Clk or negedge Rst_n)&#xa;&#x9;&#x9;    if(!Rst_n)begin&#xa;&#x9;&#x9;        state &lt;= IDLE;&#xa;&#x9;&#x9;        wrreg_req &lt;= 1'd0;&#xa;&#x9;&#x9;        addr &lt;= 8'd0;&#xa;&#x9;&#x9;        wrdata &lt;= 8'd0;&#xa;&#x9;&#x9;        data_cnt &lt;= 7'd0;&#xa;&#x9;&#x9;        motor_wr_err &lt;= 1'd0;&#xa;&#x9;&#x9;        motor_wr_done &lt;= 1'd0;   &#xa;&#x9;&#x9;        motor_rd_done &lt;= 1'd0;&#xa;&#x9;&#x9;        motor_rd_err &lt;= 1'd0;&#xa;&#x9;&#x9;        rdreg_req &lt;= 1'd0;   &#xa;&#x9;&#x9;        motor_rddata &lt;= 32'd0;&#xa;&#x9;&#xa;&#x9;&#x9;    end&#xa;&#x9;&#x9;    else begin&#xa;&#x9;&#x9;    case(state)&#xa;&#x9;&#x9;        IDLE:&#xa;&#x9;&#x9;            begin&#xa;&#x9;&#x9;                wrreg_req &lt;= 1'd0;&#xa;&#x9;&#x9;                addr &lt;= 8'd0;&#xa;&#x9;&#x9;                wrdata &lt;= 8'd0;&#xa;&#x9;&#x9;                data_cnt &lt;= 7'd0;&#xa;&#x9;&#x9;                motor_wr_err &lt;= 1'd0;   &#xa;&#x9;&#x9;                motor_rd_done &lt;= 1'd0;&#xa;&#x9;&#x9;                motor_rd_err &lt;= 1'd0;&#xa;&#x9;&#x9;                rdreg_req &lt;= 1'd0; &#xa;&#xa;&#x9;&#x9;                if(cmd_valid &amp;&amp; !num_cmd[7]&amp;&amp;num_cmd[3:0])&#x9;&#x9;&#x9;//num_cmd[7]为0代表写操作&#xa;&#x9;&#x9;                    state &lt;= DO_WR;&#xa;&#x9;&#x9;                else if(cmd_valid &amp;&amp; num_cmd[7])begin&#xa;&#x9;&#x9;                    state &lt;= DO_RD;&#xa;&#x9;&#x9;                    motor_rddata &lt;= 32'd0;&#xa;&#x9;&#x9;                end&#xa;&#x9;&#x9;                else&#xa;&#x9;&#x9;                    state &lt;= IDLE;&#xa;&#x9;&#x9;            end&#xa;&#x9;&#x9;                &#xa;&#x9;&#x9;        DO_WR:&#xa;&#x9;&#x9;            begin&#xa;&#x9;&#x9;                wrreg_req &lt;= 1'd1;&#xa;&#x9;&#x9;                addr &lt;= address;&#xa;&#x9;&#x9;                state &lt;= WAIT_WR_DONE;&#xa;&#x9;&#xa;&#x9;//&#x9;&#x9;&#x9;&#x9;&#x9;wrdata &lt;= cmd_data;&#xa;&#x9;&#xa;&#x9;&#x9;                case(data_cnt)&#x9;&#x9;&#xa;&#x9;&#x9;                    0:wrdata &lt;= cmd_data;&#xa;&#x9;&#x9;                    1:wrdata &lt;= cmd_data;&#xa;&#x9;&#x9;                    2:wrdata &lt;= cmd_data;&#xa;&#x9;&#x9;                    3:wrdata&lt;= cmd_data;&#xa;&#x9;&#x9;                    default:wrdata &lt;= 0;&#xa;&#x9;&#x9;                endcase&#xa;&#x9;&#xa;&#x9;&#x9;            end&#xa;&#x9;&#x9;            &#xa;&#x9;&#x9;        WAIT_WR_DONE:&#xa;&#x9;&#x9;            begin&#xa;&#x9;&#x9;                wrreg_req &lt;= 1'd0;&#xa;&#x9;&#x9;                if(RW_Done)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;                    if(!ack)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;begin   //ACK为0表示有正常应答&#xa;&#x9;&#x9;                        if(data_cnt >= num_cmd[3:0] - 1)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;                            state &lt;= IDLE;&#xa;&#x9;&#x9;                            motor_wr_done &lt;= 1'd1;&#xa;&#x9;&#x9;                            data_cnt &lt;= 0;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else &#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;                            state &lt;= DO_WR;&#xa;&#x9;&#x9;                            data_cnt &lt;= data_cnt + 1'd1;    &#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end    &#xa;&#x9;       &#xa;&#x9;&#x9;                    end&#xa;&#x9;&#x9;                    &#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else begin  //ACK为1表示无应答&#xa;&#x9;&#x9;                        state &lt;= IDLE;&#xa;&#x9;&#x9;                        motor_wr_err &lt;= 1'd1;                 &#xa;&#x9;&#x9;                    end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;                &#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else begin&#xa;&#x9;&#x9;                    state &lt;= WAIT_WR_DONE;&#xa;&#x9;&#x9;                    data_cnt &lt;= data_cnt;&#xa;&#x9;&#x9;                end&#xa;&#x9;&#x9;            end&#xa;&#x9;&#x9;&#xa;&#x9;&#x9;        DO_RD:&#xa;&#x9;&#x9;            begin&#xa;&#x9;&#x9;                rdreg_req &lt;= 1'd1;&#xa;&#x9;&#x9;                state &lt;= WAIT_RD_DONE;&#xa;&#x9;&#x9;                addr &lt;= address;&#xa;&#x9;&#x9;            end  &#xa;&#x9;&#x9;                      &#xa;&#x9;&#x9;        WAIT_RD_DONE:&#xa;&#x9;&#x9;            begin&#xa;&#x9;&#x9;                rdreg_req &lt;= 1'd0;&#xa;&#x9;&#x9;                if(RW_Done)begin&#xa;&#x9;&#x9;                    if(!ack)begin   //ACK为0表示有正常应答&#xa;&#x9;&#x9;                        case(data_cnt)&#xa;&#x9;&#xa;&#x9;&#x9;                            0:motor_rddata[31:24] &lt;= rddata;&#xa;&#x9;&#x9;                            1:motor_rddata[23:16] &lt;= rddata;&#xa;&#x9;&#x9;                            2:motor_rddata[15:8] &lt;= rddata;&#xa;&#x9;&#x9;                            3:motor_rddata[7:0] &lt;= rddata;&#xa;&#x9;&#x9;                            default:;&#xa;&#x9;&#x9;                        endcase&#xa;&#x9;&#x9;                        if(data_cnt >= (num_cmd &amp; 8'h7F) - 1)begin&#xa;&#x9;&#x9;                            state &lt;= IDLE;&#xa;&#x9;&#x9;                            motor_rd_done &lt;= 1'd1;&#xa;&#x9;&#x9;                            data_cnt &lt;= 0;&#xa;&#x9;&#x9;                        end&#xa;&#x9;&#x9;                        else begin&#xa;&#x9;&#x9;                            state &lt;= DO_RD;&#xa;&#x9;&#x9;                            data_cnt &lt;= data_cnt + 1'd1;    &#xa;&#x9;&#x9;                        end           &#xa;&#x9;&#x9;                    end&#xa;&#x9;&#x9;                    else begin  //ACK为1表示无应答&#xa;&#x9;&#x9;                        state &lt;= IDLE;&#xa;&#x9;&#x9;                        motor_rd_err &lt;= 1'd1;                 &#xa;&#x9;&#x9;                    end&#xa;&#x9;&#x9;                end&#xa;&#x9;&#x9;                else begin&#xa;&#x9;&#x9;                    state &lt;= WAIT_RD_DONE;&#xa;&#x9;&#x9;                    data_cnt &lt;= data_cnt;&#xa;&#x9;&#x9;                end&#xa;&#x9;&#x9;            end&#xa;&#x9;&#x9;            &#xa;&#x9;&#x9;            default:state &lt;= IDLE;&#xa;&#x9;&#x9;        endcase&#xa;&#x9;&#x9;    end" Include="" Parameters="" Name="Wheel_Instruction_Analysis" Color="#d3d3d3" Y="0" Class="module" File="Current/Wheel_Instruction_Analysis.model" Comment="" Width="900" Parent="0">
 <Port X="-0.0222222" Height="20" Datasize="1" Name="Clk" Color="#faebd7" Side="left" Y="0.0733333" Datatype="wire" Inout="input" Function="" Width="20" Parent="Wheel_Instruction_Analysis"/>
 <Port X="-0.0222222" Height="20" Datasize="1" Name="Rst_n" Color="#00ffff" Side="left" Y="0.163333" Datatype="wire" Inout="input" Function="" Width="20" Parent="Wheel_Instruction_Analysis"/>
 <Port X="-0.0222222" Height="20" Datasize="8" Name="rddata" Color="#7fffd4" Side="left" Y="0.253333" Datatype="wire" Inout="input" Function="" Width="20" Parent="Wheel_Instruction_Analysis"/>
 <Port X="-0.0222222" Height="20" Datasize="1" Name="RW_Done" Color="#f0ffff" Side="left" Y="0.343333" Datatype="wire" Inout="input" Function="" Width="20" Parent="Wheel_Instruction_Analysis"/>
 <Port X="-0.0222222" Height="20" Datasize="1" Name="ack" Color="#f5f5dc" Side="left" Y="0.433333" Datatype="wire" Inout="input" Function="" Width="20" Parent="Wheel_Instruction_Analysis"/>
 <Port X="-0.0222222" Height="20" Datasize="8" Name="address" Color="#ffe4c4" Side="left" Y="0.523333" Datatype="wire" Inout="input" Function="" Width="20" Parent="Wheel_Instruction_Analysis"/>
 <Port X="-0.0222222" Height="20" Datasize="32" Name="cmd_data" Color="#b8860b" Side="left" Y="0.613333" Datatype="wire" Inout="input" Function="" Width="20" Parent="Wheel_Instruction_Analysis"/>
 <Port X="-0.0222222" Height="20" Datasize="8" Name="num_cmd" Color="#ffebcd" Side="left" Y="0.703333" Datatype="wire" Inout="input" Function="" Width="20" Parent="Wheel_Instruction_Analysis"/>
 <Port X="0.977778" Height="20" Datasize="32" Name="motor_rddata" Color="#0000ff" Side="right" Y="0.0833333" Datatype="reg" Inout="output" Function="" Width="20" Parent="Wheel_Instruction_Analysis"/>
 <Port X="0.977778" Height="20" Datasize="32" Name="wrdata" Color="#8a2be2" Side="right" Y="0.183333" Datatype="reg" Inout="output" Function="" Width="20" Parent="Wheel_Instruction_Analysis"/>
 <Port X="0.977778" Height="20" Datasize="1" Name="wrreg_req" Color="#a52a2a" Side="right" Y="0.283333" Datatype="reg" Inout="output" Function="" Width="20" Parent="Wheel_Instruction_Analysis"/>
 <Port X="0.977778" Height="20" Datasize="1" Name="rdreg_req" Color="#deb887" Side="right" Y="0.383333" Datatype="reg" Inout="output" Function="" Width="20" Parent="Wheel_Instruction_Analysis"/>
 <Port X="0.977778" Height="20" Datasize="8" Name="addr" Color="#5f9ea0" Side="right" Y="0.483333" Datatype="reg" Inout="output" Function="" Width="20" Parent="Wheel_Instruction_Analysis"/>
 <Port X="0.977778" Height="20" Datasize="1" Name="motor_rd_done" Color="#d2691e" Side="right" Y="0.583333" Datatype="reg" Inout="output" Function="" Width="20" Parent="Wheel_Instruction_Analysis"/>
 <Port X="0.977778" Height="20" Datasize="1" Name="motor_wr_done" Color="#ff7f50" Side="right" Y="0.683333" Datatype="reg" Inout="output" Function="" Width="20" Parent="Wheel_Instruction_Analysis"/>
 <Port X="-0.0222222" Height="20" Datasize="1" Name="cmd_valid" Color="#6495ed" Side="left" Y="0.793333" Datatype="wire" Inout="input" Function="" Width="20" Parent="Wheel_Instruction_Analysis"/>
 <Port X="0.977778" Height="20" Datasize="4" Name="data_len" Color="#6495ed" Side="right" Y="0.783333" Datatype="reg" Inout="output" Function="" Width="20" Parent="Wheel_Instruction_Analysis"/>
</Module>
