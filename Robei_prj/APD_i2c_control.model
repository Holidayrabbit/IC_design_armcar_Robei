<!DOCTYPE Robei>
<Module Type="module" Color="#d3d3d3" Width="900" Y="0" Code="&#x9;&#x9;&#x9;localparam  APD_address=7'b011_1001; &#xa;&#x9;&#x9;&#x9;localparam  APD_begin_value=8'b0000_0011; &#x9;&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;localparam  APD_begin=8'h80; &#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;localparam  Clear_Low=8'h94; &#xa;&#x9;&#x9;&#x9;localparam  Clear_High=8'h95; &#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;localparam  Red_Low=8'h96; &#xa;&#x9;&#x9;&#x9;localparam  Red_High=8'h97; &#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;localparam  Green_Low=8'h98; &#xa;&#x9;&#x9;&#x9;localparam  Green_High=8'h99; &#x9;&#x9;&#xa;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;localparam  Blue_Low=8'h9A; &#xa;&#x9;&#x9;&#x9;localparam  Blue_High=8'h9B; &#x9;&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;/***********颜色识别程序参数在这里调*********/&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;localparam  clear_small=8'h10; &#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;localparam  clear_middle=8'h35; &#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;localparam  clear_big=8'h70;&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;localparam  BLACK=8'h1; &#xa;&#x9;&#x9;&#x9;localparam  WHITE=8'h2; &#xa;&#x9;&#x9;&#x9;localparam  YELLOW=8'h3;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;localparam  RED=8'h4; &#xa;&#x9;&#x9;&#x9;localparam  GREEN=8'h5; &#xa;&#x9;&#x9;&#x9;localparam  BLUE=8'h6;&#x9;&#x9;&#x9;&#xa;&#xa;&#x9;&#x9;&#x9;/****************************************/&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#xa;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;//颜色数值缓存&#xa;&#x9;&#x9;&#x9;reg [5:0]Cmd;&#xa;&#x9;&#x9;&#x9;reg [7:0]Tx_DATA;&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;reg [7:0]Temp_CL;&#xa;&#x9;&#x9;&#x9;reg [7:0]Temp_CH;&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;reg [7:0]Temp_RL;&#xa;&#x9;&#x9;&#x9;reg [7:0]Temp_RH;&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;reg [7:0]Temp_GL;&#xa;&#x9;&#x9;&#x9;reg [7:0]Temp_GH;&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;reg [7:0]Temp_BL;&#xa;&#x9;&#x9;&#x9;reg [7:0]Temp_BH;&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;reg [63:0] Color_data;&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;wire Trans_Done;&#xa;&#x9;&#x9;&#x9;wire ack_o;&#xa;&#x9;&#x9;&#x9;reg Go;&#xa;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;//buffer for input data or out put data&#xa;&#x9;&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;wire [7:0]Rx_DATA;&#xa;&#x9;&#x9;&#x9;reg [63:0] data_LM75A; //temperature data&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;localparam &#xa;&#x9;&#x9;&#x9;&#x9;WR   = 6'b000001,   //写请求&#xa;&#x9;&#x9;&#x9;&#x9;STA  = 6'b000010,   //起始位请求&#xa;&#x9;&#x9;&#x9;&#x9;RD   = 6'b000100,   //读请求&#xa;&#x9;&#x9;&#x9;&#x9;STO  = 6'b001000,   //停止位请求&#xa;&#x9;&#x9;&#x9;&#x9;ACK  = 6'b010000,   //应答位请求&#xa;&#x9;&#x9;&#x9;&#x9;NACK = 6'b100000;   //无应答请求&#xa;&#x9;&#x9;&#xa;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;reg [6:0]state;&#xa;&#x9;&#x9;&#x9;reg [7:0]cnt;&#xa;&#x9;&#x9;&#x9;reg init_flag;&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;localparam&#xa;&#x9;&#x9;&#x9;&#x9;IDLE         = 7'b0000001,   //空闲状态&#xa;&#x9;&#x9;&#x9;&#x9;WR_REG       = 7'b0000010,   //写寄存器状态&#xa;&#x9;&#x9;&#x9;&#x9;WAIT_WR_DONE = 7'b0000100,   //等待写寄存器完成状态&#xa;&#x9;&#x9;&#x9;&#x9;WR_REG_DONE  = 7'b0001000,   //写寄存器完成状态&#xa;&#x9;&#x9;&#x9;&#x9;RD_REG       = 7'b0010000,   //读寄存器状态&#xa;&#x9;&#x9;&#x9;&#x9;WAIT_RD_DONE = 7'b0100000,   //等待读寄存器完成状态&#xa;&#x9;&#x9;&#x9;&#x9;RD_REG_DONE  = 7'b1000000;   //读寄存器完成状态&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;always@(posedge Clk or negedge Rst_n)&#xa;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;if(!Rst_n)begin&#xa;&#x9;&#x9;&#x9;&#x9;Cmd &lt;= 6'd0;&#xa;&#x9;&#x9;&#x9;&#x9;Tx_DATA &lt;= 8'd0;&#xa;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;Temp_CL &lt;= 8'd0;&#xa;&#x9;&#x9;&#x9;&#x9;Temp_CH &lt;= 8'd0;&#xa;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;Temp_RL &lt;= 8'd0;&#xa;&#x9;&#x9;&#x9;&#x9;Temp_RH &lt;= 8'd0;&#xa;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;Temp_GL &lt;= 8'd0;&#xa;&#x9;&#x9;&#x9;&#x9;Temp_GH &lt;= 8'd0;&#xa;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;Temp_BL &lt;= 8'd0;&#xa;&#x9;&#x9;&#x9;&#x9;Temp_BH &lt;= 8'd0;&#xa;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;init_flag &lt;= 1'b0;&#xa;&#x9;&#x9;&#x9;&#x9;Go &lt;= 1'b0;&#xa;&#x9;&#x9;&#x9;&#x9;rddata &lt;= 0;&#xa;&#x9;&#x9;&#x9;&#x9;state &lt;= IDLE;&#xa;&#x9;&#x9;&#x9;&#x9;ack &lt;= 0;&#xa;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;else begin&#xa;&#x9;&#x9;&#x9;&#x9;case(state)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;IDLE:&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cnt &lt;= 0;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ack &lt;= 0;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;RW_Done &lt;= 1'b0;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(rdreg_req)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= RD_REG;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= IDLE;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;RD_REG:&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= WAIT_RD_DONE;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(init_flag == 0)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cnt &lt;= 32;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;init_flag &lt;= 1;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case(cnt)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;0:write_byte(WR | STA, {APD_address,1'b0});&#x9;&#x9;&#x9;//发送APD的地址和读信号（1）&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;1:write_byte(WR , Clear_Low);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;2:write_byte(WR | STA, {APD_address,1'b1});&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;3:read_byte(RD | NACK | STO);&#xa;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;4:write_byte(WR | STA, {APD_address,1'b0});&#x9;&#x9;&#x9;//发送APD的地址和读信号（1）&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;5:write_byte(WR , Clear_High);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;6:write_byte(WR | STA, {APD_address,1'b1});&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;7:read_byte(RD | NACK | STO);&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;8:write_byte(WR | STA, {APD_address,1'b0});&#x9;&#x9;&#x9;//发送APD的地址和读信号（1）&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;9:write_byte(WR , Red_Low);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;10:write_byte(WR | STA, {APD_address,1'b1});&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;11:read_byte(RD | NACK | STO);&#xa;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;12:write_byte(WR | STA, {APD_address,1'b0});&#x9;&#x9;&#x9;//发送APD的地址和读信号（1）&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;13:write_byte(WR , Red_High);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;14:write_byte(WR | STA, {APD_address,1'b1});&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;15:read_byte(RD | NACK | STO);&#x9;&#x9;&#x9;&#xa;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;16:write_byte(WR | STA, {APD_address,1'b0});&#x9;&#x9;&#x9;//发送APD的地址和读信号（1）&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;17:write_byte(WR , Green_Low);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;18:write_byte(WR | STA, {APD_address,1'b1});&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;19:read_byte(RD | NACK | STO);&#xa;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;20:write_byte(WR | STA, {APD_address,1'b0});&#x9;&#x9;&#x9;//发送APD的地址和读信号（1）&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;21:write_byte(WR , Green_High);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;22:write_byte(WR | STA, {APD_address,1'b1});&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;23:read_byte(RD | NACK | STO);&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;24:write_byte(WR | STA, {APD_address,1'b0});&#x9;&#x9;&#x9;//发送APD的地址和读信号（1）&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;25:write_byte(WR , Blue_Low);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;26:write_byte(WR | STA, {APD_address,1'b1});&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;27:read_byte(RD | NACK | STO);&#xa;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;28:write_byte(WR | STA, {APD_address,1'b0});&#x9;&#x9;&#x9;//发送APD的地址和读信号（1）&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;29:write_byte(WR , Blue_High);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;30:write_byte(WR | STA, {APD_address,1'b1});&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;31:read_byte(RD | NACK | STO);&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;32:write_byte(WR | STA, {APD_address,1'b0});&#x9;&#x9;&#x9;//发送APD的地址和读信号（1）&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;33:write_byte(WR , APD_begin);&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;34:write_byte(WR | STO, APD_begin_value);&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;default:;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endcase&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;WAIT_RD_DONE:&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Go &lt;= 1'b0; &#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(Trans_Done)begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(cnt &lt;= 1) ack &lt;= ack | ack_o;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case(cnt)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;0: begin cnt &lt;= 1; state &lt;= RD_REG;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;1: begin cnt &lt;= 2; state &lt;= RD_REG;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;2: begin cnt &lt;= 3; state &lt;= RD_REG;end&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;3: &#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;begin &#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Temp_CL &lt;= Rx_DATA;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cnt &lt;= 4;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= RD_REG;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;4: begin cnt &lt;= 5; state &lt;= RD_REG;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;5: begin cnt &lt;= 6; state &lt;= RD_REG;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;6: begin cnt &lt;= 7; state &lt;= RD_REG;end&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;7: &#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;begin &#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Temp_CH &lt;= Rx_DATA;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cnt &lt;= 8;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= RD_REG;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;8: begin cnt &lt;= 9; state &lt;= RD_REG;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;9: begin cnt &lt;= 10; state &lt;= RD_REG;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;10: begin cnt &lt;= 11; state &lt;= RD_REG;end&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;11: &#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;begin &#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Temp_RL &lt;= Rx_DATA;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cnt &lt;= 12;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= RD_REG;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;12: begin cnt &lt;= 13; state &lt;= RD_REG;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;13: begin cnt &lt;= 14; state &lt;= RD_REG;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;14: begin cnt &lt;= 15; state &lt;= RD_REG;end&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;15: &#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;begin &#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Temp_RH &lt;= Rx_DATA;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cnt &lt;= 16;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= RD_REG;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;16: begin cnt &lt;= 17; state &lt;= RD_REG;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;17: begin cnt &lt;= 18; state &lt;= RD_REG;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;18: begin cnt &lt;= 19; state &lt;= RD_REG;end&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;19: &#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;begin &#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Temp_GL &lt;= Rx_DATA;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cnt &lt;= 20;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= RD_REG;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;20: begin cnt &lt;= 21; state &lt;= RD_REG;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;21: begin cnt &lt;= 22; state &lt;= RD_REG;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;22: begin cnt &lt;= 23; state &lt;= RD_REG;end&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;23: &#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;begin &#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Temp_GH &lt;= Rx_DATA;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cnt &lt;= 24;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= RD_REG;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;24: begin cnt &lt;= 25; state &lt;= RD_REG;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;25: begin cnt &lt;= 26; state &lt;= RD_REG;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;26: begin cnt &lt;= 27; state &lt;= RD_REG;end&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;27: &#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;begin &#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Temp_BL &lt;= Rx_DATA;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cnt &lt;= 28;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= RD_REG;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;28: begin cnt &lt;= 29; state &lt;= RD_REG;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;29: begin cnt &lt;= 30; state &lt;= RD_REG;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;30: begin cnt &lt;= 31; state &lt;= RD_REG;end&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;31: &#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;begin &#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Temp_BH &lt;= Rx_DATA;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cnt &lt;= 0;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= RD_REG_DONE;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;32: begin cnt &lt;= 33; state &lt;= RD_REG;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;33: begin cnt &lt;= 34; state &lt;= RD_REG;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;34: &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;begin &#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= IDLE;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cnt &lt;= 0;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;default:state &lt;= IDLE;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endcase&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;RD_REG_DONE:&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;RW_Done &lt;= 1'b1;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Color_data &lt;= {Temp_CL,Temp_CH,Temp_RL,Temp_RH,Temp_GL,Temp_GH,Temp_BL,Temp_BH};&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;rddata &lt;= Color_data;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= IDLE;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;default:state &lt;= IDLE;&#xa;&#x9;&#x9;&#x9;&#x9;endcase&#xa;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;/*************************************************颜色识别程序**********************************************************/&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;reg [7:0]clear_value;&#xa;&#x9;&#x9;&#x9;reg [7:0]red_value;&#xa;&#x9;&#x9;&#x9;reg [7:0]green_value;&#xa;&#x9;&#x9;&#x9;reg [7:0]blue_value;&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;always@(posedge Clk or negedge Rst_n)&#xa;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;if(!Rst_n)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;COLOR &lt;= 0;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;clear_value &lt;= 0;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;red_value &lt;= 0;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;green_value &lt;= 0;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;blue_value &lt;= 0;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;else &#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;clear_value &lt;= Color_data[63:56];&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;red_value &lt;= Color_data[47:40];&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;green_value &lt;= Color_data[31:24];&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;blue_value &lt;= Color_data[15:8];&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(clear_value &lt; clear_small)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;COLOR &lt;= BLACK;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(clear_value &lt; clear_middle)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(red_value &lt; green_value) COLOR &lt;= GREEN;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else COLOR &lt;= RED;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if((green_value>red_value)&amp;&amp;(green_value>blue_value)) COLOR &lt;= YELLOW;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(clear_value &lt; clear_big) COLOR &lt;= BLUE;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else COLOR &lt;= WHITE;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;/******************************************************************************************************************/&#xa;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;task read_byte;&#xa;&#x9;&#x9;&#x9;&#x9;input [5:0]Ctrl_Cmd;&#xa;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;Cmd &lt;= Ctrl_Cmd;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;Go &lt;= 1'b1; &#xa;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;endtask&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;task write_byte;&#xa;&#x9;&#x9;&#x9;&#x9;input [5:0]Ctrl_Cmd;&#xa;&#x9;&#x9;&#x9;&#x9;input [7:0]Wr_Byte_Data;&#xa;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;Cmd &lt;= Ctrl_Cmd;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;Tx_DATA &lt;= Wr_Byte_Data;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;Go &lt;= 1'b1; &#xa;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;endtask" Parent="0" Parameters="" Class="module" Include="0" Name="APD_i2c_control" Height="600" Comment="" X="0" File="Current/APD_i2c_control.model">
 <Module Type="model" Color="#d3d3d3" Width="207" Y="213.826" Code="&#x9;reg i2c_sdat_o;&#xa;&#xa;&#x9;//系统时钟采用50MHz&#xa;&#x9;parameter SYS_CLOCK = 33_333_333;&#xa;&#x9;//SCL总线时钟采用400kHz&#xa;&#x9;parameter SCL_CLOCK = 400_000;&#xa;&#x9;//产生时钟SCL计数器最大值&#xa;&#x9;localparam SCL_CNT_M = SYS_CLOCK/SCL_CLOCK/4 - 1;&#xa;&#x9;&#xa;&#x9;reg i2c_sdat_oe;&#xa;&#x9;&#xa;&#x9;localparam &#xa;&#x9;&#x9;WR   = 6'b000001,   //写请求&#xa;&#x9;&#x9;STA  = 6'b000010,   //起始位请求&#xa;&#x9;&#x9;RD   = 6'b000100,   //读请求&#xa;&#x9;&#x9;STO  = 6'b001000,   //停止位请求&#xa;&#x9;&#x9;ACK  = 6'b010000,   //应答位请求&#xa;&#x9;&#x9;NACK = 6'b100000;   //无应答请求&#xa;&#x9;&#x9;&#xa;&#x9;reg [19:0]div_cnt;&#xa;&#x9;reg en_div_cnt;&#xa;&#x9;always@(posedge Clk or negedge Rst_n)&#xa;&#x9;if(!Rst_n)&#xa;&#x9;&#x9;div_cnt &lt;= 20'd0;&#xa;&#x9;else if(en_div_cnt)begin&#xa;&#x9;&#x9;if(div_cnt &lt; SCL_CNT_M)&#xa;&#x9;&#x9;&#x9;div_cnt &lt;= div_cnt + 1'b1;&#xa;&#x9;&#x9;else&#xa;&#x9;&#x9;&#x9;div_cnt &lt;= 0;&#xa;&#x9;end&#xa;&#x9;else&#xa;&#x9;&#x9;div_cnt &lt;= 0;&#xa;&#xa;&#x9;wire sclk_plus = div_cnt == SCL_CNT_M;&#xa;&#x9;&#xa;&#x9;//assign i2c_sdat = i2c_sdat_oe?i2c_sdat_o:1'bz;&#xa;&#x9;assign i2c_sdat = !i2c_sdat_o &amp;&amp; i2c_sdat_oe ? 1'b0:1'bz;&#xa;&#x9;&#x9;&#xa;&#x9;reg [7:0]state;&#xa;&#x9;&#xa;&#x9;localparam&#xa;&#x9;&#x9;IDLE      = 8'b00000001,   //空闲状态&#xa;&#x9;&#x9;GEN_STA   = 8'b00000010,   //产生起始信号&#xa;&#x9;&#x9;WR_DATA   = 8'b00000100,   //写数据状态&#xa;&#x9;&#x9;RD_DATA   = 8'b00001000,   //读数据状态&#xa;&#x9;&#x9;CHECK_ACK = 8'b00010000,   //检测应答状态&#xa;&#x9;&#x9;GEN_ACK   = 8'b00100000,   //产生应答状态&#xa;&#x9;&#x9;GEN_STO   = 8'b01000000;   //产生停止信号&#xa;&#x9;&#x9;&#xa;&#x9;reg [4:0]cnt;&#xa;&#x9;&#x9;&#xa;&#x9;always@(posedge Clk or negedge Rst_n)&#xa;&#x9;if(!Rst_n)begin&#xa;&#x9;&#x9;Rx_DATA &lt;= 0;&#xa;&#x9;&#x9;i2c_sdat_oe &lt;= 1'd0;&#xa;&#x9;&#x9;en_div_cnt &lt;= 1'b0;&#xa;&#x9;&#x9;i2c_sdat_o &lt;= 1'd1;&#xa;&#x9;&#x9;Trans_Done &lt;= 1'b0;&#xa;&#x9;&#x9;ack_o &lt;= 0;&#xa;&#x9;&#x9;state &lt;= IDLE;&#xa;&#x9;&#x9;cnt &lt;= 0;&#xa;&#x9;end&#xa;&#x9;else begin&#xa;&#x9;&#x9;case(state)&#xa;&#x9;&#x9;&#x9;IDLE:&#xa;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;Trans_Done &lt;= 1'b0;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;i2c_sdat_oe &lt;= 1'd1;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;if(Go)begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;en_div_cnt &lt;= 1'b1;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(Cmd &amp; STA)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= GEN_STA;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else if(Cmd &amp; WR)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= WR_DATA;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else if(Cmd &amp; RD)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= RD_DATA;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= IDLE;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;else begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;en_div_cnt &lt;= 1'b0;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= IDLE;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;GEN_STA:&#xa;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;if(sclk_plus)begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(cnt == 3)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cnt &lt;= 0;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cnt &lt;= cnt + 1'b1;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case(cnt)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;0:begin i2c_sdat_o &lt;= 1; i2c_sdat_oe &lt;= 1'd1;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;1:begin i2c_sclk &lt;= 1;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;2:begin i2c_sdat_o &lt;= 0; i2c_sclk &lt;= 1;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;3:begin i2c_sclk &lt;= 0;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;default:begin i2c_sdat_o &lt;= 1; i2c_sclk &lt;= 1;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endcase&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(cnt == 3)begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(Cmd &amp; WR)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= WR_DATA;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else if(Cmd &amp; RD)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= RD_DATA;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;WR_DATA:&#xa;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;if(sclk_plus)begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(cnt == 31)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cnt &lt;= 0;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cnt &lt;= cnt + 1'b1;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case(cnt)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;0,4,8,12,16,20,24,28:begin i2c_sdat_o &lt;= Tx_DATA[7-cnt[4:2]]; i2c_sdat_oe &lt;= 1'd1;end&#x9;//set data;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;1,5,9,13,17,21,25,29:begin i2c_sclk &lt;= 1;end&#x9;//sclk posedge&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;2,6,10,14,18,22,26,30:begin i2c_sclk &lt;= 1;end&#x9;//sclk keep high&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;3,7,11,15,19,23,27,31:begin i2c_sclk &lt;= 0;end&#x9;//sclk negedge&#xa;/*&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;0 :begin i2c_sdat_o &lt;= Tx_DATA[7];end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;1 :begin i2c_sclk &lt;= 1;end&#x9;//sclk posedge&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;2 :begin i2c_sclk &lt;= 1;end&#x9;//sclk keep high&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;3 :begin i2c_sclk &lt;= 0;end&#x9;//sclk negedge&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;4 :begin i2c_sdat_o &lt;= Tx_DATA[6];end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;5 :begin i2c_sclk &lt;= 1;end&#x9;//sclk posedge&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;6 :begin i2c_sclk &lt;= 1;end&#x9;//sclk keep high&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;7 :begin i2c_sclk &lt;= 0;end&#x9;//sclk negedge&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;8 :begin i2c_sdat_o &lt;= Tx_DATA[5];end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;9 :begin i2c_sclk &lt;= 1;end&#x9;//sclk posedge&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;10:begin i2c_sclk &lt;= 1;end&#x9;//sclk keep high&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;11:begin i2c_sclk &lt;= 0;end&#x9;//sclk negedge&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;12:begin i2c_sdat_o &lt;= Tx_DATA[4];end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;13:begin i2c_sclk &lt;= 1;end&#x9;//sclk posedge&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;14:begin i2c_sclk &lt;= 1;end&#x9;//sclk keep high&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;15:begin i2c_sclk &lt;= 0;end&#x9;//sclk negedge&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;16:begin i2c_sdat_o &lt;= Tx_DATA[3];end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;17:begin i2c_sclk &lt;= 1;end&#x9;//sclk posedge&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;18:begin i2c_sclk &lt;= 1;end&#x9;//sclk keep high&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;19:begin i2c_sclk &lt;= 0;end&#x9;//sclk negedge&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;20:begin i2c_sdat_o &lt;= Tx_DATA[2];end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;21:begin i2c_sclk &lt;= 1;end&#x9;//sclk posedge&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;22:begin i2c_sclk &lt;= 1;end&#x9;//sclk keep high&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;23:begin i2c_sclk &lt;= 0;end&#x9;//sclk negedge&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;24:begin i2c_sdat_o &lt;= Tx_DATA[1];end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;25:begin i2c_sclk &lt;= 1;end&#x9;//sclk posedge&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;26:begin i2c_sclk &lt;= 1;end&#x9;//sclk keep high&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;27:begin i2c_sclk &lt;= 0;end&#x9;//sclk negedge&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;28:begin i2c_sdat_o &lt;= Tx_DATA[0];end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;29:begin i2c_sclk &lt;= 1;end&#x9;//sclk posedge&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;30:begin i2c_sclk &lt;= 1;end&#x9;//sclk keep high&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;31:begin i2c_sclk &lt;= 0;end&#x9;//sclk negedge&#xa;*/&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;default:begin i2c_sdat_o &lt;= 1; i2c_sclk &lt;= 1;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endcase&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(cnt == 31)begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= CHECK_ACK;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;RD_DATA:&#xa;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;if(sclk_plus)begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(cnt == 31)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cnt &lt;= 0;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cnt &lt;= cnt + 1'b1;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case(cnt)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;0,4,8,12,16,20,24,28:begin i2c_sdat_oe &lt;= 1'd0; i2c_sclk &lt;= 0;end&#x9;//set data;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;1,5,9,13,17,21,25,29:begin i2c_sclk &lt;= 1;end&#x9;//sclk posedge&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;2,6,10,14,18,22,26,30:begin i2c_sclk &lt;= 1; Rx_DATA &lt;= {Rx_DATA[6:0],i2c_sdat};end&#x9;//sclk keep high&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;3,7,11,15,19,23,27,31:begin i2c_sclk &lt;= 0;end&#x9;//sclk negedge&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;default:begin i2c_sdat_o &lt;= 1; i2c_sclk &lt;= 1;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endcase&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(cnt == 31)begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= GEN_ACK;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;CHECK_ACK:&#xa;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;if(sclk_plus)begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(cnt == 3)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cnt &lt;= 0;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cnt &lt;= cnt + 1'b1;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case(cnt)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;0:begin i2c_sdat_oe &lt;= 1'd0; i2c_sclk &lt;= 0;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;1:begin i2c_sclk &lt;= 1;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;2:begin ack_o &lt;= i2c_sdat; i2c_sclk &lt;= 1;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;3:begin i2c_sclk &lt;= 0;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;default:begin i2c_sdat_o &lt;= 1; i2c_sclk &lt;= 1;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endcase&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(cnt == 3)begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(Cmd &amp; STO)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= GEN_STO;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= IDLE;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Trans_Done &lt;= 1'b1;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;GEN_ACK:&#xa;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;if(sclk_plus)begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(cnt == 3)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cnt &lt;= 0;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cnt &lt;= cnt + 1'b1;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case(cnt)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;0:begin &#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;i2c_sdat_oe &lt;= 1'd1;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;i2c_sclk &lt;= 0;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(Cmd &amp; ACK)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;i2c_sdat_o &lt;= 1'b0;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else if(Cmd &amp; NACK)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;i2c_sdat_o &lt;= 1'b1;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;1:begin i2c_sclk &lt;= 1;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;2:begin i2c_sclk &lt;= 1;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;3:begin i2c_sclk &lt;= 0;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;default:begin i2c_sdat_o &lt;= 1; i2c_sclk &lt;= 1;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endcase&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(cnt == 3)begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(Cmd &amp; STO)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= GEN_STO;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= IDLE;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Trans_Done &lt;= 1'b1;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;GEN_STO:&#xa;&#x9;&#x9;&#x9;&#x9;begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;if(sclk_plus)begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(cnt == 3)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cnt &lt;= 0;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cnt &lt;= cnt + 1'b1;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case(cnt)&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;0:begin i2c_sdat_o &lt;= 0; i2c_sdat_oe &lt;= 1'd1;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;1:begin i2c_sclk &lt;= 1;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;2:begin i2c_sdat_o &lt;= 1; i2c_sclk &lt;= 1;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;3:begin i2c_sclk &lt;= 1;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;default:begin i2c_sdat_o &lt;= 1; i2c_sclk &lt;= 1;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endcase&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(cnt == 3)begin&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Trans_Done &lt;= 1'b1;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;state &lt;= IDLE;&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;&#x9;end&#xa;&#x9;&#x9;&#x9;default:state &lt;= IDLE;&#xa;&#x9;&#x9;endcase&#xa;&#x9;end&#xa;&#xa;&#xa;" Parent="APD_i2c_control" Parameters="" Class="APD_i2c_bit_shifter" Include="" Name="APD_i2c_bit_shifter2" Height="204" Comment="" X="319.665" File="Current/APD_i2c_bit_shifter.model">
  <Port Color="#faebd7" Width="20" Y="0.0931373" Inout="input" Parent="APD_i2c_bit_shifter2" Datasize="1" Connect="" Side="left" Name="Clk" Datatype="wire" Function="" Height="20" X="-0.0966184"/>
  <Port Color="#00ffff" Width="20" Y="0.235294" Inout="input" Parent="APD_i2c_bit_shifter2" Datasize="1" Connect="" Side="left" Name="Rst_n" Datatype="wire" Function="" Height="20" X="-0.0966184"/>
  <Port Color="#7fffd4" Width="20" Y="0.377451" Inout="input" Parent="APD_i2c_bit_shifter2" Datasize="6" Connect="Cmd" Side="left" Name="Cmd" Datatype="wire" Function="" Height="20" X="-0.0966184"/>
  <Port Color="#f0ffff" Width="20" Y="0.519608" Inout="input" Parent="APD_i2c_bit_shifter2" Datasize="1" Connect="Go" Side="left" Name="Go" Datatype="wire" Function="" Height="20" X="-0.0966184"/>
  <Port Color="#f5f5dc" Width="20" Y="0.661765" Inout="input" Parent="APD_i2c_bit_shifter2" Datasize="8" Connect="Tx_DATA" Side="left" Name="Tx_DATA" Datatype="wire" Function="" Height="20" X="-0.0966184"/>
  <Port Color="#ffe4c4" Width="20" Y="0.0931373" Inout="output" Parent="APD_i2c_bit_shifter2" Datasize="8" Connect="Rx_DATA" Side="right" Name="Rx_DATA" Datatype="reg" Function="" Height="20" X="0.903382"/>
  <Port Color="#b8860b" Width="20" Y="0.235294" Inout="output" Parent="APD_i2c_bit_shifter2" Datasize="1" Connect="Trans_Done" Side="right" Name="Trans_Done" Datatype="reg" Function="" Height="20" X="0.903382"/>
  <Port Color="#ffebcd" Width="20" Y="0.377451" Inout="output" Parent="APD_i2c_bit_shifter2" Datasize="1" Connect="ack_o" Side="right" Name="ack_o" Datatype="reg" Function="" Height="20" X="0.903382"/>
  <Port Color="#0000ff" Width="20" Y="0.519608" Inout="output" Parent="APD_i2c_bit_shifter2" Datasize="1" Connect="" Side="right" Name="i2c_sclk" Datatype="reg" Function="" Height="20" X="0.903382"/>
  <Port Color="#8a2be2" Width="20" Y="0.661765" Inout="inout" Parent="APD_i2c_bit_shifter2" Datasize="1" Connect="" Side="right" Name="i2c_sdat" Datatype="wire" Function="" Height="20" X="0.903382"/>
 </Module>
 <Port Color="#faebd7" Width="20" Y="0.183333" Inout="input" Parent="APD_i2c_control" Datasize="1" Side="left" Name="Clk" Datatype="wire" Function="" Height="20" X="-0.0222222"/>
 <Port Color="#00ffff" Width="20" Y="0.383333" Inout="input" Parent="APD_i2c_control" Datasize="1" Side="left" Name="Rst_n" Datatype="wire" Function="" Height="20" X="-0.0222222"/>
 <Port Color="#f0ffff" Width="20" Y="0.583333" Inout="input" Parent="APD_i2c_control" Datasize="1" Side="left" Name="rdreg_req" Datatype="wire" Function="" Height="20" X="-0.0222222"/>
 <Port Color="#0000ff" Width="20" Y="0.108333" Inout="output" Parent="APD_i2c_control" Datasize="64" Side="right" Name="rddata" Datatype="reg" Function="" Height="20" X="0.977778"/>
 <Port Color="#8a2be2" Width="20" Y="0.233333" Inout="output" Parent="APD_i2c_control" Datasize="1" Side="right" Name="RW_Done" Datatype="reg" Function="" Height="20" X="0.977778"/>
 <Port Color="#a52a2a" Width="20" Y="0.358333" Inout="output" Parent="APD_i2c_control" Datasize="1" Side="right" Name="ack" Datatype="reg" Function="" Height="20" X="0.977778"/>
 <Port Color="#deb887" Width="20" Y="0.483333" Inout="output" Parent="APD_i2c_control" Datasize="1" Side="right" Name="i2c_sclk" Datatype="wire" Function="" Height="20" X="0.977778"/>
 <Port Color="#5f9ea0" Width="20" Y="0.608333" Inout="inout" Parent="APD_i2c_control" Datasize="1" Side="right" Name="i2c_sdat" Datatype="wire" Function="" Height="20" X="0.977778"/>
 <Port Color="#0000ff" Width="20" Y="0.733333" Inout="output" Parent="APD_i2c_control" Datasize="8" Side="right" Name="COLOR" Datatype="reg" Function="" Height="20" X="0.977778"/>
 <Wire Parent="APD_i2c_control" To="APD_i2c_control#APD_i2c_bit_shifter2>Clk" Datasize="1" Name="APD_i2c_control_Clk" Datatype="wire" From="APD_i2c_control>Clk"/>
 <Wire Parent="APD_i2c_control" To="APD_i2c_control#APD_i2c_bit_shifter2>Rst_n" Datasize="1" Name="APD_i2c_control_Rst_n" Datatype="wire" From="APD_i2c_control>Rst_n"/>
 <Wire Parent="APD_i2c_control" To="APD_i2c_control>i2c_sclk" Datasize="1" Name="APD_i2c_bit_shifter2_i2c_sclk" Datatype="wire" From="APD_i2c_control#APD_i2c_bit_shifter2>i2c_sclk"/>
 <Wire Parent="APD_i2c_control" To="APD_i2c_control>i2c_sdat" Datasize="1" Name="APD_i2c_bit_shifter2_i2c_sdat" Datatype="wire" From="APD_i2c_control#APD_i2c_bit_shifter2>i2c_sdat"/>
</Module>
